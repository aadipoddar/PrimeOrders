@page "/Accounting"
@using PrimeBakesLibrary.Models.Accounts.FinancialAccounting
@using PrimeBakesLibrary.Models.Accounts.Masters
@using PrimeBakesLibrary.Models.Common

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />

<PageTitle>Financial Accounting - PrimeBakes</PageTitle>

@if (_isLoading)
{
	<div class="loader-container">
		<div class="circular-dots-loader">
			<span class="dot dot-1"></span>
			<span class="dot dot-2"></span>
			<span class="dot dot-3"></span>
		</div>
		<p class="loading-text">Loading Accounting Page...</p>
	</div>
}
else
{
	<div class="accounting-container">
		<div class="page-header">
			<button @onclick='() => NavigationManager.NavigateTo("/")' class="back-button">
				🏠
			</button>
			<h1 class="page-title">Financial Accounting</h1>
			<div class="header-spacer"></div>
		</div>

		<!-- Enhanced Filter Section -->
		<div class="filter-section">
			<div class="filter-content">
				<div class="filter-row">
					<div class="filter-group">
						<SfComboBox TValue="int"
									TItem="AccountTypeModel"
									FloatLabelType='@FloatLabelType.Auto'
									Placeholder="Select Account Type"
									DataSource="_accountTypes"
									Value="_selectedAccountTypeId"
									CssClass="filter-dropdown"
									AllowFiltering="true"
									FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
							<ComboBoxEvents TItem="AccountTypeModel" TValue="int" ValueChange="@OnAccountTypeChanged" />
							<ComboBoxFieldSettings Value="Id" Text="Name" />
						</SfComboBox>
					</div>

					<div class="filter-group">
						<SfComboBox TValue="int"
									TItem="GroupModel"
									FloatLabelType='@FloatLabelType.Auto'
									Placeholder="Select Group"
									DataSource="_groups"
									Value="_selectedGroupId"
									CssClass="filter-dropdown"
									AllowFiltering="true"
									FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
							<ComboBoxEvents TItem="GroupModel" TValue="int" ValueChange="@OnGroupChanged" />
							<ComboBoxFieldSettings Value="Id" Text="Name" />
						</SfComboBox>
					</div>
				</div>
			</div>
		</div>

		<!-- Balance Summary Card -->
		@if (TotalDebit > 0 || TotalCredit > 0)
		{
			<div class="balance-summary-card">
				<div class="balance-info">
					<div class="balance-item debit">
						<span class="balance-label">Total Debit</span>
						<span class="balance-value">₹@TotalDebit.ToString("N2")</span>
					</div>
					<div class="balance-item credit">
						<span class="balance-label">Total Credit</span>
						<span class="balance-value">₹@TotalCredit.ToString("N2")</span>
					</div>
					<div class="balance-item difference @(BalanceDifference == 0 ? "balanced" : (BalanceDifference > 0 ? "debit-heavy" : "credit-heavy"))">
						<span class="balance-label">Difference</span>
						<span class="balance-value">₹@Math.Abs(BalanceDifference).ToString("N2")</span>
						@if (BalanceDifference == 0)
						{
							<span class="balance-status balanced">✓ Balanced</span>
						}
						else
						{
							<span class="balance-status unbalanced">⚠ Unbalanced</span>
						}
					</div>
				</div>
			</div>
		}

		<div class="grid-container">
			<SfGrid @ref="_sfGrid"
					EnableAdaptiveUI="true"
					DataSource="GetFilteredLedgers()"
					AllowPaging="true"
					AllowSorting="false"
					AllowTextWrap="true"
					Toolbar="@(new List<string>() { "Search" })">

				<GridPageSettings PageSize="6" />

				<GridColumns>
					<GridColumn Field="@nameof(AccountingCartModel.Name)" HeaderText="Ledger" Width="40%" />
					<GridColumn Field="@nameof(AccountingCartModel.Debit)" HeaderText="Debit" Width="20%" TextAlign="TextAlign.Center">
						<Template>
							@{
								var item = (context as AccountingCartModel);
							}
							@if (item is not null)
							{
								<div class="amount-input-section">
									<SfNumericTextBox TValue="decimal?"
													  Value="@item.Debit"
													  ValueChanged="@((decimal? value) => UpdateDebit(item, value))"
													  Min="0"
													  Step="1"
													  Placeholder="0.00"
													  ShowSpinButton="false"
													  Format="N2"
													  Width="100%"
													  CssClass="amount-input debit-input" />
								</div>
							}
						</Template>
					</GridColumn>
					<GridColumn Field="@nameof(AccountingCartModel.Credit)" HeaderText="Credit" Width="20%" TextAlign="TextAlign.Center">
						<Template>
							@{
								var item = (context as AccountingCartModel);
							}
							@if (item is not null)
							{
								<div class="amount-input-section">
									<SfNumericTextBox TValue="decimal?"
													  Value="@item.Credit"
													  ValueChanged="@((decimal? value) => UpdateCredit(item, value))"
													  Min="0"
													  Step="1"
													  Placeholder="0.00"
													  ShowSpinButton="false"
													  Format="N2"
													  Width="100%"
													  CssClass="amount-input credit-input" />
								</div>
							}
						</Template>
					</GridColumn>
					<GridColumn Field="@nameof(AccountingCartModel.Remarks)" HeaderText="Remarks" Width="20%" TextAlign="TextAlign.Center">
						<Template>
							@{
								var item = (context as AccountingCartModel);
							}
							@if (item is not null)
							{
								<div class="remarks-input-section">
									<SfTextBox Value="@item.Remarks"
											   ValueChanged="@((string value) => UpdateRemarks(item, value))"
											   Placeholder="Enter remarks"
											   Width="100%"
											   CssClass="remarks-input" />
								</div>
							}
						</Template>
					</GridColumn>
				</GridColumns>
			</SfGrid>
		</div>

		@if (_cart.Any(c => (c.Debit ?? 0) > 0 || (c.Credit ?? 0) > 0))
		{
			<div class="cart-footer">
				<div class="cart-actions">
					<button @onclick="() => GoToCart()" class="cart-button @(BalanceDifference != 0 ? "unbalanced" : "balanced")">
						<i class="fas fa-calculator"></i>
						<span>Go to Cart</span>
						<span class="cart-count">@_cart.Count(c => (c.Debit ?? 0) > 0 || (c.Credit ?? 0) > 0)</span>
					</button>
				</div>
			</div>
		}
	</div>
}

<!-- Validation Dialog -->
<SfDialog @ref="_validationDialog"
		  Width="90%"
		  MaxWidth="500px"
		  IsModal="true"
		  ShowCloseIcon="true"
		  @bind-Visible="_validationDialogVisible">
	<DialogTemplates>
		<Header>
			<div class="dialog-header validation-header">
				<i class="fas fa-exclamation-triangle"></i>
				<span>Form Validation</span>
			</div>
		</Header>
		<Content>
			<div class="dialog-content validation-content">
				@if (_validationErrors.Any())
				{
					<div class="validation-summary">
						<h4><i class="fas fa-times-circle"></i> Please fix the following issues:</h4>
						<ul class="validation-list">
							@foreach (var error in _validationErrors)
							{
								<li class="validation-error">
									<i class="fas fa-arrow-right"></i>
									<span>@error</span>
								</li>
							}
						</ul>
					</div>
				}
				else
				{
					<div class="validation-success">
						<div class="success-icon">
							<i class="fas fa-check-circle"></i>
						</div>
						<h4>Form is Valid!</h4>
						<p>All validation checks have passed. You can proceed to the cart.</p>
					</div>
				}
			</div>
		</Content>
		<FooterTemplate>
			<div class="dialog-footer">
				@if (_validationErrors.Any())
				{
					<SfButton Content="Fix Issues" OnClick="CloseValidationDialog" CssClass="dialog-button primary" />
				}
				else
				{
					<SfButton Content="Go to Cart" OnClick="GoToCartFromValidation" CssClass="dialog-button primary" />
					<SfButton Content="Close" OnClick="CloseValidationDialog" CssClass="dialog-button" />
				}
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<!-- Confirmation Dialog -->
<SfDialog @ref="_confirmationDialog"
		  Width="90%"
		  MaxWidth="450px"
		  IsModal="true"
		  ShowCloseIcon="false"
		  @bind-Visible="_confirmationDialogVisible">
	<DialogTemplates>
		<Header>
			<div class="dialog-header confirmation-header">
				<i class="fas fa-question-circle"></i>
				<span>Confirm Proceed to Cart</span>
			</div>
		</Header>
		<Content>
			<div class="dialog-content confirmation-content">
				<div class="confirmation-message">
					<h3>Are you sure you want to proceed to the cart?</h3>
					<p>You have prepared your accounting entries. Please review the summary below before proceeding:</p>
				</div>

				<div class="confirmation-summary">
					<div class="summary-card">
						<div class="summary-row">
							<span class="summary-label"><i class="fas fa-list"></i> Total Entries:</span>
							<span class="summary-value">@_cart.Count(c => (c.Debit ?? 0) > 0 || (c.Credit ?? 0) > 0)</span>
						</div>
						<div class="summary-row">
							<span class="summary-label"><i class="fas fa-arrow-up text-success"></i> Total Debit:</span>
							<span class="summary-value text-success">₹@TotalDebit.ToString("N2")</span>
						</div>
						<div class="summary-row">
							<span class="summary-label"><i class="fas fa-arrow-down text-danger"></i> Total Credit:</span>
							<span class="summary-value text-danger">₹@TotalCredit.ToString("N2")</span>
						</div>
						<div class="summary-row balance-row">
							<span class="summary-label"><i class="fas fa-balance-scale"></i> Balance Status:</span>
							<span class="summary-value @(BalanceDifference == 0 ? "balanced" : "unbalanced")">
								@(BalanceDifference == 0 ? "✓ Balanced" : "⚠ Unbalanced")
							</span>
						</div>
					</div>

					<div class="confirmation-note">
						<i class="fas fa-info-circle"></i>
						<span>You will be able to add transaction details (date, voucher type, remarks) in the cart page.</span>
					</div>
				</div>
			</div>
		</Content>
		<FooterTemplate>
			<div class="dialog-footer">
				<SfButton Content="Yes, Proceed to Cart" IsPrimary="true" OnClick="ConfirmGoToCart" CssClass="dialog-button primary" />
				<SfButton Content="Cancel" OnClick="CloseConfirmationDialog" CssClass="dialog-button secondary" />
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<style>
	:root {
		--primary-color: #e2137b;
		--primary-dark: #c10e6a;
		--primary-light: #f5c6df;
		--secondary-color: #6c757d;
		--success-color: #28a745;
		--warning-color: #ffc107;
		--danger-color: #dc3545;
		--info-color: #17a2b8;
		--light-color: #f8f9fa;
		--dark-color: #343a40;
		--border-color: #dee2e6;
		--shadow-color: rgba(0, 0, 0, 0.1);
	}

	.accounting-container {
		padding: 0;
		margin: 0;
		min-height: 100vh;
		background-color: var(--light-color);
		font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
	}

	/* Loading Animation */
	.loader-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 100vh;
		background-color: var(--light-color);
	}

	.circular-dots-loader {
		display: inline-block;
		position: relative;
		width: 80px;
		height: 80px;
		margin-bottom: 20px;
	}

		.circular-dots-loader .dot {
			display: block;
			position: absolute;
			width: 16px;
			height: 16px;
			border-radius: 50%;
			background-color: var(--primary-color);
			animation: rotate 1.2s linear infinite;
		}

		.circular-dots-loader .dot-1 {
			animation-delay: 0s;
		}

		.circular-dots-loader .dot-2 {
			background-color: var(--primary-dark);
			animation-delay: -0.4s;
		}

		.circular-dots-loader .dot-3 {
			background-color: var(--secondary-color);
			animation-delay: -0.8s;
		}

	@@keyframes rotate {
		0% {
			transform: rotate(0deg) translate(-30px) rotate(0deg);
		}

		100% {
			transform: rotate(360deg) translate(-30px) rotate(-360deg);
		}
	}

	.loading-text {
		font-size: 18px;
		color: var(--dark-color);
		font-weight: 500;
		margin: 0;
	}

	/* Page Header */
	.page-header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 20px;
		background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
		color: white;
		box-shadow: 0 2px 10px var(--shadow-color);
	}

	.back-button {
		width: 50px;
		height: 50px;
		border-radius: 50%;
		border: none;
		background: rgba(255, 255, 255, 0.2);
		color: white;
		font-size: 20px;
		cursor: pointer;
		transition: all 0.3s ease;
		display: flex;
		align-items: center;
		justify-content: center;
	}

		.back-button:hover {
			background: rgba(255, 255, 255, 0.3);
			transform: scale(1.05);
		}

	.page-title {
		margin: 0;
		font-size: 24px;
		font-weight: 700;
		text-align: center;
		flex: 1;
	}

	.header-spacer {
		width: 50px;
	}

	/* Filter Section */
	.filter-section {
		background: white;
		padding: 20px;
		margin: 10px;
		border-radius: 15px;
		box-shadow: 0 2px 10px var(--shadow-color);
	}

	.filter-content {
		width: 100%;
	}

	.filter-row {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 15px;
		align-items: center;
	}

	.filter-group {
		display: flex;
		flex-direction: column;
	}

	/* Balance Summary Card */
	.balance-summary-card {
		background: white;
		margin: 10px;
		border-radius: 15px;
		padding: 20px;
		box-shadow: 0 2px 10px var(--shadow-color);
		border-left: 5px solid var(--primary-color);
	}

	.balance-info {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 20px;
		text-align: center;
	}

	.balance-item {
		display: flex;
		flex-direction: column;
		gap: 5px;
	}

	.balance-label {
		font-size: 12px;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		opacity: 0.7;
	}

	.balance-value {
		font-size: 18px;
		font-weight: 700;
		color: var(--dark-color);
	}

	.balance-status {
		font-size: 11px;
		font-weight: 600;
		padding: 2px 8px;
		border-radius: 10px;
		margin-top: 3px;
	}

		.balance-status.balanced {
			background: var(--success-color);
			color: white;
		}

		.balance-status.unbalanced {
			background: var(--warning-color);
			color: var(--dark-color);
		}

	.balance-item.debit .balance-value {
		color: var(--success-color);
	}

	.balance-item.credit .balance-value {
		color: var(--danger-color);
	}

	.balance-item.difference.balanced .balance-value {
		color: var(--success-color);
	}

	.balance-item.difference.debit-heavy .balance-value,
	.balance-item.difference.credit-heavy .balance-value {
		color: var(--warning-color);
	}

	/* Grid Container */
	.grid-container {
		margin: 10px;
		background: white;
		border-radius: 15px;
		box-shadow: 0 2px 10px var(--shadow-color);
		overflow: hidden;
	}

	/* Input Sections */
	.amount-input-section,
	.remarks-input-section {
		width: 100%;
		padding: 2px;
	}

	.amount-input {
		border-radius: 8px;
		border: 2px solid var(--border-color);
		transition: all 0.3s ease;
	}

		.amount-input.debit-input:focus {
			border-color: var(--success-color);
			box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
		}

		.amount-input.credit-input:focus {
			border-color: var(--danger-color);
			box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
		}

	.remarks-input {
		border-radius: 8px;
		border: 2px solid var(--border-color);
		transition: all 0.3s ease;
	}

		.remarks-input:focus {
			border-color: var(--primary-color);
			box-shadow: 0 0 0 3px rgba(226, 19, 123, 0.1);
		}

	/* Cart Footer */
	.cart-footer {
		position: fixed;
		bottom: 0;
		left: 0;
		right: 0;
		padding: 15px;
		background: white;
		border-top: 1px solid var(--border-color);
		box-shadow: 0 -2px 10px var(--shadow-color);
		z-index: 1000;
	}

	.cart-button {
		width: 100%;
		height: 60px;
		border: none;
		border-radius: 30px;
		color: white;
		font-size: 18px;
		font-weight: 700;
		cursor: pointer;
		transition: all 0.3s ease;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 10px;
		position: relative;
	}

		.cart-button.balanced {
			background: linear-gradient(135deg, var(--success-color), #20c997);
		}

		.cart-button.unbalanced {
			background: linear-gradient(135deg, var(--warning-color), #fd7e14);
			color: var(--dark-color);
		}

		.cart-button:hover {
			transform: translateY(-2px);
			box-shadow: 0 5px 15px var(--shadow-color);
		}

	.cart-count {
		position: absolute;
		top: -5px;
		right: 15px;
		background: var(--primary-color);
		color: white;
		width: 25px;
		height: 25px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 12px;
		font-weight: 700;
	}

	/* Responsive Design */
	@@media (max-width: 768px) {
		.page-title {
			font-size: 20px;
		}

		.filter-row {
			grid-template-columns: 1fr;
			gap: 10px;
		}

		.balance-info {
			grid-template-columns: 1fr;
			gap: 15px;
		}

		.balance-item {
			flex-direction: row;
			justify-content: space-between;
			align-items: center;
			padding: 10px;
			background: var(--light-color);
			border-radius: 8px;
		}

		.balance-value {
			font-size: 16px;
		}

		.cart-button {
			height: 55px;
			font-size: 16px;
		}
	}

	@@media (max-width: 480px) {
		.page-header {
			padding: 15px;
		}

		.page-title {
			font-size: 18px;
		}

		.back-button {
			width: 45px;
			height: 45px;
			font-size: 18px;
		}

		.filter-section,
		.balance-summary-card,
		.grid-container {
			margin: 8px;
			padding: 15px;
		}

		.cart-button {
			height: 50px;
			font-size: 15px;
		}
	}

	/* Validation Dialog Styles */
	.dialog-header {
		display: flex;
		align-items: center;
		gap: 10px;
		font-size: 18px;
		font-weight: 600;
		color: var(--primary-color);
	}

		.dialog-header.validation-header {
			color: var(--warning-color);
		}

	.dialog-content {
		padding: 20px 0;
	}

	.dialog-footer {
		display: flex;
		gap: 10px;
		justify-content: flex-end;
		padding: 10px 0 0 0;
	}

	.dialog-button {
		padding: 10px 20px;
		border-radius: 25px;
		font-weight: 600;
		transition: all 0.3s ease;
	}

		.dialog-button.primary {
			background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
			color: white;
			border: none;
		}

			.dialog-button.primary:hover:not(:disabled) {
				transform: translateY(-1px);
				box-shadow: 0 3px 10px var(--shadow-color);
			}

	.validation-summary h4 {
		margin: 0 0 15px 0;
		color: var(--danger-color);
		display: flex;
		align-items: center;
		gap: 10px;
	}

	.validation-list {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	.validation-error {
		display: flex;
		align-items: flex-start;
		gap: 10px;
		padding: 10px;
		margin: 8px 0;
		background: rgba(220, 53, 69, 0.1);
		border-left: 4px solid var(--danger-color);
		border-radius: 5px;
		color: var(--dark-color);
	}

		.validation-error i {
			color: var(--danger-color);
			margin-top: 2px;
			flex-shrink: 0;
		}

	.validation-success {
		text-align: center;
		padding: 20px;
	}

	.success-icon {
		font-size: 48px;
		color: var(--success-color);
		margin-bottom: 15px;
	}

	.validation-success h4 {
		margin: 0 0 10px 0;
		color: var(--success-color);
		font-size: 20px;
	}

	.validation-success p {
		margin: 0;
		color: var(--secondary-color);
		font-size: 14px;
	}

	/* Confirmation Dialog Styles */
	.dialog-header.confirmation-header {
		color: var(--info-color);
	}

	.confirmation-content {
		text-align: left;
	}

	.confirmation-message h3 {
		margin: 0 0 10px 0;
		color: var(--dark-color);
		font-size: 18px;
		font-weight: 600;
	}

	.confirmation-message p {
		margin: 0 0 20px 0;
		color: var(--secondary-color);
		font-size: 14px;
		line-height: 1.5;
	}

	.confirmation-summary {
		background: var(--light-color);
		border-radius: 10px;
		padding: 15px;
		margin-bottom: 15px;
	}

	.summary-card {
		background: white;
		border-radius: 8px;
		padding: 15px;
		margin-bottom: 15px;
		border: 1px solid var(--border-color);
	}

	.summary-row {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 8px 0;
		border-bottom: 1px solid var(--border-color);
	}

	.summary-row:last-child {
		border-bottom: none;
	}

	.summary-row.balance-row {
		margin-top: 10px;
		padding-top: 15px;
		border-top: 2px solid var(--border-color);
		font-weight: 600;
	}

	.summary-label {
		font-weight: 500;
		color: var(--secondary-color);
		display: flex;
		align-items: center;
		gap: 8px;
		font-size: 14px;
	}

	.summary-value {
		font-weight: 600;
		color: var(--dark-color);
		font-size: 14px;
	}

	.summary-value.balanced {
		color: var(--success-color);
	}

	.summary-value.unbalanced {
		color: var(--warning-color);
	}

	.text-success {
		color: var(--success-color) !important;
	}

	.text-danger {
		color: var(--danger-color) !important;
	}

	.confirmation-note {
		display: flex;
		align-items: flex-start;
		gap: 10px;
		padding: 12px;
		background: rgba(23, 162, 184, 0.1);
		border-left: 4px solid var(--info-color);
		border-radius: 5px;
		font-size: 13px;
		color: var(--dark-color);
	}

	.confirmation-note i {
		color: var(--info-color);
		margin-top: 1px;
		flex-shrink: 0;
	}

	.dialog-button.secondary {
		background: transparent;
		color: var(--secondary-color);
		border: 2px solid var(--border-color);
	}

	.dialog-button.secondary:hover:not(:disabled) {
		background: var(--light-color);
		border-color: var(--secondary-color);
		color: var(--dark-color);
	}

	/* Cart Actions */
	.cart-actions {
		display: flex;
		gap: 10px;
	}

	.validate-button {
		flex: 0 0 auto;
		height: 60px;
		padding: 0 20px;
		border: 2px solid var(--primary-color);
		background: transparent;
		color: var(--primary-color);
		border-radius: 30px;
		font-size: 16px;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.3s ease;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 8px;
	}

		.validate-button:hover {
			background: var(--primary-color);
			color: white;
			transform: translateY(-2px);
			box-shadow: 0 5px 15px var(--shadow-color);
		}

	.cart-button {
		flex: 1;
	}

</style>


