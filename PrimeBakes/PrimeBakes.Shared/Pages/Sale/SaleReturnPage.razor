@page "/SaleReturn"
@using PrimeBakesLibrary.Data.Common
@using PrimeBakesLibrary.Models.Sale
@using PrimeBakesLibrary.Models.Common
@using PrimeBakesLibrary.Models.Product

<PageTitle>Sale Return - Prime Bakes</PageTitle>

@if (_isLoading)
{
	<div class="loader-container">
		<div class="circular-dots-loader">
			<span class="dot dot-1"></span>
			<span class="dot dot-2"></span>
			<span class="dot dot-3"></span>
		</div>
		<p class="loading-text">Loading Sale Return...</p>
	</div>
}
else
{
	<div class="sale-return-container">
		<!-- Header -->
		<div class="page-header">
			<button @onclick='() => NavigationManager.NavigateTo("/")' class="back-button" disabled="@_isSaving">
				🏠
			</button>
			<h1 class="page-title">Sale Return</h1>
			<button @onclick="() => _returnDetailsDialogVisible = true" class="header-action-btn" disabled="@_isSaving">
				📄 Details
			</button>
		</div>

		<!-- Filter Section -->
		<div class="filter-section">
			<div class="filter-content">
				<div class="filter-row">
					<div class="filter-group">
						<label class="filter-label">Location</label>
						<SfComboBox TValue="int"
									TItem="LocationModel"
									@bind-Value="_saleReturn.LocationId"
									DataSource="_locations"
									CssClass="filter-control location-filter"
									AllowFiltering="true"
									FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
									Enabled="@(!_isSaving)">
							<ComboBoxEvents TItem="LocationModel" TValue="int" ValueChange="OnLocationChanged" />
							<ComboBoxFieldSettings Value="Id" Text="Name" />
						</SfComboBox>
					</div>

					<div class="filter-group">
						<label class="filter-label">Sale Date</label>
						<SfDatePicker TValue="DateOnly"
									  @bind-Value="_saleDate"
									  CssClass="filter-control date-filter"
									  Enabled="@(!_isSaving)">
							<DatePickerEvents TValue="DateOnly" ValueChange="DateChanged" />
						</SfDatePicker>
					</div>
				</div>

				<div class="sale-selection-row">
					<div class="sale-selection-group">
						<label class="filter-label">Select Sale to Return</label>
						<SfComboBox TValue="int"
									TItem="SaleOverviewModel"
									@bind-Value="_saleReturn.SaleId"
									DataSource="_availableSales"
									Placeholder="Choose a sale to process returns..."
									CssClass="filter-control sale-filter"
									AllowFiltering="true"
									FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
									Enabled="@(!_isSaving && _availableSales.Any())">
							<ComboBoxEvents TItem="SaleOverviewModel" TValue="int" ValueChange="OnSaleSelected" />
							<ComboBoxFieldSettings Value="SaleId" Text="BillNo" />
							<ComboBoxTemplates TItem="SaleOverviewModel">
								<ItemTemplate>
									<div class="sale-item-template">
										<div class="sale-header">
											<span class="bill-no">@((context as SaleOverviewModel)?.BillNo)</span>
											<span class="sale-date">@((context as SaleOverviewModel)?.SaleDateTime.ToString("dd/MM/yy hh:mm tt"))</span>
										</div>
										<div class="sale-details">
											<span class="customer-info">Customer: @(string.IsNullOrEmpty((context as SaleOverviewModel)?.CustomerName) ? "Walk-in" : (context as SaleOverviewModel)?.CustomerName)</span>
											<span class="amount-info">Amount: @((context as SaleOverviewModel)?.Total.FormatIndianCurrency())</span>
										</div>
									</div>
								</ItemTemplate>
							</ComboBoxTemplates>
						</SfComboBox>
					</div>
				</div>

				@if (!_availableSales.Any())
				{
					<div class="no-sales-message">
						<span class="message-icon">📅</span>
						<span class="message-text">No sales found for the selected date and location</span>
					</div>
				}
			</div>
		</div>

		<!-- Main Content -->
		<div class="main-content">
			@if (_saleReturn.SaleId > 0)
			{
				<div class="products-card">
					<div class="card-header">
						<h2 class="card-title">
							<span class="card-icon">📦</span>
							Products for Return
						</h2>
						<p class="card-subtitle">Adjust quantities for products to return</p>
					</div>
					<div class="card-body">
						@if (_availableSaleProducts.Any())
						{
							<div class="products-grid-container">
								<SfGrid ID="_sfProductGrid"
										@ref="_sfProductGrid"
										EnableAdaptiveUI="true"
										DataSource="_availableSaleProducts"
										AllowPaging="true"
										AllowSorting="false"
										AllowTextWrap="true"
										Toolbar="@(new List<string>() { "Search" })">

									<GridPageSettings PageSize="8" />

									<GridColumns>
										<GridColumn Field="@nameof(SaleReturnProductCartModel.ProductName)" HeaderText="Product" Width="25%" />
										<GridColumn HeaderText="Available Info" Width="20%" TextAlign="TextAlign.Center">
											<Template>
												@{
													var item = (context as SaleReturnProductCartModel);
												}
												@if (item is not null)
												{
													<div class="available-info">
														<div class="sold-qty">
															<span class="label">Sold:</span>
															<span class="value">@item.SoldQuantity.ToString("N0")</span>
														</div>
														<div class="max-qty">
															<span class="label">Available:</span>
															<span class="value highlight">@item.MaxQuantity.ToString("N0")</span>
														</div>
													</div>
												}
											</Template>
										</GridColumn>
										<GridColumn HeaderText="Rate" Width="12%" TextAlign="TextAlign.Right">
											<Template>
												@{
													var item = (context as SaleReturnProductCartModel);
												}
												@if (item is not null)
												{
													<div class="rate-display">
														@item.Rate.FormatIndianCurrency()
													</div>
												}
											</Template>
										</GridColumn>
										<GridColumn HeaderText="Return Quantity" Width="18%" TextAlign="TextAlign.Center">
											<Template>
												@{
													var item = (context as SaleReturnProductCartModel);
													var cartItem = _saleReturnProductCart.FirstOrDefault(c => c.ProductId == item.ProductId);
													decimal currentQty = cartItem?.Quantity ?? 0;
												}
												@if (item is not null)
												{
													<div class="return-quantity-section">
														<div class="quantity-controls">
															<SfNumericTextBox TValue="decimal"
																			  Value="@currentQty"
																			  ValueChanged="@((decimal value) => HandleQuantityChange(item, value))"
																			  Min="0"
																			  Max="@item.MaxQuantity"
																			  Step="1"
																			  type="tel"
																			  ShowSpinButton="true"
																			  Format="N0"
																			  Width="100px"
																			  CssClass="quantity-input"
																			  Enabled="@(!_isSaving)" />
														</div>
														<div class="max-info">
															<span class="max-label">Max:</span>
															<span class="max-value">@item.MaxQuantity.ToString("N0")</span>
														</div>
													</div>
												}
											</Template>
										</GridColumn>
										<GridColumn HeaderText="Return Amount" Width="15%" TextAlign="TextAlign.Right">
											<Template>
												@{
													var item = (context as SaleReturnProductCartModel);
													var cartItem = _saleReturnProductCart.FirstOrDefault(c => c.ProductId == item.ProductId);
												}
												@if (item is not null)
												{
													<div class="amount-details">
														@if (cartItem != null && cartItem.Quantity > 0)
														{
															<div class="total-info">
																<span class="total-value">@cartItem.Total.FormatIndianCurrency()</span>
															</div>
														}
														else
														{
															<span class="no-amount">-</span>
														}
													</div>
												}
											</Template>
										</GridColumn>
										<GridColumn HeaderText="Actions" Width="10%" TextAlign="TextAlign.Center">
											<Template>
												@{
													var item = (context as SaleReturnProductCartModel);
													var cartItem = _saleReturnProductCart.FirstOrDefault(c => c.ProductId == item.ProductId);
												}
												@if (item is not null && cartItem != null && cartItem.Quantity > 0)
												{
													<button class="remove-button" @onclick="() => RemoveFromReturn(cartItem)" @onclick:stopPropagation="true" title="Remove from Return" disabled="@_isSaving">
														<span class="remove-icon">🗑️</span>
													</button>
												}
											</Template>
										</GridColumn>
									</GridColumns>
								</SfGrid>
							</div>

							<!-- Return Summary -->
							@if (_saleReturnProductCart.Any())
							{
								<div class="return-summary">
									<div class="summary-header">
										<h3 class="summary-title">Return Summary</h3>
									</div>
									<div class="summary-content">
										<div class="summary-row">
											<span class="summary-label">Total Items:</span>
											<span class="summary-value">@_saleReturnProductCart.Count</span>
										</div>
										<div class="summary-row">
											<span class="summary-label">Total Quantity:</span>
											<span class="summary-value">@_saleReturnProductCart.Sum(x => x.Quantity).ToString("N0")</span>
										</div>
										<div class="summary-row">
											<span class="summary-label">Base Amount:</span>
											<span class="summary-value">@_saleReturnProductCart.Sum(x => x.BaseTotal).FormatIndianCurrency()</span>
										</div>
										<div class="summary-row">
											<span class="summary-label">Discount:</span>
											<span class="summary-value discount-value">-@_saleReturnProductCart.Sum(x => x.DiscAmount).FormatIndianCurrency()</span>
										</div>
										<div class="summary-row">
											<span class="summary-label">Tax Amount:</span>
											<span class="summary-value">@_saleReturnProductCart.Sum(x => x.CGSTAmount + x.SGSTAmount + x.IGSTAmount).FormatIndianCurrency()</span>
										</div>
										<div class="summary-divider"></div>
										<div class="summary-row total-row">
											<span class="summary-label">Total Return Amount:</span>
											<span class="summary-value total-value">@_saleReturnProductCart.Sum(x => x.Total).FormatIndianCurrency()</span>
										</div>
									</div>
								</div>
							}
						}
						else
						{
							<div class="no-products-available">
								<div class="empty-state">
									<span class="empty-icon">�</span>
									<h3>No Products Available</h3>
									<p>All products from this sale have already been returned</p>
								</div>
							</div>
						}
					</div>
				</div>
			}
			else
			{
				<div class="no-sale-selected">
					<div class="empty-state">
						<span class="empty-icon">🧾</span>
						<h3>No Sale Selected</h3>
						<p>Please select a sale to view available products for return</p>
					</div>
				</div>
			}
		</div>

		<!-- Action Buttons -->
		@if (_saleReturnProductCart.Any())
		{
			<div class="action-buttons-footer">
				<div class="action-buttons">
					<button @onclick="ClearReturnCart" class="clear-button" disabled="@_isSaving">
						🗑️ Clear Cart
					</button>
					<button @onclick="() => _confirmReturnDialogVisible = true" class="confirm-button" disabled="@_isSaving">
						✓ Process Return
					</button>
				</div>
			</div>
		}
	</div>

	<!-- Validation Error Dialog -->
	<SfDialog ID="_sfValidationErrorDialog"
			  @ref="_sfValidationErrorDialog"
			  Width="500px"
			  Height="auto"
			  AllowDragging="false"
			  EnableResize="false"
			  @bind-Visible="_validationErrorDialogVisible"
			  IsModal="true">
		<DialogPositionData X="Center" Y="Center" />
		<DialogTemplates>
			<Header>
				<div class="dialog-header error-header">
					<span class="error-icon">❌</span>
					<span>Validation Errors</span>
				</div>
			</Header>
			<Content>
				<div class="dialog-content error-content">
					<div class="error-message">
						<h3>Please fix the following errors before proceeding:</h3>
						<p>Review and correct the issues listed below to continue with your return.</p>
					</div>

					<div class="error-list">
						@foreach (var error in _validationErrors)
						{
							<div class="error-item">
								<div class="error-item-icon">⚠️</div>
								<div class="error-item-content">
									<div class="error-item-title">@error.Field</div>
									<div class="error-item-message">@error.Message</div>
								</div>
							</div>
						}
					</div>

					@if (_validationErrors.Count > 1)
					{
						<div class="error-summary">
							<span class="error-count">@_validationErrors.Count errors found</span>
						</div>
					}
				</div>
			</Content>
			<FooterTemplate>
				<div class="dialog-footer error-footer">
					<SfButton Content="Fix Issues" OnClick="() => _validationErrorDialogVisible = false" CssClass="dialog-button error-fix-button" />
				</div>
			</FooterTemplate>
		</DialogTemplates>
	</SfDialog>

	<!-- Return Details Dialog -->
	<SfDialog ID="_sfReturnDetailsDialog"
			  @ref="_sfReturnDetailsDialog"
			  Width="500px"
			  Height="auto"
			  AllowDragging="true"
			  EnableResize="false"
			  @bind-Visible="_returnDetailsDialogVisible"
			  IsModal="true">
		<DialogPositionData X="Center" Y="Center" />
		<DialogTemplates>
			<Header>
				<div class="dialog-header">
					<span class="return-icon">📄</span>
					<span>Return Details</span>
				</div>
			</Header>
			<Content>
				<div class="dialog-content">
					<div class="form-group">
						<label>Transaction Number</label>
						<SfTextBox Value="@_saleReturn.TransactionNo"
								   Placeholder="Transaction Number"
								   Readonly="true"
								   CssClass="form-control" />
					</div>

					<div class="form-group">
						<label>Return Date</label>
						<SfDateTimePicker @bind-Value="_saleReturn.ReturnDateTime"
										  Placeholder="Select Return Date"
										  CssClass="form-control"
										  Enabled="@(!_isSaving)" />
					</div>

					<div class="form-group full-width">
						<label>Remarks</label>
						<SfTextBox @bind-Value="_saleReturn.Remarks"
								   Placeholder="Add remarks (optional)"
								   Multiline="true"
								   CssClass="form-control"
								   Enabled="@(!_isSaving)" />
					</div>
				</div>
			</Content>
			<FooterTemplate>
				<div class="dialog-footer">
					<SfButton Content="Close" OnClick="() => _returnDetailsDialogVisible = false" CssClass="dialog-button" Disabled="@_isSaving" />
				</div>
			</FooterTemplate>
		</DialogTemplates>
	</SfDialog>

	<!-- Confirm Return Dialog -->
	<SfDialog ID="_sfConfirmReturnDialog"
			  @ref="_sfConfirmReturnDialog"
			  Width="450px"
			  Height="auto"
			  AllowDragging="false"
			  EnableResize="false"
			  @bind-Visible="_confirmReturnDialogVisible"
			  IsModal="true">
		<DialogPositionData X="Center" Y="Center" />
		<DialogTemplates>
			<Header>
				<div class="dialog-header confirmation-header">
					<span class="confirmation-icon">⚠️</span>
					<span>Confirm Sale Return</span>
				</div>
			</Header>
			<Content>
				<div class="dialog-content confirmation-content">
					<div class="confirmation-message">
						<h3>Are you sure you want to process this return?</h3>
						<p>This action cannot be undone. Please review your return before confirming.</p>
					</div>

					<div class="return-summary-dialog">
						<div class="summary-item">
							<span class="summary-label">Total Items:</span>
							<span class="summary-value">@_saleReturnProductCart.Count</span>
						</div>
						<div class="summary-item">
							<span class="summary-label">Return Date:</span>
							<span class="summary-value">@_saleReturn.ReturnDateTime.ToString("dd/MM/yy hh:mm tt")</span>
						</div>
						<div class="summary-item">
							<span class="summary-label">Total Quantity:</span>
							<span class="summary-value">@_saleReturnProductCart.Sum(x => x.Quantity)</span>
						</div>

						<div class="summary-item subtotal-summary">
							<span class="summary-label">Return Amount:</span>
							<span class="summary-value">@_saleReturnProductCart.Sum(x => x.Total).FormatIndianCurrency()</span>
						</div>

						@if (!string.IsNullOrEmpty(_saleReturn.Remarks))
						{
							<div class="summary-item">
								<span class="summary-label">Remarks:</span>
								<span class="summary-value">@_saleReturn.Remarks</span>
							</div>
						}
					</div>

					@if (_isSaving)
					{
						<div class="saving-indicator">
							<div class="saving-spinner"></div>
							<span class="saving-text">Processing return...</span>
						</div>
					}
				</div>
			</Content>
			<FooterTemplate>
				<div class="dialog-footer confirmation-footer">
					<SfButton Content="Cancel" OnClick="() => _confirmReturnDialogVisible = false" CssClass="dialog-button cancel-button" Disabled="@_isSaving" />
					<SfButton Content="Confirm Return" OnClick="ConfirmSaleReturn" CssClass="dialog-button confirm-return-button" IsPrimary="true" Disabled="@_isSaving" />
				</div>
			</FooterTemplate>
		</DialogTemplates>
	</SfDialog>


}

<style>
	:root {
		--primary-color: #e2137b;
		--primary-dark: #c71068;
		--primary-light: #f5c2d3;
		--text-dark: #2c3e50;
		--text-light: #7f8c8d;
		--bg-light: #f8f9fa;
		--border-color: #e9ecef;
		--shadow-light: 0 2px 8px rgba(0, 0, 0, 0.1);
		--shadow-medium: 0 4px 12px rgba(0, 0, 0, 0.15);
		--success-color: #28a745;
		--info-color: #17a2b8;
		--warning-color: #ffc107;
		--error-color: #dc3545;
		--discount-color: #ff6b35;
		--tax-color: #6f42c1;
		--return-primary: #e2137b;
		--return-secondary: #c71068;
	}

	/* Loading Animation */
	.loader-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 100vh;
		background: linear-gradient(135deg, #ffeef5 0%, #fff5f9 100%);
	}

	.circular-dots-loader {
		position: relative;
		width: 60px;
		height: 60px;
		margin-bottom: 15px;
	}

		.circular-dots-loader .dot {
			position: absolute;
			width: 12px;
			height: 12px;
			border-radius: 50%;
			animation: rotate 1.5s infinite linear;
		}

		.circular-dots-loader .dot-1 {
			background-color: var(--primary-color);
			animation-delay: 0s;
		}

		.circular-dots-loader .dot-2 {
			background-color: var(--info-color);
			animation-delay: -0.5s;
		}

		.circular-dots-loader .dot-3 {
			background-color: var(--primary-dark);
			animation-delay: -1s;
		}

	.loading-text {
		color: var(--text-dark);
		font-size: 16px;
		margin-top: 10px;
		font-weight: 500;
	}

	@@keyframes rotate {
		0% {
			transform: rotate(0deg) translate(-24px) rotate(0deg);
		}

		100% {
			transform: rotate(360deg) translate(-24px) rotate(-360deg);
		}
	}

	/* Main Container */
	.sale-return-container {
		min-height: 100vh;
		background: linear-gradient(135deg, #ffeef5 0%, #fff5f9 100%);
		padding: 0;
		display: flex;
		flex-direction: column;
	}

	/* Page Header */
	.page-header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 15px 20px;
		background: white;
		box-shadow: var(--shadow-light);
		position: sticky;
		top: 0;
		z-index: 100;
	}

	.back-button {
		background: var(--primary-color);
		color: white;
		border: none;
		border-radius: 8px;
		padding: 10px 15px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		transition: all 0.2s ease;
		box-shadow: var(--shadow-light);
		font-size: 18px;
		font-weight: bold;
		min-width: 44px;
		min-height: 44px;
	}

		.back-button:hover:not(:disabled) {
			background: var(--primary-dark);
			transform: translateY(-1px);
			box-shadow: var(--shadow-medium);
		}

		.back-button:active {
			transform: translateY(0);
		}

		.back-button:disabled {
			opacity: 0.6;
			cursor: not-allowed;
		}

	.page-title {
		margin: 0;
		color: var(--text-dark);
		font-size: 24px;
		font-weight: 600;
		flex: 1;
		text-align: center;
	}

	.header-action-btn {
		background: transparent;
		border: 2px solid var(--primary-color);
		color: var(--primary-color);
		border-radius: 8px;
		padding: 10px 12px;
		cursor: pointer;
		transition: all 0.2s ease;
		font-size: 14px;
		font-weight: 500;
		min-height: 44px;
	}

		.header-action-btn:hover:not(:disabled) {
			background: var(--primary-color);
			color: white;
		}

		.header-action-btn:disabled {
			opacity: 0.6;
			cursor: not-allowed;
		}

	/* Filter Section */
	.filter-section {
		background: white;
		margin: 15px;
		padding: 20px;
		border-radius: 16px;
		box-shadow: var(--shadow-light);
		border: 1px solid var(--border-color);
		transition: all 0.3s ease;
	}

		.filter-section:hover {
			box-shadow: var(--shadow-medium);
		}

	.filter-content {
		display: flex;
		flex-direction: column;
		gap: 20px;
	}

	.filter-row {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 20px;
	}

	.sale-selection-row {
		display: flex;
		flex-direction: column;
	}

	.filter-group,
	.sale-selection-group {
		display: flex;
		flex-direction: column;
		gap: 8px;
	}

	.filter-label {
		font-weight: 600;
		color: var(--text-dark);
		font-size: 14px;
		margin-bottom: 5px;
	}

	.filter-control {
		border: 2px solid var(--border-color);
		border-radius: 8px;
		transition: all 0.2s ease;
	}

	.no-sales-message {
		display: flex;
		align-items: center;
		gap: 10px;
		padding: 15px;
		background: var(--bg-light);
		border-radius: 8px;
		border-left: 4px solid var(--warning-color);
		margin-top: 15px;
	}

	.message-icon {
		font-size: 20px;
	}

	.message-text {
		color: var(--text-dark);
		font-weight: 500;
	}

	/* Sale Item Template */
	.sale-item-template {
		display: flex;
		flex-direction: column;
		gap: 5px;
		padding: 5px 0;
	}

	.sale-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.bill-no {
		font-weight: 600;
		color: var(--text-dark);
		font-size: 14px;
	}

	.sale-date {
		font-size: 11px;
		color: var(--text-light);
	}

	.sale-details {
		display: flex;
		justify-content: space-between;
		align-items: center;
		font-size: 12px;
		color: var(--text-light);
	}

	.customer-info,
	.amount-info {
		font-size: 11px;
	}

	/* Main Content */
	.main-content {
		flex: 1;
		padding: 15px;
	}

	/* Card Styles */
	.products-card,
	.return-cart-card {
		background: white;
		border-radius: 16px;
		box-shadow: var(--shadow-light);
		border: 1px solid var(--border-color);
		display: flex;
		flex-direction: column;
		overflow: hidden;
	}

	.card-header {
		padding: 20px;
		border-bottom: 1px solid var(--border-color);
		background: var(--bg-light);
	}

	.card-title {
		margin: 0 0 5px 0;
		color: var(--text-dark);
		font-size: 18px;
		font-weight: 600;
		display: flex;
		align-items: center;
		gap: 10px;
	}

	.card-icon {
		font-size: 20px;
	}

	.card-subtitle {
		margin: 0;
		color: var(--text-light);
		font-size: 14px;
		font-style: italic;
	}

	.card-body {
		padding: 20px;
		flex: 1;
		display: flex;
		flex-direction: column;
	}

	/* Available Info */
	.available-info {
		display: flex;
		flex-direction: column;
		gap: 3px;
		font-size: 11px;
	}

	.sold-qty,
	.returned-qty,
	.max-qty {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.label {
		color: var(--text-light);
		font-weight: 500;
	}

	.value {
		font-weight: 600;
		color: var(--text-dark);
	}

	.highlight {
		color: var(--primary-color) !important;
		font-weight: 700 !important;
	}

	.rate-display {
		font-weight: 600;
		color: var(--text-dark);
	}

	/* Return Quantity Section */
	.return-quantity-section {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 8px;
	}

	.add-to-return-button {
		background: var(--success-color);
		color: white;
		border: none;
		border-radius: 20px;
		padding: 8px 16px;
		display: flex;
		align-items: center;
		gap: 6px;
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 500;
		font-size: 12px;
		box-shadow: var(--shadow-light);
	}

		.add-to-return-button:hover:not(:disabled) {
			background: #218838;
			transform: translateY(-1px);
			box-shadow: var(--shadow-medium);
		}

		.add-to-return-button:disabled {
			opacity: 0.6;
			cursor: not-allowed;
		}

	.add-icon {
		font-size: 10px;
	}

	.add-text {
		font-weight: 600;
	}

	.quantity-display {
		display: flex;
		align-items: center;
		gap: 5px;
		font-size: 12px;
	}

	.qty-label {
		color: var(--text-light);
	}

	.qty-value {
		font-weight: 600;
		color: var(--success-color);
	}

	/* Edit Product Button */
	.edit-product-button {
		background: var(--info-color);
		color: white;
		border: none;
		border-radius: 50%;
		width: 28px;
		height: 28px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		transition: all 0.2s ease;
		box-shadow: var(--shadow-light);
	}

		.edit-product-button:hover:not(:disabled) {
			background: #138496;
			transform: scale(1.1);
		}

		.edit-product-button:disabled {
			opacity: 0.6;
			cursor: not-allowed;
		}

	.edit-icon {
		font-size: 10px;
	}

	/* Return Cart Specific Styles */
	.quantity-controls {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 100%;
	}

	.quantity-input-wrapper {
		min-width: 80px;
		max-width: 100px;
	}

	.quantity-input {
		width: 100% !important;
	}

		.quantity-input input {
			text-align: center !important;
			border: 2px solid var(--border-color);
			border-radius: 6px;
			padding: 6px 8px !important;
			font-weight: 600;
			font-size: 12px !important;
			color: var(--text-dark);
			transition: all 0.2s ease;
			height: 32px !important;
		}

			.quantity-input input:focus {
				border-color: var(--primary-color);
				box-shadow: 0 0 0 3px rgba(226, 19, 123, 0.1);
				outline: none;
			}

	.max-info {
		display: flex;
		align-items: center;
		gap: 3px;
		font-size: 10px;
		color: var(--text-light);
	}

	.max-label {
		font-weight: 500;
	}

	.max-value {
		font-weight: 600;
		color: var(--primary-color);
	}

	/* Amount Details */
	.amount-details {
		display: flex;
		flex-direction: column;
		gap: 3px;
		font-size: 11px;
	}

	.rate-info,
	.total-info {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.rate-label,
	.total-label {
		color: var(--text-light);
		font-weight: 500;
	}

	.rate-value {
		font-weight: 600;
		color: var(--text-dark);
	}

	.total-value {
		font-weight: 700;
		color: var(--primary-color);
	}

	.no-amount {
		color: var(--text-light);
		font-style: italic;
	}

	/* Action Buttons in Cart */
	.action-buttons {
		display: flex;
		align-items: center;
		gap: 8px;
	}

	.edit-button {
		background: var(--info-color);
		color: white;
		border: none;
		border-radius: 50%;
		width: 28px;
		height: 28px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		transition: all 0.2s ease;
		box-shadow: var(--shadow-light);
	}

		.edit-button:hover:not(:disabled) {
			background: #138496;
			transform: scale(1.1);
		}

		.edit-button:disabled {
			opacity: 0.6;
			cursor: not-allowed;
		}

	.remove-button {
		background: var(--error-color);
		color: white;
		border: none;
		border-radius: 50%;
		width: 28px;
		height: 28px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		transition: all 0.2s ease;
		box-shadow: var(--shadow-light);
	}

		.remove-button:hover:not(:disabled) {
			background: #c82333;
			transform: scale(1.1);
		}

		.remove-button:disabled {
			opacity: 0.6;
			cursor: not-allowed;
		}

	.remove-icon {
		font-size: 10px;
	}

	/* Return Summary */
	.return-summary {
		margin-top: 20px;
		padding: 20px;
		background: var(--bg-light);
		border-radius: 12px;
		border: 2px solid var(--primary-color);
	}

	.summary-header {
		margin-bottom: 15px;
	}

	.summary-title {
		margin: 0;
		color: var(--text-dark);
		font-size: 16px;
		font-weight: 600;
	}

	.summary-content {
		display: flex;
		flex-direction: column;
		gap: 8px;
	}

	.summary-row {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 5px 0;
	}

	.summary-label {
		color: var(--text-dark);
		font-weight: 500;
		font-size: 14px;
	}

	.summary-value {
		color: var(--text-dark);
		font-weight: 600;
		font-size: 14px;
	}

	.discount-value {
		color: var(--discount-color) !important;
	}

	.total-row {
		border-top: 2px solid var(--primary-color);
		padding-top: 10px;
		margin-top: 10px;
	}

		.total-row .summary-label {
			font-weight: 700;
			font-size: 16px;
		}

		.total-row .total-value {
			font-weight: 800;
			font-size: 16px;
			color: var(--primary-color) !important;
		}

	.summary-divider {
		height: 1px;
		background: var(--border-color);
		margin: 10px 0;
	}

	/* Empty States */
	.no-products-available,
	.empty-return-cart,
	.no-sale-selected {
		flex: 1;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.empty-state {
		text-align: center;
		padding: 40px 20px;
	}

		.empty-state .empty-icon {
			font-size: 48px;
			margin-bottom: 15px;
			opacity: 0.5;
		}

		.empty-state h3 {
			margin: 0 0 10px 0;
			color: var(--text-dark);
			font-size: 18px;
			font-weight: 600;
		}

		.empty-state p {
			margin: 0;
			color: var(--text-light);
			font-size: 14px;
		}

	/* Action Buttons Footer */
	.action-buttons-footer {
		position: sticky;
		bottom: 0;
		background: white;
		padding: 15px 20px;
		box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
		z-index: 100;
	}

		.action-buttons-footer .action-buttons {
			display: flex;
			gap: 15px;
		}

	.clear-button {
		flex: 1;
		background: var(--error-color);
		color: white;
		border: none;
		border-radius: 12px;
		padding: 15px 20px;
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 600;
		font-size: 16px;
		box-shadow: var(--shadow-light);
	}

		.clear-button:hover:not(:disabled) {
			background: #c82333;
			transform: translateY(-1px);
		}

		.clear-button:disabled {
			opacity: 0.6;
			cursor: not-allowed;
		}

	.confirm-button {
		flex: 2;
		background: var(--success-color);
		color: white;
		border: none;
		border-radius: 12px;
		padding: 15px 20px;
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 600;
		font-size: 16px;
		box-shadow: var(--shadow-medium);
	}

		.confirm-button:hover:not(:disabled) {
			background: #218838;
			transform: translateY(-1px);
		}

		.confirm-button:disabled {
			opacity: 0.6;
			cursor: not-allowed;
		}

	/* Grid Styling */
	::deep .e-grid {
		border-radius: 12px;
		overflow: hidden;
		background: white;
		box-shadow: var(--shadow-light);
		border: none;
		font-size: 12px;
	}

		::deep .e-grid .e-gridheader {
			background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
		}

		::deep .e-grid .e-headercell {
			background: transparent;
			color: white;
			font-weight: 600;
			border: none;
			padding: 10px 8px;
			font-size: 11px;
		}

		::deep .e-grid .e-rowcell {
			border: none;
			border-bottom: 1px solid var(--border-color);
			padding: 8px 6px;
			vertical-align: middle;
			font-size: 11px;
			line-height: 1.3;
		}

		::deep .e-grid .e-row:nth-child(even) {
			background-color: #fafafa;
		}

		::deep .e-grid .e-row:hover {
			background-color: var(--primary-light);
		}

		::deep .e-grid .e-row {
			height: 35px;
		}

	/* Toolbar Styling */
	::deep .e-toolbar {
		background: white;
		border-bottom: 1px solid var(--border-color);
		padding: 8px 12px;
	}

		::deep .e-toolbar .e-input-group input {
			border-radius: 25px;
			border: 2px solid var(--border-color);
			padding: 8px 12px;
			font-size: 12px;
		}

			::deep .e-toolbar .e-input-group input:focus {
				border-color: var(--primary-color);
				box-shadow: 0 0 0 3px rgba(226, 19, 123, 0.1);
			}

	/* Pager Styling */
	::deep .e-pager {
		background: white;
		border-top: 1px solid var(--border-color);
		padding: 8px;
		font-size: 11px;
	}

		::deep .e-pager .e-currentitem {
			background: var(--primary-color);
			color: white;
			border-radius: 6px;
		}

	/* Dialog Styling */
	.dialog-header {
		font-size: 18px;
		font-weight: 600;
		color: var(--text-dark);
		display: flex;
		align-items: center;
		gap: 10px;
	}

	.return-icon,
	.product-icon {
		font-size: 20px;
		color: var(--primary-color);
	}

	.dialog-content {
		padding: 20px;
		max-height: 70vh;
		overflow-y: auto;
	}

	.form-group {
		margin-bottom: 15px;
	}

		.form-group label {
			display: block;
			margin-bottom: 8px;
			font-weight: 500;
			color: var(--text-dark);
		}

	.form-control {
		width: 100%;
		border-radius: 6px;
	}

	.full-width {
		grid-column: 1 / -1;
	}

	.dialog-footer {
		display: flex;
		justify-content: flex-end;
		align-items: center;
		padding: 15px 20px;
		background-color: var(--bg-light);
		border-top: 1px solid var(--border-color);
		gap: 10px;
	}

	.dialog-button {
		background-color: var(--text-light);
		color: white;
		border: none;
		padding: 10px 20px;
		border-radius: 6px;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.2s ease;
	}

		.dialog-button:hover {
			background-color: #6c757d;
		}

	.confirm-return-button {
		background-color: var(--success-color) !important;
	}

		.confirm-return-button:hover {
			background-color: #218838 !important;
		}

	.cancel-button {
		background-color: var(--error-color) !important;
	}

		.cancel-button:hover {
			background-color: #c82333 !important;
		}

	/* Error Dialog Styling */
	.error-header .error-icon {
		color: var(--error-color);
	}

	.error-content {
		padding: 20px;
	}

	.error-message h3 {
		margin: 0 0 10px 0;
		color: var(--error-color);
		font-size: 18px;
	}

	.error-message p {
		margin: 0 0 20px 0;
		color: var(--text-light);
	}

	.error-list {
		display: flex;
		flex-direction: column;
		gap: 10px;
	}

	.error-item {
		display: flex;
		align-items: flex-start;
		gap: 10px;
		padding: 10px;
		background: #ffe6e6;
		border-radius: 8px;
		border-left: 4px solid var(--error-color);
	}

	.error-item-icon {
		font-size: 16px;
		margin-top: 2px;
	}

	.error-item-content {
		flex: 1;
	}

	.error-item-title {
		font-weight: 600;
		color: var(--error-color);
		margin-bottom: 3px;
	}

	.error-item-message {
		color: var(--text-dark);
		font-size: 14px;
	}

	.error-summary {
		text-align: center;
		margin-top: 15px;
		padding: 10px;
		background: var(--bg-light);
		border-radius: 8px;
	}

	.error-count {
		font-weight: 600;
		color: var(--error-color);
	}

	/* Confirmation Dialog */
	.confirmation-header .confirmation-icon {
		color: var(--warning-color);
	}

	.confirmation-content {
		padding: 20px;
	}

	.confirmation-message h3 {
		margin: 0 0 10px 0;
		color: var(--text-dark);
		font-size: 18px;
	}

	.confirmation-message p {
		margin: 0 0 20px 0;
		color: var(--text-light);
	}

	.return-summary-dialog {
		background: var(--bg-light);
		padding: 15px;
		border-radius: 8px;
		margin-bottom: 20px;
	}

		.return-summary-dialog .summary-item {
			display: flex;
			justify-content: space-between;
			padding: 8px 0;
			border-bottom: 1px solid var(--border-color);
		}

			.return-summary-dialog .summary-item:last-child {
				border-bottom: none;
			}

		.return-summary-dialog .subtotal-summary {
			border-top: 2px solid var(--primary-color);
			padding-top: 10px;
			margin-top: 10px;
			font-weight: 600;
		}

	.saving-indicator {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 10px;
		padding: 15px;
		background: var(--primary-light);
		border-radius: 8px;
		margin-top: 15px;
	}

	.saving-spinner {
		width: 20px;
		height: 20px;
		border: 2px solid #f3f3f3;
		border-top: 2px solid var(--primary-color);
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}

	.saving-text {
		font-weight: 500;
		color: var(--primary-color);
	}

	@@keyframes spin {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}

	/* Product Details Dialog Styling */
	.product-info-section {
		margin-bottom: 25px;
		padding: 20px;
		background: var(--bg-light);
		border-radius: 12px;
		border: 1px solid var(--border-color);
	}

	.product-title {
		margin: 0 0 15px 0;
		color: var(--text-dark);
		font-size: 18px;
		font-weight: 600;
		text-align: center;
	}

	.product-summary {
		display: flex;
		justify-content: space-around;
		flex-wrap: wrap;
		gap: 10px;
	}

		.product-summary .summary-item {
			font-size: 14px;
			color: var(--text-light);
			text-align: center;
		}

			.product-summary .summary-item strong {
				color: var(--text-dark);
			}

	.action-buttons-section {
		display: flex;
		flex-direction: column;
		gap: 15px;
	}

	.detail-action-button {
		display: flex;
		align-items: center;
		gap: 15px;
		padding: 20px;
		border: none;
		border-radius: 12px;
		cursor: pointer;
		transition: all 0.3s ease;
		text-align: left;
		box-shadow: var(--shadow-light);
		position: relative;
		overflow: hidden;
	}

		.detail-action-button:hover {
			transform: translateY(-2px);
			box-shadow: var(--shadow-medium);
		}

		.detail-action-button:active {
			transform: translateY(0);
		}

	.basic-button {
		background: linear-gradient(135deg, var(--success-color) 0%, #20c997 100%);
		color: white;
	}

		.basic-button:hover {
			background: linear-gradient(135deg, #218838 0%, #1e7e34 100%);
		}

	.discount-button {
		background: linear-gradient(135deg, var(--discount-color) 0%, #ff5722 100%);
		color: white;
	}

		.discount-button:hover {
			background: linear-gradient(135deg, #e55a4e 0%, #d84315 100%);
		}

	.tax-button {
		background: linear-gradient(135deg, var(--tax-color) 0%, #5a39c5 100%);
		color: white;
	}

		.tax-button:hover {
			background: linear-gradient(135deg, #5e379b 0%, #483593 100%);
		}

	.button-icon {
		font-size: 24px;
		flex-shrink: 0;
	}

	.button-text {
		font-size: 18px;
		font-weight: 600;
		display: block;
		margin-bottom: 4px;
	}

	.button-description {
		font-size: 13px;
		opacity: 0.9;
		font-weight: 400;
	}

	/* Form styling for detailed dialogs */
	.form-row {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 20px;
		margin-bottom: 20px;
	}

	.basic-summary,
	.discount-summary,
	.tax-summary {
		margin-top: 20px;
	}

	.summary-card {
		background: white;
		padding: 15px;
		border-radius: 8px;
		border: 1px solid var(--border-color);
	}

	.material-name {
		color: var(--primary-color);
		font-weight: 500;
	}

	.tax-grid {
		display: flex;
		flex-direction: column;
		gap: 15px;
	}

	.tax-row {
		display: flex;
	}

	.tax-column {
		flex: 1;
	}

	.tax-info {
		margin-top: 15px;
	}

	.info-card {
		background: var(--bg-light);
		padding: 10px 15px;
		border-radius: 8px;
		border-left: 4px solid var(--info-color);
		display: flex;
		align-items: center;
		gap: 10px;
	}

	.info-icon {
		font-size: 16px;
		color: var(--info-color);
	}

	.info-text {
		font-size: 13px;
		color: var(--text-dark);
	}

	.footer-buttons {
		display: flex;
		gap: 10px;
	}

	/* Syncfusion component styling */
	::deep .filter-control .e-input-group {
		border: 2px solid var(--border-color);
		border-radius: 8px;
		transition: all 0.2s ease;
	}

		::deep .filter-control .e-input-group:hover {
			border-color: var(--primary-light);
		}

		::deep .filter-control .e-input-group.e-input-focus {
			border-color: var(--primary-color);
			box-shadow: 0 0 0 3px rgba(226, 19, 123, 0.1);
		}

	::deep .sale-filter .e-popup {
		border: 2px solid var(--primary-color);
		border-radius: 12px;
		box-shadow: var(--shadow-medium);
	}

	/* Mobile Responsiveness */
	@@media (max-width: 768px) {
		.page-header {
			padding: 12px 15px;
		}

		.page-title {
			font-size: 18px;
		}

		.filter-section {
			margin: 10px;
			padding: 15px;
		}

		.filter-row {
			grid-template-columns: 1fr;
			gap: 15px;
		}

		.card-header {
			padding: 15px;
		}

		.card-title {
			font-size: 16px;
		}

		.card-body {
			padding: 15px;
		}

		.return-summary {
			margin-top: 15px;
			padding: 15px;
		}

		.action-buttons-footer {
			padding: 12px 15px;
		}

		.action-buttons {
			flex-direction: column;
			gap: 10px;
		}

		.clear-button,
		.confirm-button {
			flex: none;
		}

		::deep .e-grid .e-headercell {
			padding: 8px 6px;
			font-size: 10px;
		}

		::deep .e-grid .e-rowcell {
			padding: 6px 4px;
			font-size: 10px;
		}

		.dialog-content {
			padding: 15px;
		}

		.form-row {
			grid-template-columns: 1fr;
			gap: 15px;
		}

		.dialog-footer {
			flex-direction: column;
			gap: 10px;
		}

			.dialog-footer button {
				width: 100%;
			}

		.action-buttons-section {
			gap: 12px;
		}

		.detail-action-button {
			padding: 15px;
			gap: 12px;
		}

		.button-icon {
			font-size: 20px;
		}

		.button-text {
			font-size: 16px;
		}

		.button-description {
			font-size: 12px;
		}
	}

	@@media (max-width: 576px) {
		.back-button,
		.header-action-btn {
			padding: 8px 10px;
			font-size: 14px;
		}

		.page-title {
			font-size: 16px;
		}

		.quantity-input-wrapper {
			min-width: 70px;
			max-width: 90px;
		}

		.quantity-input input {
			font-size: 11px !important;
			height: 30px !important;
			padding: 4px 6px !important;
		}

		::deep .e-grid .e-headercell {
			padding: 6px 4px;
			font-size: 9px;
		}

		::deep .e-grid .e-rowcell {
			padding: 4px 2px;
			font-size: 9px;
		}
	}

	/* Improved touch targets for mobile */
	@@media (hover: none) and (pointer: coarse) {
		.add-to-return-button {
			min-height: 44px;
			padding: 10px 20px;
		}

		.back-button,
		.header-action-btn {
			min-width: 48px;
			min-height: 48px;
		}

		.edit-button,
		.remove-button,
		.edit-product-button {
			width: 40px;
			height: 40px;
		}

		.quantity-input input {
			min-height: 36px !important;
		}

		.detail-action-button {
			min-height: 60px;
		}
	}
</style>