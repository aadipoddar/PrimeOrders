@page "/Reports/ProductStock"

@using ChartLabelPosition = Syncfusion.Blazor.Charts.LabelPosition
@using PrimeBakes.Shared.Services
@using PrimeBakesLibrary.Models.Common
@using PrimeBakesLibrary.Models.Inventory
@using PrimeBakesLibrary.Models.Inventory.Stock
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<PageTitle>Product Stock Report - PrimeBakes</PageTitle>

@if (_isLoading)
{
	<div class="loading-overlay">
		<div class="loading-content">
			<div class="circular-dots-loader">
				<span class="dot dot-1"></span>
				<span class="dot dot-2"></span>
				<span class="dot dot-3"></span>
			</div>
			<p class="loading-text">Loading Product Stock Report...</p>
		</div>
	</div>
}
else
{
	<div class="stock-report-container">
		<!-- Header Section -->
		<div class="page-header">
			<div class="header-content">
				<div class="header-title">
					<div class="title-icon">
						<i class="fas fa-cubes"></i>
					</div>
					<div class="title-info">
						<h1>Product Stock Report</h1>
						<p>Comprehensive product inventory analysis and stock insights</p>
					</div>
				</div>

				<div class="header-actions">
					<button @onclick='() => NavigationManager.NavigateTo("/Reports-Dashboard")' class="back-btn">
						<i class="fas fa-arrow-left"></i>
						<span>Back to Reports</span>
					</button>

					<button @onclick='() => NavigationManager.NavigateTo("/Inventory/ProductStockAdjustment")' class="adjust-stock-btn">
						<i class="fas fa-balance-scale"></i>
						<span>Adjust Stock</span>
					</button>
				</div>
			</div>
		</div>

		<!-- Filter Section -->
		<div class="filter-section">
			<div class="filter-card">
				<div class="filter-header">
					<h3><i class="fas fa-filter"></i> Filters & Controls</h3>
				</div>

				<div class="filter-controls">
					<!-- Location Filter (Only for location 1 users) -->
					@if (_user.LocationId == 1 && _locations.Count > 1)
					{
						<div class="filter-group">
							<label class="filter-label">
								<i class="fas fa-map-marker-alt"></i>
								Location
							</label>
							<SfComboBox TValue="int"
										TItem="LocationModel"
										FloatLabelType='@FloatLabelType.Auto'
										Placeholder="Select Location"
										DataSource="_locations"
										Value="_selectedLocationId"
										CssClass="location-filter">
								<ComboBoxEvents TItem="LocationModel" TValue="int" ValueChange="OnLocationChanged" />
								<ComboBoxFieldSettings Value="Id" Text="Name" />
							</SfComboBox>
						</div>
					}

					<div class="filter-group">
						<label class="filter-label">
							<i class="fas fa-calendar-alt"></i>
							Date Range
						</label>
						<SfDateRangePicker TValue="DateOnly?"
										   @bind-StartDate="_fromDate"
										   @bind-EndDate="_toDate"
										   Format="dd/MM/yyyy"
										   Placeholder="Select Date Range"
										   CssClass="date-range-picker">
							<DateRangePickerEvents TValue="DateOnly?" ValueChange="DateRangeChanged" />
						</SfDateRangePicker>
					</div>
				</div>

				<div class="filter-actions">
					<button @onclick="ToggleView" class="view-toggle-btn @(_showSummaryView ? "summary-active" : "details-active")">
						<i class="fas @(_showSummaryView ? "fa-list-ul" : "fa-table")"></i>
						<span>@(_showSummaryView ? "Switch to Details" : "Switch to Summary")</span>
					</button>

					<button @onclick="ToggleCharts" class="chart-toggle-btn @(_showCharts ? "active" : "")">
						<i class="fas fa-chart-pie"></i>
						<span>@(_showCharts ? "Hide Charts" : "Show Charts")</span>
					</button>

					@if (_showSummaryView)
					{
						<button @onclick="ExportStockSummaryToExcel" class="export-btn" disabled="@_isProcessing">
							<i class="fas fa-file-excel"></i>
							<span>Export Summary</span>
						</button>
					}
					else
					{
						<button @onclick="ExportStockDetailsToExcel" class="export-btn" disabled="@_isProcessing">
							<i class="fas fa-file-excel"></i>
							<span>Export Details</span>
						</button>
					}
				</div>
			</div>
		</div>

		<!-- Summary Cards Section -->
		<div class="summary-section">
			<div class="section-header">
				<h2><i class="fas fa-chart-line"></i> Stock Overview</h2>
				<div class="period-info">
					@((_fromDate ?? DateOnly.FromDateTime(DateTime.Now)).ToString("dd MMM yyyy")) - @((_toDate ?? DateOnly.FromDateTime(DateTime.Now)).ToString("dd MMM yyyy"))
					@if (_user.LocationId == 1 && _locations.Count > 1)
					{
						<span class="location-badge">@(_locations.FirstOrDefault(l => l.Id == _selectedLocationId)?.Name ?? "All Locations")</span>
					}
				</div>
			</div>

			<div class="summary-cards">
				<!-- Total Stock Items Card -->
				<div class="summary-card highlight-card">
					<div class="card-icon">
						<i class="fas fa-cubes"></i>
					</div>
					<div class="card-content">
						<div class="card-value">@GetTotalStockItems().ToString("N0")</div>
						<div class="card-label">Total Stock Items</div>
						<div class="card-trend">
							<i class="fas fa-boxes"></i>
							<span>Product types</span>
						</div>
					</div>
				</div>

				<!-- Opening Stock Card -->
				<div class="summary-card">
					<div class="card-icon">
						<i class="fas fa-door-open"></i>
					</div>
					<div class="card-content">
						<div class="card-value">@GetTotalOpeningStock().ToString("N2")</div>
						<div class="card-label">Opening Stock</div>
						<div class="card-trend">
							<i class="fas fa-arrow-up"></i>
							<span>Starting inventory</span>
						</div>
					</div>
				</div>

				<!-- Production Card -->
				<div class="summary-card">
					<div class="card-icon">
						<i class="fas fa-industry"></i>
					</div>
					<div class="card-content">
						<div class="card-value">@GetTotalProduction().ToString("N2")</div>
						<div class="card-label">Total Production</div>
						<div class="card-trend">
							<i class="fas fa-plus"></i>
							<span>Stock produced</span>
						</div>
					</div>
				</div>

				<!-- Sales Card -->
				<div class="summary-card">
					<div class="card-icon">
						<i class="fas fa-hand-holding-usd"></i>
					</div>
					<div class="card-content">
						<div class="card-value">@GetTotalSales().ToString("N2")</div>
						<div class="card-label">Total Sales</div>
						<div class="card-trend">
							<i class="fas fa-minus"></i>
							<span>Stock sold</span>
						</div>
					</div>
				</div>

				<!-- Closing Stock Card -->
				<div class="summary-card">
					<div class="card-icon">
						<i class="fas fa-warehouse"></i>
					</div>
					<div class="card-content">
						<div class="card-value">@GetTotalClosingStock().ToString("N2")</div>
						<div class="card-label">Closing Stock</div>
						<div class="card-trend">
							<i class="fas fa-equals"></i>
							<span>Current inventory</span>
						</div>
					</div>
				</div>

				<!-- Stock Value Card -->
				<div class="summary-card">
					<div class="card-icon">
						<i class="fas fa-rupee-sign"></i>
					</div>
					<div class="card-content">
						<div class="card-value">₹@GetTotalStockValue().ToString("N2")</div>
						<div class="card-label">Total Stock Value</div>
						<div class="card-trend">
							<i class="fas fa-chart-bar"></i>
							<span>Inventory worth</span>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Charts Section -->
		@if (_showCharts && _stockSummary.Any())
		{
			<div class="charts-section">
				<div class="section-header">
					<h2><i class="fas fa-chart-pie"></i> Stock Analytics</h2>
				</div>

				<div class="charts-grid">
					<!-- Stock Overview Chart -->
					<div class="chart-card">
						<div class="chart-header">
							<h4>Stock Movement Overview</h4>
							<p>Current stock components</p>
						</div>
						<div class="chart-container">
							<SfAccumulationChart>
								<AccumulationChartSeriesCollection>
									<AccumulationChartSeries DataSource="GetStockOverviewData()"
															 XName="Component"
															 YName="Value"
															 Type="AccumulationType.Pie"
															 Radius="80%">
										<AccumulationDataLabelSettings Visible="true" Name="Component" Position="AccumulationLabelPosition.Outside" />
									</AccumulationChartSeries>
								</AccumulationChartSeriesCollection>
								<AccumulationChartTooltipSettings Enable="true" Format="${point.x}: ${point.y}" />
								<AccumulationChartLegendSettings Visible="true" Position="LegendPosition.Bottom" />
							</SfAccumulationChart>
						</div>
					</div>

					<!-- Category Distribution Chart -->
					<div class="chart-card">
						<div class="chart-header">
							<h4>Category Distribution</h4>
							<p>Stock by product category</p>
						</div>
						<div class="chart-container">
							<SfChart>
								<ChartArea>
									<ChartAreaBorder Width="0" />
								</ChartArea>
								<ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
									<ChartAxisLabelStyle Color="#666" />
								</ChartPrimaryXAxis>
								<ChartPrimaryYAxis LabelFormat="{value}">
									<ChartAxisLabelStyle Color="#666" />
								</ChartPrimaryYAxis>
								<ChartSeriesCollection>
									<ChartSeries DataSource="GetCategoryDistributionData()"
												 XName="CategoryName"
												 YName="StockCount"
												 Type="ChartSeriesType.Column"
												 Name="Stock Count"
												 Fill="#e2137b">
										<ChartMarker>
											<ChartDataLabel Visible="true" Position="ChartLabelPosition.Top" />
										</ChartMarker>
									</ChartSeries>
								</ChartSeriesCollection>
								<ChartTooltipSettings Enable="true" Format="${point.x}: ${point.y}" />
							</SfChart>
						</div>
					</div>

					<!-- Top Moving Items Chart -->
					<div class="chart-card wide-chart">
						<div class="chart-header">
							<h4>Top Moving Items</h4>
							<p>Products with highest movement</p>
						</div>
						<div class="chart-container">
							<SfChart>
								<ChartArea>
									<ChartAreaBorder Width="0" />
								</ChartArea>
								<ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
									<ChartAxisLabelStyle Color="#666" />
								</ChartPrimaryXAxis>
								<ChartPrimaryYAxis LabelFormat="{value}">
									<ChartAxisLabelStyle Color="#666" />
								</ChartPrimaryYAxis>
								<ChartSeriesCollection>
									<ChartSeries DataSource="GetTopMovingItemsData()"
												 XName="ItemName"
												 YName="Movement"
												 Type="ChartSeriesType.Bar"
												 Name="Movement"
												 Fill="#ff4d9f">
										<ChartMarker>
											<ChartDataLabel Visible="true" Position="ChartLabelPosition.Middle" />
										</ChartMarker>
									</ChartSeries>
								</ChartSeriesCollection>
								<ChartTooltipSettings Enable="true" Format="${point.x}: ${point.y}" />
							</SfChart>
						</div>
					</div>
				</div>
			</div>
		}
		else if (_showCharts && !_stockSummary.Any())
		{
			<div class="no-charts-message">
				<div class="no-charts-content">
					<i class="fas fa-chart-pie"></i>
					<h3>No Data for Charts</h3>
					<p>Charts will appear when stock data is available for the selected period.</p>
				</div>
			</div>
		}

		<!-- Data Grid Section -->
		<div class="grid-section">
			<div class="section-header">
				<h2>
					<i class="fas fa-table"></i>
					@(_showSummaryView ? "Stock Summary" : "Stock Transaction Details")
				</h2>
				<div class="grid-actions">
					@if (_showSummaryView)
					{
						<button @onclick="ExportStockSummaryToExcel" class="export-btn" disabled="@_isProcessing">
							<i class="fas fa-file-excel"></i>
							<span>Export Summary</span>
						</button>
					}
					else
					{
						<button @onclick="ExportStockDetailsToExcel" class="export-btn" disabled="@_isProcessing">
							<i class="fas fa-file-excel"></i>
							<span>Export Details</span>
						</button>
					}
				</div>
			</div>

			<div class="grid-card">
				<div class="grid-content">
					@if (_showSummaryView)
					{
						<!-- Summary Grid -->
						<SfGrid @ref="_sfStockSummaryGrid"
								DataSource="_stockSummary"
								AllowSorting="true"
								AllowFiltering="true"
								AllowResizing="true"
								AllowPaging="true"
								AllowExcelExport="true"
								AllowPdfExport="true"
								CssClass="modern-grid">
							<GridPageSettings PageSize="15" PageSizes="@(new int[] { 10, 15, 25, 50 })" />
							<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu" />
							<GridColumns>
								<GridColumn Field="@nameof(ProductStockSummaryModel.ProductCategoryName)"
											HeaderText="Category"
											Width="150"
											AllowFiltering="true" />

								<GridColumn Field="@nameof(ProductStockSummaryModel.ProductCode)"
											HeaderText="Code"
											Width="120"
											TextAlign="TextAlign.Center"
											AllowFiltering="true" />

								<GridColumn Field="@nameof(ProductStockSummaryModel.ProductName)"
											HeaderText="Product Name"
											Width="200"
											AllowFiltering="true" />

								<GridColumn Field="@nameof(ProductStockSummaryModel.OpeningStock)"
											HeaderText="Opening Stock"
											Width="130"
											Format="N2"
											TextAlign="TextAlign.Right"
											AllowFiltering="false" />

								<GridColumn Field="@nameof(ProductStockSummaryModel.PurchaseStock)"
											HeaderText="Production"
											Width="120"
											Format="N2"
											TextAlign="TextAlign.Right"
											AllowFiltering="false" />

								<GridColumn Field="@nameof(ProductStockSummaryModel.SaleStock)"
											HeaderText="Sales"
											Width="100"
											Format="N2"
											TextAlign="TextAlign.Right"
											AllowFiltering="false" />

								<GridColumn Field="@nameof(ProductStockSummaryModel.ClosingStock)"
											HeaderText="Closing Stock"
											Width="130"
											Format="N2"
											TextAlign="TextAlign.Right"
											AllowFiltering="false">
									<Template>
										@{
											var stock = (context as ProductStockSummaryModel);
											<div class="stock-cell">
												<span class="stock-value @(stock.ClosingStock <= 0 ? "low-stock" : stock.ClosingStock < 10 ? "medium-stock" : "good-stock")">
													@stock.ClosingStock.ToString("N2")
												</span>
											</div>
										}
									</Template>
								</GridColumn>

								<GridColumn Field="@nameof(ProductStockSummaryModel.WeightedAverageValue)"
											HeaderText="Stock Value"
											Width="130"
											Format="C2"
											TextAlign="TextAlign.Right"
											AllowFiltering="false" />
							</GridColumns>
						</SfGrid>
					}
					else
					{
						<!-- Details Grid -->
						<SfGrid @ref="_sfStockDetailsGrid"
								DataSource="_stockDetails"
								AllowSorting="true"
								AllowFiltering="true"
								AllowResizing="true"
								AllowPaging="true"
								AllowExcelExport="true"
								AllowPdfExport="true"
								CssClass="modern-grid">
							<GridPageSettings PageSize="15" PageSizes="@(new int[] { 10, 15, 25, 50 })" />
							<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu" />
							<GridColumns>
								<GridColumn Field="@nameof(ProductStockDetailsModel.TransactionDate)"
											HeaderText="Date"
											Width="120"
											Format="dd/MM/yyyy"
											AllowFiltering="true" />

								<GridColumn Field="@nameof(ProductStockDetailsModel.TransactionNo)"
											HeaderText="Transaction No"
											Width="150"
											TextAlign="TextAlign.Center"
											AllowFiltering="true" />

								<GridColumn Field="@nameof(ProductStockDetailsModel.ProductCode)"
											HeaderText="Code"
											Width="100"
											TextAlign="TextAlign.Center"
											AllowFiltering="true" />

								<GridColumn Field="@nameof(ProductStockDetailsModel.ProductName)"
											HeaderText="Product Name"
											Width="200"
											AllowFiltering="true" />

								<GridColumn Field="@nameof(ProductStockDetailsModel.Type)"
											HeaderText="Type"
											Width="120"
											AllowFiltering="true">
									<Template>
										@{
											var detail = (context as ProductStockDetailsModel);
											<div class="transaction-type">
												<span class="type-badge @(detail.Type.ToLower())">
													@detail.Type
												</span>
											</div>
										}
									</Template>
								</GridColumn>

								<GridColumn Field="@nameof(ProductStockDetailsModel.Quantity)"
											HeaderText="Quantity"
											Width="120"
											Format="N2"
											TextAlign="TextAlign.Right"
											AllowFiltering="false">
									<Template>
										@{
											var detail = (context as ProductStockDetailsModel);
											<div class="quantity-cell">
												<span class="quantity-value @(detail.Quantity < 0 ? "negative" : "positive")">
													@detail.Quantity.ToString("N2")
												</span>
											</div>
										}
									</Template>
								</GridColumn>

								<GridColumn Field="@nameof(ProductStockDetailsModel.NetRate)"
											HeaderText="Rate"
											Width="100"
											Format="C2"
											TextAlign="TextAlign.Right"
											AllowFiltering="false" />
							</GridColumns>
						</SfGrid>
					}
				</div>
			</div>
		</div>
	</div>
}

<style>
	:root {
		--primary-color: #e2137b;
		--primary-light: rgba(226, 19, 123, 0.1);
		--primary-dark: #c10e69;
		--secondary-color: #2c3e50;
		--accent-color: #ff4d9f;
		--success-color: #28a745;
		--warning-color: #ffc107;
		--danger-color: #dc3545;
		--info-color: #17a2b8;
		--dark-color: #2c2c54;
		--light-color: #fff5f9;
		--white: #ffffff;
		--shadow: 0 2px 8px rgba(226, 19, 123, 0.15);
		--shadow-lg: 0 8px 25px rgba(226, 19, 123, 0.2);
		--border-radius: 0.5rem;
		--border-radius-lg: 0.75rem;
		--transition: all 0.3s ease;
	}

	.stock-report-container {
		padding: 20px;
		background: radial-gradient(circle at 15% 15%, rgba(226, 19, 123, 0.05) 0%, transparent 50%), radial-gradient(circle at 85% 85%, rgba(255, 77, 159, 0.08) 0%, transparent 50%), linear-gradient(135deg, #fff5f9 0%, #ffe6f2 30%, #ffb3d1 70%, #ff80cc 100%);
		min-height: 100vh;
		animation: fadeInUp 0.6s ease-out;
	}

	/* Loading States */
	.loading-overlay {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(255, 255, 255, 0.95);
		display: flex;
		align-items: center;
		justify-content: center;
		z-index: 9999;
		backdrop-filter: blur(8px);
	}

	.loading-content {
		text-align: center;
		padding: 40px;
		background: var(--white);
		border-radius: var(--border-radius-lg);
		box-shadow: var(--shadow-lg);
		border: 1px solid rgba(226, 19, 123, 0.1);
	}

	.circular-dots-loader {
		display: inline-block;
		position: relative;
		width: 60px;
		height: 60px;
		margin-bottom: 25px;
	}

		.circular-dots-loader .dot {
			display: block;
			position: absolute;
			width: 14px;
			height: 14px;
			border-radius: 50%;
			background: var(--primary-color);
			animation: dotPulse 1.4s infinite ease-in-out both;
		}

		.circular-dots-loader .dot-1 {
			top: 0;
			left: 50%;
			transform: translateX(-50%);
			animation-delay: -0.8s;
		}

		.circular-dots-loader .dot-2 {
			top: 50%;
			right: 0;
			transform: translateY(-50%);
			animation-delay: -0.4s;
		}

		.circular-dots-loader .dot-3 {
			bottom: 0;
			left: 50%;
			transform: translateX(-50%);
			animation-delay: 0s;
		}

	.loading-text {
		color: var(--dark-color);
		font-size: 18px;
		font-weight: 600;
		margin: 0;
	}

	/* Header Section */
	.page-header {
		margin-bottom: 30px;
		background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
		border-radius: var(--border-radius-lg);
		padding: 30px;
		color: var(--white);
		box-shadow: var(--shadow-lg);
		position: relative;
		overflow: hidden;
	}

		.page-header::before {
			content: '';
			position: absolute;
			top: -50%;
			right: -20%;
			width: 200px;
			height: 200px;
			background: rgba(255, 255, 255, 0.1);
			border-radius: 50%;
			animation: float 6s ease-in-out infinite;
		}

	.header-content {
		display: flex;
		justify-content: space-between;
		align-items: center;
		position: relative;
		z-index: 2;
	}

	.header-title {
		display: flex;
		align-items: center;
		gap: 20px;
	}

	.title-icon {
		width: 70px;
		height: 70px;
		background: rgba(255, 255, 255, 0.2);
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 28px;
		backdrop-filter: blur(10px);
	}

	.title-info h1 {
		margin: 0 0 8px 0;
		font-size: 32px;
		font-weight: 700;
		text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	.title-info p {
		margin: 0;
		font-size: 16px;
		opacity: 0.9;
		font-weight: 400;
	}

	.header-actions {
		display: flex;
		gap: 15px;
	}

	.back-btn, .adjust-stock-btn {
		display: flex;
		align-items: center;
		gap: 10px;
		padding: 14px 24px;
		background: rgba(255, 255, 255, 0.2);
		color: var(--white);
		border: none;
		border-radius: var(--border-radius);
		font-size: 14px;
		font-weight: 600;
		cursor: pointer;
		transition: var(--transition);
		backdrop-filter: blur(10px);
		border: 1px solid rgba(255, 255, 255, 0.2);
	}

		.back-btn:hover, .adjust-stock-btn:hover {
			background: rgba(255, 255, 255, 0.3);
			transform: translateY(-2px);
		}

	.adjust-stock-btn {
		background: rgba(40, 167, 69, 0.2);
		border-color: rgba(40, 167, 69, 0.3);
	}

		.adjust-stock-btn:hover {
			background: rgba(40, 167, 69, 0.3);
		}

	/* Filter Section */
	.filter-section {
		margin-bottom: 30px;
	}

	.filter-card {
		background: var(--white);
		border-radius: var(--border-radius-lg);
		padding: 25px;
		box-shadow: var(--shadow);
		border: 1px solid rgba(226, 19, 123, 0.1);
	}

	.filter-header h3 {
		display: flex;
		align-items: center;
		gap: 10px;
		margin: 0 0 20px 0;
		color: var(--primary-color);
		font-size: 18px;
		font-weight: 700;
	}

	.filter-controls {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		gap: 20px;
		margin-bottom: 20px;
	}

	.filter-group {
		display: flex;
		flex-direction: column;
		gap: 8px;
	}

	.filter-label {
		display: flex;
		align-items: center;
		gap: 8px;
		font-size: 14px;
		font-weight: 600;
		color: var(--dark-color);
	}

		.filter-label i {
			color: var(--primary-color);
			width: 16px;
		}

	.filter-actions {
		display: flex;
		gap: 15px;
		flex-wrap: wrap;
	}

	.view-toggle-btn, .chart-toggle-btn, .export-btn {
		display: flex;
		align-items: center;
		gap: 8px;
		padding: 12px 20px;
		border: 2px solid var(--primary-color);
		background: transparent;
		color: var(--primary-color);
		border-radius: var(--border-radius);
		font-size: 14px;
		font-weight: 600;
		cursor: pointer;
		transition: var(--transition);
	}

		.view-toggle-btn:hover, .chart-toggle-btn:hover, .export-btn:hover {
			background: var(--primary-color);
			color: var(--white);
			transform: translateY(-2px);
		}

		.view-toggle-btn.summary-active, .view-toggle-btn.details-active, .chart-toggle-btn.active {
			background: var(--primary-color);
			color: var(--white);
		}

	.export-btn {
		border-color: var(--success-color);
		color: var(--success-color);
	}

		.export-btn:hover {
			background: var(--success-color);
			color: var(--white);
		}

	/* Section Headers */
	.section-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 25px;
	}

		.section-header h2 {
			display: flex;
			align-items: center;
			gap: 12px;
			font-size: 24px;
			font-weight: 700;
			color: var(--dark-color);
			margin: 0;
		}

			.section-header h2 i {
				color: var(--primary-color);
			}

	.period-info {
		background: var(--primary-light);
		color: var(--primary-color);
		padding: 8px 16px;
		border-radius: var(--border-radius);
		font-size: 14px;
		font-weight: 600;
		border: 1px solid rgba(226, 19, 123, 0.2);
		display: flex;
		align-items: center;
		gap: 10px;
	}

	.location-badge {
		background: var(--info-color);
		color: white;
		padding: 4px 8px;
		border-radius: 12px;
		font-size: 12px;
		margin-left: 8px;
	}

	/* Summary Cards */
	.summary-section {
		margin-bottom: 40px;
	}

	.summary-cards {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
		gap: 20px;
	}

	.summary-card {
		background: var(--white);
		border-radius: var(--border-radius-lg);
		padding: 25px;
		box-shadow: var(--shadow);
		border: 1px solid rgba(226, 19, 123, 0.1);
		transition: var(--transition);
		position: relative;
		overflow: hidden;
		display: flex;
		align-items: center;
		gap: 20px;
	}

		.summary-card::before {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			height: 4px;
			background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
		}

		.summary-card:hover {
			transform: translateY(-5px);
			box-shadow: var(--shadow-lg);
		}

		.summary-card.highlight-card {
			background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
			color: var(--white);
			border: none;
		}

			.summary-card.highlight-card::before {
				background: rgba(255, 255, 255, 0.3);
			}

	.card-icon {
		width: 60px;
		height: 60px;
		border-radius: 50%;
		background: var(--primary-light);
		color: var(--primary-color);
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 24px;
		flex-shrink: 0;
	}

	.highlight-card .card-icon {
		background: rgba(255, 255, 255, 0.2);
		color: var(--white);
	}

	.card-content {
		flex: 1;
	}

	.card-value {
		font-size: 28px;
		font-weight: 700;
		color: var(--primary-color);
		line-height: 1;
		margin-bottom: 8px;
	}

	.highlight-card .card-value {
		color: var(--white);
	}

	.card-label {
		font-size: 16px;
		font-weight: 600;
		color: var(--dark-color);
		margin-bottom: 6px;
	}

	.highlight-card .card-label {
		color: rgba(255, 255, 255, 0.9);
	}

	.card-trend {
		display: flex;
		align-items: center;
		gap: 6px;
		font-size: 14px;
		color: var(--success-color);
		font-weight: 500;
	}

	.highlight-card .card-trend {
		color: rgba(255, 255, 255, 0.8);
	}

	/* Charts Section */
	.charts-section {
		margin-bottom: 40px;
	}

	.charts-grid {
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		gap: 25px;
	}

	.chart-card {
		background: var(--white);
		border-radius: var(--border-radius-lg);
		padding: 25px;
		box-shadow: var(--shadow);
		border: 1px solid rgba(226, 19, 123, 0.1);
		transition: var(--transition);
	}

		.chart-card:hover {
			transform: translateY(-2px);
			box-shadow: var(--shadow-lg);
		}

		.chart-card.wide-chart {
			grid-column: 1 / -1;
		}

	.chart-header {
		margin-bottom: 20px;
		padding-bottom: 15px;
		border-bottom: 2px solid var(--primary-light);
	}

		.chart-header h4 {
			margin: 0 0 5px 0;
			color: var(--dark-color);
			font-size: 18px;
			font-weight: 700;
		}

		.chart-header p {
			margin: 0;
			color: #666;
			font-size: 14px;
		}

	.chart-container {
		height: 300px;
	}

	.no-charts-message {
		background: var(--white);
		border-radius: var(--border-radius-lg);
		padding: 60px;
		text-align: center;
		box-shadow: var(--shadow);
		border: 2px dashed rgba(226, 19, 123, 0.2);
	}

	.no-charts-content i {
		font-size: 64px;
		color: var(--primary-color);
		opacity: 0.6;
		margin-bottom: 25px;
	}

	.no-charts-content h3 {
		color: var(--dark-color);
		margin-bottom: 15px;
		font-size: 24px;
	}

	.no-charts-content p {
		color: #666;
		margin: 0;
		font-size: 16px;
	}

	/* Grid Section */
	.grid-section {
		margin-bottom: 30px;
	}

	.grid-card {
		background: var(--white);
		border-radius: var(--border-radius-lg);
		box-shadow: var(--shadow);
		border: 1px solid rgba(226, 19, 123, 0.1);
		overflow: hidden;
	}

	.grid-content {
		padding: 0;
	}

	.grid-actions {
		display: flex;
		gap: 10px;
	}

	/* Grid Cell Styles */
	.stock-cell {
		text-align: right;
		font-weight: 600;
	}

	.stock-value {
		padding: 4px 8px;
		border-radius: 4px;
		font-weight: 700;
	}

		.stock-value.good-stock {
			background: rgba(40, 167, 69, 0.1);
			color: #28a745;
			border: 1px solid rgba(40, 167, 69, 0.3);
		}

		.stock-value.medium-stock {
			background: rgba(255, 193, 7, 0.1);
			color: #ffc107;
			border: 1px solid rgba(255, 193, 7, 0.3);
		}

		.stock-value.low-stock {
			background: rgba(220, 53, 69, 0.1);
			color: #dc3545;
			border: 1px solid rgba(220, 53, 69, 0.3);
		}

	.transaction-type {
		text-align: center;
	}

	.type-badge {
		display: inline-block;
		padding: 4px 12px;
		border-radius: 15px;
		font-size: 12px;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

		.type-badge.purchase, .type-badge.production {
			background: rgba(40, 167, 69, 0.1);
			color: #28a745;
			border: 1px solid rgba(40, 167, 69, 0.3);
		}

		.type-badge.sale {
			background: rgba(220, 53, 69, 0.1);
			color: #dc3545;
			border: 1px solid rgba(220, 53, 69, 0.3);
		}

		.type-badge.adjustment {
			background: rgba(23, 162, 184, 0.1);
			color: #17a2b8;
			border: 1px solid rgba(23, 162, 184, 0.3);
		}

	.quantity-cell {
		text-align: right;
		font-weight: 600;
	}

	.quantity-value.positive {
		color: #28a745;
	}

	.quantity-value.negative {
		color: #dc3545;
	}

	/* Syncfusion ComboBox Styling */
	::deep .location-filter .e-input-group {
		border: 2px solid rgba(226, 19, 123, 0.3);
		border-radius: var(--border-radius);
		transition: var(--transition);
	}

		::deep .location-filter .e-input-group:focus-within {
			border-color: var(--primary-color);
			box-shadow: 0 0 0 2px rgba(226, 19, 123, 0.2);
		}

	/* Modern Grid Styling */
	.modern-grid .e-grid .e-gridheader {
		background: linear-gradient(135deg, #f8f9fa, #ffffff);
		border-bottom: 2px solid var(--primary-color);
	}

	.modern-grid .e-grid .e-headercell {
		font-weight: 700;
		color: var(--dark-color);
		border-right: 1px solid #dee2e6;
		font-size: 13px;
	}

	.modern-grid .e-grid .e-row:hover {
		background: var(--primary-light);
		cursor: pointer;
	}

	.modern-grid .e-grid .e-altrow {
		background: #f8f9fa;
	}

	.modern-grid .e-grid .e-rowcell {
		border-right: 1px solid #e9ecef;
		padding: 12px 8px;
		font-size: 13px;
	}

	.modern-grid .e-pager {
		background: var(--light-color);
		border-top: 1px solid rgba(226, 19, 123, 0.1);
	}

		.modern-grid .e-pager .e-numericitem {
			background: transparent;
			border: 1px solid rgba(226, 19, 123, 0.3);
			color: var(--primary-color);
			margin: 0 2px;
		}

			.modern-grid .e-pager .e-numericitem.e-currentitem {
				background: var(--primary-color);
				color: var(--white);
			}

			.modern-grid .e-pager .e-numericitem:hover {
				background: var(--primary-light);
			}

	/* Animations */
	@@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(40px);
		}

		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	@@keyframes dotPulse {
		0%, 80%, 100% {
			transform: scale(0);
		}

		40% {
			transform: scale(1);
		}
	}

	@@keyframes float {
		0%, 100% {
			transform: translateY(0px);
		}

		50% {
			transform: translateY(-20px);
		}
	}

	/* Syncfusion Customizations */
	.e-daterangepicker.date-range-picker .e-input-group {
		border-color: rgba(226, 19, 123, 0.3);
		border-radius: var(--border-radius);
	}

		.e-daterangepicker.date-range-picker .e-input-group:focus-within {
			border-color: var(--primary-color);
			box-shadow: 0 0 0 2px rgba(226, 19, 123, 0.2);
		}

	/* Responsive Design */
	@@media (max-width: 1024px) {
		.charts-grid {
			grid-template-columns: 1fr;
		}

		.chart-card.wide-chart {
			grid-column: 1;
		}

		.summary-cards {
			grid-template-columns: repeat(2, 1fr);
		}
	}

	@@media (max-width: 768px) {
		.stock-report-container {
			padding: 15px;
		}

		.page-header {
			padding: 25px 20px;
		}

		.header-content {
			flex-direction: column;
			gap: 20px;
			text-align: center;
		}

		.title-info h1 {
			font-size: 28px;
		}

		.summary-cards {
			grid-template-columns: 1fr;
		}

		.filter-controls {
			grid-template-columns: 1fr;
		}

		.filter-actions {
			justify-content: center;
		}

		.header-actions {
			flex-direction: column;
			width: 100%;
		}

		.back-btn, .adjust-stock-btn {
			justify-content: center;
		}
	}

	@@media (max-width: 480px) {
		.stock-report-container {
			padding: 10px;
		}

		.page-header {
			padding: 20px 15px;
		}

		.title-info h1 {
			font-size: 24px;
		}

		.title-icon {
			width: 60px;
			height: 60px;
			font-size: 24px;
		}

		.summary-card {
			flex-direction: column;
			text-align: center;
			gap: 15px;
		}

		.card-value {
			font-size: 24px;
		}

		.section-header {
			flex-direction: column;
			gap: 15px;
			text-align: center;
		}

		.grid-section {
			margin: 20px -10px 30px -10px;
		}

		.grid-card {
			border-radius: 0;
			border-left: none;
			border-right: none;
		}

		.modern-grid .e-grid .e-rowcell {
			padding: 8px 4px;
			font-size: 12px;
		}

		.modern-grid .e-grid .e-headercell {
			font-size: 11px;
			padding: 8px 4px;
		}
	}
</style>
