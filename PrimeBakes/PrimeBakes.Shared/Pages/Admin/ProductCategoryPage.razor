@page "/Admin/ProductCategory"
@using PrimeBakes.Shared.Services
@using PrimeBakesLibrary.Models.Common
@using PrimeBakesLibrary.Models.Product

<PageTitle>Product Category Management - Prime Bakes</PageTitle>

<!-- Success Toast -->
<SfToast @ref="_sfToast"
		 ID="toast_success"
		 Title="Success"
		 Content="@_successMessage"
		 Timeout="3000"
		 ShowCloseButton="true"
		 CssClass="e-toast-success">
	<ToastPosition X="Right" Y="Top" />
	<ToastAnimationSettings>
		<ToastShowAnimationSettings Effect="ToastEffect.SlideRightIn" Duration="600" Easing="ToastEasing.Linear" />
		<ToastHideAnimationSettings Effect="ToastEffect.SlideRightOut" Duration="600" Easing="ToastEasing.Linear" />
	</ToastAnimationSettings>
</SfToast>

<!-- Error Toast -->
<SfToast @ref="_sfErrorToast"
		 ID="toast_error"
		 Title="Error"
		 Content="@_errorMessage"
		 Timeout="5000"
		 ShowCloseButton="true"
		 CssClass="e-toast-danger">
	<ToastPosition X="Right" Y="Top" />
	<ToastAnimationSettings>
		<ToastShowAnimationSettings Effect="ToastEffect.SlideRightIn" Duration="600" Easing="ToastEasing.Linear" />
		<ToastHideAnimationSettings Effect="ToastEffect.SlideRightOut" Duration="600" Easing="ToastEasing.Linear" />
	</ToastAnimationSettings>
</SfToast>

@if (_isLoading)
{
	<div class="loader-container">
		<div class="circular-dots-loader">
			<span class="dot dot-1"></span>
			<span class="dot dot-2"></span>
			<span class="dot dot-3"></span>
		</div>
		<p class="loading-text">Loading product categories...</p>
	</div>
}
else
{
	<div class="category-container">
		<!-- Header -->
		<div class="page-header">
			<div class="header-content">
				<div class="title-section">
					<h1 class="page-title">📦 Product Category Management</h1>
					<p class="page-subtitle">
						@if (_currentUser.LocationId == 1)
						{
							<text>Manage product categories across all locations</text>
						}
						else
						{
							<text>Manage product categories for your location</text>
						}
					</p>
				</div>
				<button @onclick='() => NavigationManager.NavigateTo("/Admin-Dashboard")' class="back-button">
					<span class="back-icon">←</span>
					<span class="back-text">Back to Admin</span>
				</button>
			</div>
		</div>

		<div class="content-layout">
			<!-- Category Form Card -->
			<div class="form-card">
				<div class="card-header">
					<h2 class="card-title">
						@if (_categoryModel.Id > 0)
						{
							<text>Edit Category</text>
						}
						else
						{
							<text>Add New Category</text>
						}
					</h2>
					<p class="card-subtitle">
						@if (_categoryModel.Id > 0)
						{
							<text>Update category information and settings</text>
						}
						else
						{
							<text>Create a new product category with specific settings</text>
						}
					</p>
				</div>

				<div class="card-body">
					<div class="form-grid">
						<div class="form-group">
							<label class="form-label">Category Name *</label>
							<SfTextBox @bind-Value="_categoryModel.Name"
									   Placeholder="Enter category name"
									   CssClass="custom-textbox"
									   MaxLength="50" />
							<small class="field-help">Maximum 50 characters</small>
						</div>

						@if (_currentUser.LocationId == 1)
						{
							<div class="form-group">
								<label class="form-label">Location *</label>
								<SfComboBox TValue="int"
											TItem="LocationModel"
											Placeholder="Select location"
											DataSource="@_locations"
											@bind-Value="_categoryModel.LocationId"
											CssClass="custom-dropdown">
									<ComboBoxFieldSettings Value="Id" Text="Name" />
								</SfComboBox>
							</div>
						}
						else
						{
							<div class="form-group">
								<label class="form-label">Location</label>
								<div class="location-display">
									@GetLocationName(_categoryModel.LocationId)
								</div>
								<small class="field-help">You can only manage categories for your location</small>
							</div>
						}

						<div class="form-group status-group">
							<label class="form-label">Status</label>
							<div class="status-toggle">
								<SfCheckBox @bind-Checked="_categoryModel.Status"
											Label="Active"
											CssClass="custom-checkbox" />
							</div>
						</div>
					</div>

					<div class="form-actions">
						<button @onclick="OnSaveClick"
								disabled="@_isSubmitting"
								class="save-button">
							@if (_isSubmitting)
							{
								<span class="button-spinner"></span>
								<text>Saving...</text>
							}
							else
							{
								<span class="save-icon">💾</span>
								@if (_categoryModel.Id > 0)
								{
									<text>Update Category</text>
								}
								else
								{
									<text>Create Category</text>
								}
							}
						</button>

						@if (_categoryModel.Id > 0)
						{
							<button @onclick="ResetForm"
									class="reset-button">
								<span class="reset-icon">↻</span>
								<text>Reset Form</text>
							</button>
						}
					</div>
				</div>
			</div>

			<!-- Categories List Card -->
			<div class="grid-card">
				<div class="card-header">
					<h2 class="card-title">Categories List</h2>
					<p class="card-subtitle">
						@if (_categories.Any())
						{
							<text>Click on a row to edit category details</text>
						}
						else
						{
							<text>No categories found. Create your first category above.</text>
						}
					</p>
				</div>

				<div class="card-body">
					@if (_categories.Any())
					{
						<SfGrid DataSource="@_categories"
								@ref="_sfGrid"
								AllowSorting="true"
								AllowFiltering="true"
								AllowPaging="true"
								CssClass="category-grid">
							<GridPageSettings PageSize="10" />
							<GridEvents RowSelected="RowSelectHandler" TValue="ProductCategoryModel" />
							<GridColumns>
								<GridColumn Field=@nameof(ProductCategoryModel.Id)
											HeaderText="ID"
											Width="80"
											TextAlign="TextAlign.Center"
											IsPrimaryKey="true" />
								<GridColumn Field=@nameof(ProductCategoryModel.Name)
											HeaderText="Category Name"
											Width="200" />
								<GridColumn Field=@nameof(ProductCategoryModel.LocationId)
											HeaderText="Location"
											Width="150">
									<Template>
										@{
											var category = (context as ProductCategoryModel);
											<span class="location-tag">@GetLocationName(category.LocationId)</span>
										}
									</Template>
								</GridColumn>
								<GridColumn Field=@nameof(ProductCategoryModel.Status)
											HeaderText="Status"
											Width="120"
											TextAlign="TextAlign.Center">
									<Template>
										@{
											var category = (context as ProductCategoryModel);
											<span class="status-badge @GetStatusClass(category.Status)">
												
												@GetStatusText(category.Status)
											</span>
										}
									</Template>
								</GridColumn>
								<GridColumn HeaderText="Actions" Width="150" TextAlign="TextAlign.Center">
									<Template>
										@{
											var category = (context as ProductCategoryModel);
											bool canEdit = _currentUser.LocationId == 1 || category.LocationId == _currentUser.LocationId;
										}
										@if (canEdit)
										{
											<div class="action-buttons">
												<button @onclick="() => SelectCategoryForEdit(category)"
														class="edit-button"
														title="Edit Category">
													<span class="edit-icon">✏️</span>
												</button>
												<button @onclick="() => OnDeleteClick(category)"
														class="delete-button"
														title="Deactivate Category">
													<span class="delete-icon">🗑️</span>
												</button>
											</div>
										}
										else
										{
											<span class="no-access">No Access</span>
										}
									</Template>
								</GridColumn>
							</GridColumns>
						</SfGrid>
					}
					else
					{
						<div class="empty-state">
							<div class="empty-icon">📦</div>
							<h3>No Categories Found</h3>
							<p>Start by creating your first product category using the form above.</p>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
}

<style>
	:root {
		--primary-color: #e2137b;
		--primary-dark: #c10e69;
		--success-color: #4caf50;
		--danger-color: #f44336;
		--warning-color: #ff9800;
		--card-bg: #ffffff;
		--border-color: #e1e5e9;
		--text-primary: #2c3e50;
		--text-secondary: #666;
		--text-muted: #999;
	}

	/* Loading Styles */
	.loader-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 50vh;
		gap: 20px;
	}

	.circular-dots-loader {
		display: flex;
		gap: 8px;
	}

	.dot {
		width: 12px;
		height: 12px;
		border-radius: 50%;
		background: var(--primary-color);
		animation: bounce 1.4s ease-in-out infinite both;
	}

	.dot-1 { animation-delay: -0.32s; }
	.dot-2 { animation-delay: -0.16s; }
	.dot-3 { animation-delay: 0s; }

	@@keyframes bounce {
		0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
		40% { transform: scale(1.2); opacity: 1; }
	}

	.loading-text {
		color: var(--text-secondary);
		font-size: 16px;
		margin: 0;
	}

	/* Main Container */
	.category-container {
		min-height: 100vh;
		background: linear-gradient(135deg, rgba(226, 19, 123, 0.03) 0%, rgba(193, 14, 105, 0.03) 100%);
		padding: 0;
	}

	/* Header */
	.page-header {
		background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
		color: white;
		padding: 30px 20px;
		box-shadow: 0 4px 20px rgba(226, 19, 123, 0.2);
	}

	.header-content {
		max-width: 1200px;
		margin: 0 auto;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.title-section h1 {
		font-size: 28px;
		font-weight: 700;
		margin: 0 0 8px 0;
		letter-spacing: -0.5px;
	}

	.title-section p {
		font-size: 14px;
		margin: 0;
		opacity: 0.9;
	}

	.back-button {
		background: rgba(255, 255, 255, 0.15);
		border: 2px solid rgba(255, 255, 255, 0.3);
		color: white;
		padding: 10px 20px;
		border-radius: 10px;
		cursor: pointer;
		font-weight: 600;
		display: flex;
		align-items: center;
		gap: 8px;
		transition: all 0.3s ease;
		backdrop-filter: blur(10px);
	}

	.back-button:hover {
		background: rgba(255, 255, 255, 0.25);
		border-color: rgba(255, 255, 255, 0.5);
		transform: translateY(-2px);
	}

	/* Content Layout */
	.content-layout {
		max-width: 1200px;
		margin: 0 auto;
		padding: 30px 20px;
		display: flex;
		flex-direction: column;
		gap: 30px;
	}

	/* Cards */
	.form-card,
	.grid-card {
		background: var(--card-bg);
		border-radius: 15px;
		box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
		border: 1px solid var(--border-color);
		overflow: hidden;
	}

	.card-header {
		background: linear-gradient(135deg, rgba(226, 19, 123, 0.1) 0%, rgba(193, 14, 105, 0.1) 100%);
		border-bottom: 2px solid var(--primary-color);
		padding: 20px 25px;
	}

	.card-title {
		color: var(--primary-color);
		font-size: 20px;
		font-weight: 700;
		margin: 0 0 5px 0;
		display: flex;
		align-items: center;
		gap: 10px;
	}

	.card-title::before {
		content: "📋";
		font-size: 18px;
	}

	.grid-card .card-title::before {
		content: "📊";
	}

	.card-subtitle {
		color: var(--text-secondary);
		font-size: 14px;
		margin: 0;
	}

	.card-body {
		padding: 30px;
	}

	/* Form Grid */
	.form-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
		gap: 25px;
		align-items: start;
		margin-bottom: 30px;
	}

	.form-group {
		display: flex;
		flex-direction: column;
	}

	.form-group.span-2 {
		grid-column: 1 / -1;
	}

	.form-label {
		font-weight: 600;
		margin-bottom: 8px;
		color: var(--text-primary);
		font-size: 14px;
		display: flex;
		align-items: center;
		gap: 6px;
	}

	.form-label::before {
		content: "•";
		color: var(--primary-color);
		font-weight: bold;
	}

	.field-help {
		font-size: 12px;
		color: var(--text-muted);
		margin-top: 6px;
		font-style: italic;
	}

	.location-display {
		background: #f8f9fa;
		border: 2px solid var(--border-color);
		border-radius: 10px;
		padding: 12px 15px;
		font-size: 14px;
		color: var(--text-primary);
	}

	.status-toggle {
		display: flex;
		align-items: center;
		gap: 8px;
	}

	/* Custom Input Styles */
	::deep .custom-textbox,
	::deep .custom-numeric,
	::deep .custom-dropdown {
		border: 2px solid var(--border-color);
		border-radius: 10px;
		transition: all 0.3s ease;
		font-size: 14px;
		padding: 12px 15px;
	}

	::deep .custom-textbox:hover,
	::deep .custom-numeric:hover,
	::deep .custom-dropdown:hover {
		border-color: rgba(226, 19, 123, 0.3);
	}

	::deep .custom-textbox:focus,
	::deep .custom-numeric:focus,
	::deep .custom-dropdown:focus {
		border-color: var(--primary-color);
		box-shadow: 0 0 0 4px rgba(226, 19, 123, 0.1);
		outline: none;
	}

	/* Form Actions */
	.form-actions {
		display: flex;
		gap: 15px;
		flex-wrap: wrap;
		margin-top: 20px;
	}

	.save-button, .reset-button {
		display: flex;
		align-items: center;
		gap: 8px;
		padding: 12px 25px;
		border-radius: 10px;
		font-size: 14px;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.3s ease;
		border: none;
	}

	.save-button {
		background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
		color: white;
		box-shadow: 0 4px 15px rgba(226, 19, 123, 0.3);
	}

	.save-button:hover:not(:disabled) {
		transform: translateY(-2px);
		box-shadow: 0 6px 20px rgba(226, 19, 123, 0.4);
	}

	.save-button:disabled {
		opacity: 0.7;
		cursor: not-allowed;
		transform: none;
	}

	.reset-button {
		background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
		color: white;
		box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
	}

	.reset-button:hover {
		transform: translateY(-2px);
		box-shadow: 0 6px 20px rgba(108, 117, 125, 0.4);
	}

	.button-spinner {
		width: 16px;
		height: 16px;
		border: 2px solid rgba(255,255,255,0.3);
		border-top: 2px solid white;
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}

	@@keyframes spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}

	/* Grid Styles */
	::deep .category-grid {
		border: none !important;
		font-family: inherit !important;
		border-radius: 10px !important;
		overflow: hidden !important;
	}

	::deep .category-grid .e-gridheader {
		background: linear-gradient(135deg, rgba(226, 19, 123, 0.1) 0%, rgba(193, 14, 105, 0.1) 100%) !important;
		border-bottom: 2px solid var(--primary-color) !important;
	}

	::deep .category-grid .e-headercell {
		font-weight: 600 !important;
		color: var(--primary-color) !important;
		border-right: 1px solid var(--border-color) !important;
		padding: 15px !important;
	}

	::deep .category-grid .e-row {
		transition: all 0.3s ease !important;
		border-bottom: 1px solid #f0f0f0 !important;
	}

	::deep .category-grid .e-row:hover {
		background: rgba(226, 19, 123, 0.05) !important;
		cursor: pointer;
		transform: translateY(-1px) !important;
		box-shadow: 0 4px 12px rgba(0,0,0,0.1) !important;
	}

	::deep .category-grid .e-rowcell {
		border-right: 1px solid var(--border-color) !important;
		padding: 15px !important;
		vertical-align: middle !important;
	}

	/* Status Badges */
	.status-badge {
		padding: 6px 12px;
		border-radius: 15px;
		font-size: 11px;
		font-weight: 700;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		display: inline-flex;
		align-items: center;
		gap: 4px;
	}

	.status-badge::before {
		content: "•";
		font-size: 8px;
	}

	.status-active {
		background: linear-gradient(135deg, rgba(76, 175, 80, 0.1) 0%, rgba(67, 160, 71, 0.1) 100%);
		color: var(--success-color);
		border: 1px solid rgba(76, 175, 80, 0.3);
	}

	.status-inactive {
		background: linear-gradient(135deg, rgba(244, 67, 54, 0.1) 0%, rgba(229, 57, 53, 0.1) 100%);
		color: var(--danger-color);
		border: 1px solid rgba(244, 67, 54, 0.3);
	}

	.location-tag {
		background: linear-gradient(135deg, rgba(33, 150, 243, 0.1) 0%, rgba(30, 136, 229, 0.1) 100%);
		color: #1976d2;
		padding: 6px 12px;
		border-radius: 12px;
		font-size: 12px;
		font-weight: 600;
		border: 1px solid rgba(33, 150, 243, 0.3);
		display: inline-flex;
		align-items: center;
		gap: 4px;
	}

	.location-tag::before {
		content: "📍";
		font-size: 10px;
	}

	/* Action Buttons */
	.action-buttons {
		display: flex;
		gap: 8px;
		justify-content: center;
		align-items: center;
	}

	.edit-button, .delete-button {
		width: 36px;
		height: 36px;
		border: none;
		border-radius: 8px;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.3s ease;
		position: relative;
		overflow: hidden;
	}

	.edit-button {
		background: linear-gradient(135deg, rgba(33, 150, 243, 0.1) 0%, rgba(30, 136, 229, 0.1) 100%);
		color: #1976d2;
		border: 1px solid rgba(33, 150, 243, 0.3);
	}

	.edit-button:hover {
		background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);
		color: white;
		transform: translateY(-2px);
		box-shadow: 0 4px 12px rgba(33, 150, 243, 0.4);
	}

	.delete-button {
		background: linear-gradient(135deg, rgba(244, 67, 54, 0.1) 0%, rgba(229, 57, 53, 0.1) 100%);
		color: var(--danger-color);
		border: 1px solid rgba(244, 67, 54, 0.3);
	}

	.delete-button:hover {
		background: linear-gradient(135deg, var(--danger-color) 0%, #d32f2f 100%);
		color: white;
		transform: translateY(-2px);
		box-shadow: 0 4px 12px rgba(244, 67, 54, 0.4);
	}

	.no-access {
		font-size: 12px;
		color: var(--text-muted);
		font-style: italic;
		padding: 8px;
		background: rgba(0,0,0,0.05);
		border-radius: 6px;
	}

	/* Empty State */
	.empty-state {
		text-align: center;
		padding: 60px 20px;
		color: var(--text-secondary);
	}

	.empty-icon {
		font-size: 64px;
		margin-bottom: 20px;
		opacity: 0.6;
	}

	.empty-state h3 {
		margin: 0 0 12px 0;
		color: var(--text-primary);
		font-size: 24px;
		font-weight: 600;
	}

	.empty-state p {
		margin: 0;
		font-size: 16px;
		line-height: 1.5;
		max-width: 400px;
		margin: 0 auto;
	}



	/* Toast Styles */
	::deep .e-toast-success {
		background: rgba(76, 175, 80, 0.1);
		border-left: 4px solid var(--success-color);
		color: var(--success-color);
	}

	::deep .e-toast-danger {
		background: rgba(244, 67, 54, 0.1);
		border-left: 4px solid var(--danger-color);
		color: var(--danger-color);
	}

	::deep .e-toast-success .e-toast-title,
	::deep .e-toast-danger .e-toast-title {
		font-weight: 600;
	}

	::deep .e-toast-success .e-toast-content,
	::deep .e-toast-danger .e-toast-content {
		font-size: 14px;
	}

	/* Responsive Design */
	@@media (max-width: 768px) {
		.content-layout {
			padding: 15px;
		}

		.page-header {
			padding: 20px 15px;
		}

		.header-content {
			flex-direction: column;
			gap: 20px;
			text-align: center;
		}

		.title-section h1 {
			font-size: 24px;
		}

		.card-body {
			padding: 20px;
		}

		.form-grid {
			grid-template-columns: 1fr;
		}

		.form-actions {
			flex-direction: column;
		}

		.save-button, .reset-button {
			width: 100%;
			justify-content: center;
		}

		.action-buttons {
			gap: 12px;
		}

		.edit-button, .delete-button {
			width: 40px;
			height: 40px;
		}
	}
</style>
