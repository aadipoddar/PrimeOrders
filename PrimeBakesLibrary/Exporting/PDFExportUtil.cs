using NumericWordsConversion;

using PrimeBakesLibrary.Data.Accounts.Masters;
using PrimeBakesLibrary.Data.Common;

using Syncfusion.Drawing;
using Syncfusion.Pdf;
using Syncfusion.Pdf.Graphics;
using Syncfusion.Pdf.Grid;

namespace PrimeBakesLibrary.Exporting;

internal static class PDFExportUtil
{
	// Shared color constants
	internal static readonly Color _primaryColor = Color.FromArgb(226, 19, 123); // Changed to #e2137b
	internal static readonly Color _secondaryColor = Color.FromArgb(193, 14, 105); // Darker variant of primary
	internal static readonly Color _accentColor = Color.FromArgb(33, 150, 243); // Complementary blue
	internal static readonly Color _lightGray = Color.FromArgb(245, 245, 245);
	internal static readonly Color _darkGray = Color.FromArgb(64, 64, 64);

	// Shared font constants - Optimized font sizes for compact but readable layout
	internal static readonly PdfStandardFont _titleFont = new(PdfFontFamily.Helvetica, 16, PdfFontStyle.Bold); // Slightly increased for better readability
	internal static readonly PdfStandardFont _headerFont = new(PdfFontFamily.Helvetica, 10, PdfFontStyle.Bold); // Slightly increased for better readability  
	internal static readonly PdfStandardFont _subHeaderFont = new(PdfFontFamily.Helvetica, 9, PdfFontStyle.Bold); // Slightly increased for better readability
	internal static readonly PdfStandardFont _normalFont = new(PdfFontFamily.Helvetica, 8); // Slightly increased to prevent clipping
	internal static readonly PdfStandardFont _boldFont = new(PdfFontFamily.Helvetica, 8, PdfFontStyle.Bold); // Slightly increased to prevent clipping
	internal static readonly PdfStandardFont _smallFont = new(PdfFontFamily.Helvetica, 7); // Slightly increased for better readability

	internal const float _pageMargin = 10f; // Reduced from 15f for more space

	/// <summary>
	/// Creates a common PDF document header with customizable title
	/// </summary>
	internal static PdfPageTemplateElement CreateHeader(PdfDocument doc, string headerTitle)
	{
		var headerRect = new RectangleF(0, 0, doc.Pages[0].GetClientSize().Width, 40); // Reduced height for more compact layout

		PdfPageTemplateElement header = new(headerRect);
		header.Graphics.DrawRectangle(new PdfSolidBrush(_primaryColor), headerRect);

		// Main title
		PdfStringFormat titleFormat = new()
		{
			Alignment = PdfTextAlignment.Center,
			LineAlignment = PdfVerticalAlignment.Middle
		};

		header.Graphics.DrawString(headerTitle, _titleFont, PdfBrushes.White,
			new PointF(headerRect.Width / 2, headerRect.Height / 2 - 8), titleFormat);

		// Company tagline
		PdfStringFormat taglineFormat = new()
		{
			Alignment = PdfTextAlignment.Center,
			LineAlignment = PdfVerticalAlignment.Middle
		};

		var taglineFont = new PdfStandardFont(PdfFontFamily.Helvetica, 7, PdfFontStyle.Italic);
		header.Graphics.DrawString("Celebrating happiness", taglineFont, PdfBrushes.White,
			new PointF(headerRect.Width / 2, headerRect.Height / 2 + 12), taglineFormat);

		return header;
	}

	/// <summary>
	/// Creates a common PDF document footer with timestamp and pagination
	/// </summary>
	internal static PdfPageTemplateElement CreateFooter(PdfDocument doc)
	{
		RectangleF rect = new(0, 0, doc.Pages[0].GetClientSize().Width, 8); // Reduced from 10

		PdfPageTemplateElement footer = new(rect);
		PdfPageNumberField pageNumber = new(_smallFont, new PdfSolidBrush(_darkGray));
		PdfPageCountField count = new(_smallFont, new PdfSolidBrush(_darkGray));

		string prefix = "Generated By ";
		string suffix = $" | Page {{0}} of {{1}} | Printed on: {DateTime.Now:dddd, MMMM dd, yyyy hh:mm tt}";

		PdfCompositeField compositeField = new()
		{
			Text = prefix + "https://aadisoft.vercel.app" + suffix,
			AutomaticFields = [pageNumber, count],
			Font = _smallFont,
			Brush = new PdfSolidBrush(_darkGray),
			Bounds = footer.Bounds,
			StringFormat = new()
			{
				Alignment = PdfTextAlignment.Center,
				LineAlignment = PdfVerticalAlignment.Middle
			}
		};

		compositeField.Draw(footer.Graphics);
		return footer;
	}

	/// <summary>
	/// Draws common company information section
	/// </summary>
	internal static async Task<float> DrawCompanyInformation(PdfPage pdfPage, string invoiceType)
	{
		RectangleF detailsRect = new(15, 18, pdfPage.GetClientSize().Width - 30, 50); // Reduced height for more compact layout
		pdfPage.Graphics.DrawRectangle(new PdfPen(_lightGray, 1), new PdfSolidBrush(_lightGray), detailsRect);

		var mainLocation = await LedgerData.LoadLedgerByLocation(1);

		if (!string.IsNullOrEmpty(mainLocation.Alias))
			pdfPage.Graphics.DrawString(mainLocation.Alias, _normalFont, new PdfSolidBrush(_darkGray), new PointF(20, detailsRect.Y + 8)); // Reduced margin

		if (!string.IsNullOrEmpty(mainLocation.GSTNo))
			pdfPage.Graphics.DrawString($"GST NO: {mainLocation.GSTNo}", _normalFont, new PdfSolidBrush(_darkGray), new PointF(20, detailsRect.Y + 16)); // Further reduced spacing

		if (!string.IsNullOrEmpty(mainLocation.Address))
			pdfPage.Graphics.DrawString($"Address: {mainLocation.Address}", _normalFont, new PdfSolidBrush(_darkGray), new PointF(20, detailsRect.Y + 26)); // Further reduced spacing

		if (!string.IsNullOrEmpty(mainLocation.Email))
			pdfPage.Graphics.DrawString($"Email: {mainLocation.Email}", _normalFont, new PdfSolidBrush(_darkGray), new PointF(20, detailsRect.Y + 36)); // Further reduced spacing

		if (!string.IsNullOrEmpty(mainLocation.Phone))
			pdfPage.Graphics.DrawString($"Phone: {mainLocation.Phone}", _normalFont, new PdfSolidBrush(_darkGray), new PointF(20, detailsRect.Y + 46)); // Further reduced spacing

		var invoiceTitleSize = _headerFont.MeasureString(invoiceType);
		pdfPage.Graphics.DrawString(invoiceType, _headerFont, new PdfSolidBrush(_secondaryColor), new PointF(pdfPage.GetClientSize().Width - invoiceTitleSize.Width - 20, detailsRect.Y + 12)); // Moved up from Y + 24 to Y + 12

		return detailsRect.Height + detailsRect.Y + 15; // Reduced spacing
	}

	/// <summary>
	/// Creates and configures a PDF grid with common styling
	/// </summary>
	internal static PdfGrid CreateStyledGrid<T>(IEnumerable<T> dataSource, float[] columnWidths, PdfTextAlignment[] columnAlignments)
	{
		PdfGrid pdfGrid = new()
		{
			DataSource = dataSource.ToList()
		};

		// Set column widths
		for (int i = 0; i < columnWidths.Length && i < pdfGrid.Columns.Count; i++)
			pdfGrid.Columns[i].Width = columnWidths[i];

		// Apply header styling with adequate padding for readability
		pdfGrid.Headers.ApplyStyle(new PdfGridCellStyle
		{
			Font = _boldFont,
			TextBrush = PdfBrushes.White,
			CellPadding = new PdfPaddings(4, 3, 4, 3), // Increased to prevent text clipping
			BackgroundBrush = new PdfSolidBrush(_primaryColor),
			Borders = new PdfBorders { All = new PdfPen(Color.Black, 0.5f) }
		});

		// Set minimum height for header row
		if (pdfGrid.Headers.Count > 0)
			pdfGrid.Headers[0].Height = Math.Max(pdfGrid.Headers[0].Height, 20f);

		// Apply alternating row colors and ensure minimum row height
		int index = 0;
		foreach (var row in pdfGrid.Rows)
		{
			index++;
			if (index % 2 == 0)
				row.Style.BackgroundBrush = new PdfSolidBrush(_lightGray);
			else
				row.Style.BackgroundBrush = new PdfSolidBrush(Color.White);

			// Set minimum row height to prevent text clipping
			row.Height = Math.Max(row.Height, 18f); // Minimum height for readability
		}

		// Apply grid styling with adequate padding for readability
		pdfGrid.Style = new()
		{
			Font = _normalFont,
			TextBrush = PdfBrushes.Black,
			CellPadding = new PdfPaddings(4, 3, 4, 3), // Increased to prevent text clipping
		};

		// Set column alignments
		for (int i = 0; i < columnAlignments.Length && i < pdfGrid.Columns.Count; i++)
			pdfGrid.Columns[i].Format = new(columnAlignments[i], PdfVerticalAlignment.Middle);

		return pdfGrid;
	}

	/// <summary>
	/// Draws a summary section with financial totals
	/// </summary>
	internal static float DrawSummarySection(PdfDocument pdfDocument, PdfPage pdfPage, float currentY,
		Dictionary<string, string> summaryItems, decimal grandTotal, string additionalInfo = null)
	{
		// Check if page has space for summary
		if (currentY + 200 > pdfPage.GetClientSize().Height - _pageMargin) // Reduced from 250
		{
			pdfDocument.Pages.Add();
			pdfPage = pdfDocument.Pages[pdfDocument.Pages.Count - 1];
			currentY = _pageMargin;
		}

		var summaryWidth = 220f; // Reduced from 250f
		var summaryX = pdfPage.GetClientSize().Width - summaryWidth - 15; // Reduced margin
		var summaryHeight = 200f; // Reduced from 250f

		var summaryRect = new RectangleF(summaryX, currentY, summaryWidth, summaryHeight);
		pdfPage.Graphics.DrawRectangle(new PdfPen(Color.Black, 1), new PdfSolidBrush(_lightGray), summaryRect);

		var summaryY = currentY + 8; // Reduced from 10
		pdfPage.Graphics.DrawString("Summary", _subHeaderFont, new PdfSolidBrush(_primaryColor), new PointF(summaryX + 8, summaryY)); // Reduced margin

		summaryY += 20; // Reduced from 25

		// Draw summary items with smaller spacing
		foreach (var item in summaryItems)
			if (!string.IsNullOrEmpty(item.Value))
			{
				summaryY += 12; // Reduced from 15
				DrawSummaryLine(pdfPage, item.Key, item.Value, summaryWidth, summaryX, summaryY);
			}

		// Draw grand total
		summaryY += 20; // Reduced from 25
		var grandTotalRect = new RectangleF(summaryX + 4, summaryY - 4, summaryWidth - 8, 20); // Reduced height from 25
		pdfPage.Graphics.DrawRectangle(new PdfPen(_primaryColor, 2), new PdfSolidBrush(_primaryColor), grandTotalRect);
		pdfPage.Graphics.DrawString("Grand Total: ", new PdfStandardFont(PdfFontFamily.Helvetica, 8, PdfFontStyle.Bold), // Reduced from 10
			PdfBrushes.White, new PointF(summaryX + 8, summaryY)); // Reduced margin

		var grandTotalText = grandTotal.FormatIndianCurrency();
		var grandTotalFont = new PdfStandardFont(PdfFontFamily.Helvetica, 8, PdfFontStyle.Bold); // Reduced from 10
		var grandTotalSize = grandTotalFont.MeasureString(grandTotalText);

		pdfPage.Graphics.DrawString(grandTotalText, grandTotalFont,
			PdfBrushes.White, new PointF(summaryX + summaryWidth - grandTotalSize.Width - 12, summaryY)); // Reduced margin

		// Draw amount in words with smaller spacing
		summaryY += 25; // Reduced from 30
		var amountInWords = grandTotal.ToNumericWords();
		if (string.IsNullOrEmpty(amountInWords))
			amountInWords = "Zero";
		amountInWords += " Rupees Only";

		var availableWidth = summaryWidth - 16; // Reduced from 20
		DrawWrappedText(pdfPage, amountInWords, _boldFont, new PdfSolidBrush(_primaryColor),
						new RectangleF(summaryX + 8, summaryY, availableWidth, 40), // Reduced height from 50
						PdfTextAlignment.Left, ref summaryY);

		// Draw additional info if provided
		if (!string.IsNullOrEmpty(additionalInfo))
		{
			summaryY += 15; // Reduced from 20
			DrawSummaryLine(pdfPage, "Payment Mode: ", additionalInfo, summaryWidth, summaryX, summaryY);
		}

		return summaryRect.Height + summaryRect.Y + 15; // Reduced from 20
	}

	/// <summary>
	/// Draws wrapped text within specified bounds
	/// </summary>
	internal static void DrawWrappedText(PdfPage pdfPage, string text, PdfFont font, PdfBrush brush,
		RectangleF bounds, PdfTextAlignment alignment, ref float currentY)
	{
		const float lineSpacing = 9f; // Reduced from 12f
		string[] words = text.Split(' ');
		string line = string.Empty;

		foreach (string word in words)
		{
			string testLine = string.IsNullOrEmpty(line) ? word : line + " " + word;
			SizeF testSize = font.MeasureString(testLine);

			if (testSize.Width <= bounds.Width)
				line = testLine;
			else
			{
				PdfStringFormat format = new() { Alignment = alignment };
				pdfPage.Graphics.DrawString(line, font, brush, new RectangleF(bounds.X, currentY, bounds.Width, bounds.Height), format);
				currentY += lineSpacing;
				line = word;
			}
		}

		if (!string.IsNullOrEmpty(line))
		{
			PdfStringFormat format = new() { Alignment = alignment };
			pdfPage.Graphics.DrawString(line, font, brush, new RectangleF(bounds.X, currentY, bounds.Width, bounds.Height), format);
			currentY += lineSpacing;
		}
	}

	/// <summary>
	/// Draws a summary line with label and value
	/// </summary>
	internal static void DrawSummaryLine(PdfPage pdfPage, string label, string value, float summaryWidth, float summaryX, float summaryY)
	{
		pdfPage.Graphics.DrawString(label, _normalFont, PdfBrushes.Black, new PointF(summaryX + 8, summaryY)); // Reduced margin
		pdfPage.Graphics.DrawString(value, _boldFont, new PdfSolidBrush(_secondaryColor),
			new PointF(summaryX + summaryWidth - _boldFont.MeasureString(value).Width - 12, summaryY)); // Reduced margin
	}

	/// <summary>
	/// Draws invoice details section with left and right column layout
	/// </summary>
	internal static float DrawInvoiceDetailsSection(PdfPage pdfPage, float currentY, string sectionTitle,
		Dictionary<string, string> leftColumnDetails, Dictionary<string, string> rightColumnDetails)
	{
		var detailsRect = new RectangleF(15, currentY, pdfPage.GetClientSize().Width - 30, 60); // Further reduced from 75

		if (leftColumnDetails.Count > 3)
			detailsRect = new RectangleF(15, currentY, pdfPage.GetClientSize().Width - 30, 85); // Further reduced from 100

		pdfPage.Graphics.DrawRectangle(new PdfPen(Color.Black, 1), detailsRect);

		var leftX = 20; // Reduced from 30
		var rightX = pdfPage.GetClientSize().Width / 2 + 15; // Reduced from 20
		var detailY = currentY + 6; // Further reduced from 8

		// Section title
		pdfPage.Graphics.DrawString(sectionTitle, _subHeaderFont, new PdfSolidBrush(_primaryColor), new PointF(leftX, detailY));

		// Left column details with smaller spacing
		detailY += 16; // Further reduced from 20
		foreach (var detail in leftColumnDetails)
		{
			if (!string.IsNullOrEmpty(detail.Value))
			{
				pdfPage.Graphics.DrawString($"{detail.Key}: ", _normalFont, PdfBrushes.Black, new PointF(leftX, detailY));
				pdfPage.Graphics.DrawString(detail.Value, _boldFont, new PdfSolidBrush(_secondaryColor), new PointF(leftX + 45, detailY)); // Further reduced from 50
				detailY += 10; // Further reduced from 12
			}
		}

		// Right column details with smaller spacing
		detailY = currentY + 22; // Further reduced from 28
		foreach (var detail in rightColumnDetails)
			if (!string.IsNullOrEmpty(detail.Value))
			{
				pdfPage.Graphics.DrawString($"{detail.Key}: ", _normalFont, PdfBrushes.Black, new PointF(rightX, detailY));

				// Handle longer text for cash discount
				var valueWidth = detail.Key.Contains("Cash Discount") ? 75 : 45; // Further reduced from 85 and 50
				pdfPage.Graphics.DrawString(detail.Value, _boldFont, new PdfSolidBrush(_secondaryColor), new PointF(rightX + valueWidth, detailY));
				detailY += 10; // Further reduced from 12
			}

		return detailsRect.Height + detailsRect.Y + 15; // Reduced from 20
	}

	/// <summary>
	/// Creates a new PDF document with A4 size and templates
	/// </summary>
	internal static (PdfDocument document, PdfPage page) CreateA4Document()
	{
		var pdfDocument = new PdfDocument();
		var pdfPage = pdfDocument.Pages.Add();
		pdfDocument.PageSettings.Size = PdfPageSize.A4;

		pdfDocument.Template.Top = CreateHeader(pdfDocument, "PRIME BAKES");
		pdfDocument.Template.Bottom = CreateFooter(pdfDocument);

		return (pdfDocument, pdfPage);
	}

	/// <summary>
	/// Finalizes PDF document and returns as MemoryStream
	/// </summary>
	internal static MemoryStream FinalizePdfDocument(PdfDocument pdfDocument)
	{
		var stream = new MemoryStream();
		pdfDocument.Save(stream);
		pdfDocument.Close();
		return stream;
	}
}