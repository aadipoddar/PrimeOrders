@page "/Accounts/FinancialAccounting"
@page "/Accounts/FinancialAccounting/{AccountingId:int}"
@using PrimeOrdersLibrary.Models.Accounts.FinancialAccounting
@using PrimeOrdersLibrary.Models.Accounts.Masters

<PageTitle>Financial Accounting - Prime Orders</PageTitle>

<SfToast @ref="_sfErrorToast"
		 ID="toast_error"
		 Title="Error"
		 Content="Some Error Message"
		 Timeout="3000"
		 ShowCloseButton="true"
		 CssClass="e-toast-danger">
	<ToastPosition X="Right" Y="Top" />
	<ToastAnimationSettings>
		<ToastShowAnimationSettings Effect="ToastEffect.SlideRightIn" Duration="600" Easing="ToastEasing.Linear" />
		<ToastHideAnimationSettings Effect="ToastEffect.SlideRightOut" Duration="600" Easing="ToastEasing.Linear" />
	</ToastAnimationSettings>
</SfToast>

<SfToast @ref="_sfSuccessToast"
		 ID="toast_success"
		 Title="Success"
		 Content="Accounting entry saved successfully."
		 Timeout="1000"
		 ShowCloseButton="true"
		 CssClass="e-toast-success">
	<ToastPosition X="Right" Y="Top" />
	<ToastEvents Closed='() => NavManager.NavigateTo("/Accounts/FinancialAccounting", forceLoad: true)' />
	<ToastAnimationSettings>
		<ToastShowAnimationSettings Effect="ToastEffect.SlideRightIn" Duration="600" Easing="ToastEasing.Linear" />
		<ToastHideAnimationSettings Effect="ToastEffect.SlideRightOut" Duration="600" Easing="ToastEasing.Linear" />
	</ToastAnimationSettings>
</SfToast>

@if (_isLoading)
{
	<div class="loader-container">
		<div class="circular-dots-loader">
			<span class="dot dot-1"></span>
			<span class="dot dot-2"></span>
			<span class="dot dot-3"></span>
		</div>
		<p class="loading-text">Loading financial accounting...</p>
	</div>
}
else
{
	<div class="accounting-container" tabindex="0">
		<!-- Ledger Search Indicator -->
		<div id="ledgerSearchIndicator" class="ledger-search-indicator" style="display: none;">
			<div class="search-header">
				<span class="search-icon">🔍</span>
				<span>Ledger Search: </span>
				<span id="searchText" class="search-text"></span>
			</div>
			<div id="searchResults" class="search-results"></div>
			<div class="search-help">
				<span>↑↓ Navigate • Enter Select • Esc Cancel</span>
			</div>
		</div>

		<div class="page-header">
			<h1 class="page-title">Financial Accounting</h1>
			<button @onclick='() => NavManager.NavigateTo("/Accounts-Dashboard")' class="back-button">
				<span class="back-icon">←</span> Back to Accounts
			</button>
		</div>

		<div class="action-buttons">
			<button @onclick="() => _entryDetailsDialogVisible = true" class="action-button">
				<span class="action-icon">📄</span> Entry Details
			</button>
			<button @onclick="() => _entrySummaryDialogVisible = true" class="action-button action-button-primary">
				<span class="action-icon">📊</span> Save Entry
			</button>
		</div>

		<div class="main-content">
			<div class="card ledgers-card">
				<div class="card-header">
					<h2>Ledger Selection</h2>
					<p class="card-info">Press <kbd>F2</kbd> to search ledgers, click Add Entry or row to add to entry</p>
				</div>
				<div class="card-body">
					<SfGrid DataSource="@(_isLedgerSearchActive? _filteredLedgers : _ledgers)"
							ID="_sfLedgerGrid"
							@ref="_sfLedgerGrid"
							AllowSorting="true"
							AllowResizing="true"
							AllowPaging="true"
							AllowFiltering="true"
							Height="450px"
							CssClass="modern-ledgers-grid">
						<GridPageSettings PageSize="10" />
						<GridColumns>
							<GridColumn Field=@nameof(LedgerModel.Name) Width="100%" />
							<GridColumn Field=@nameof(LedgerModel.Code) AllowFiltering="false" />
							<GridColumn AllowFiltering="false" />
						</GridColumns>
						<GridTemplates>
							<RowTemplate>
								@{
									var ledger = (context as LedgerModel);
									var isSelected = _isLedgerSearchActive && ledger?.Id == _selectedLedger.Id;
								}
								<tr class="ledger-row @(isSelected ? "selected-ledger-row" : "")">
									<td class="ledger-name">
										<div class="name-wrapper">
											<span class="name-text" title="@ledger?.Name">@ledger?.Name</span>
										</div>
									</td>
									<td class="ledger-action">
										<button class="add-entry-btn"
												@onclick="() => OnAddEntryButtonClick(ledger)"
												@onclick:stopPropagation="true"
												title="Add Entry">
											<span class="entry-icon">📋</span>
											<span class="entry-text">Add</span>
										</button>
									</td>
								</tr>
							</RowTemplate>
						</GridTemplates>
					</SfGrid>
				</div>
			</div>

			<div class="card entry-card">
				<div class="card-header">
					<h2>Accounting Entries</h2>
					<p class="card-info">Click on a row to edit entry details</p>
				</div>
				<div class="card-body">
					<SfGrid DataSource="@_accountingCart"
							ID="_sfAccountingCartGrid"
							@ref="_sfAccountingCartGrid"
							AllowSorting="true"
							AllowFiltering="true"
							AllowResizing="true"
							Height="450px"
							CssClass="entry-grid">
						<GridEvents RowSelected="AccountingCartRowSelectHandler" TValue="AccountingCartModel" />
						<GridColumns>
							<GridColumn Field=@nameof(AccountingCartModel.Name) HeaderText="Ledger" Width="200" />
							<GridColumn Field=@nameof(AccountingCartModel.Remarks) HeaderText="Remarks" Width="150" />
							<GridColumn Field=@nameof(AccountingCartModel.Debit) HeaderText="Debit" Width="130" Format="N2" TextAlign="TextAlign.Right" />
							<GridColumn Field=@nameof(AccountingCartModel.Credit) HeaderText="Credit" Width="130" Format="N2" TextAlign="TextAlign.Right" />
						</GridColumns>
					</SfGrid>
				</div>
			</div>
		</div>

		<!-- Balance Summary -->
		<div class="balance-summary">
			<div class="balance-item">
				<span class="balance-label">Total Debit:</span>
				<span class="balance-value debit">@TotalDebit.FormatIndianCurrency()</span>
			</div>
			<div class="balance-item">
				<span class="balance-label">Total Credit:</span>
				<span class="balance-value credit">@TotalCredit.FormatIndianCurrency()</span>
			</div>
			<div class="balance-item">
				<span class="balance-label">Difference:</span>
				<span class="balance-value @(BalanceDifference == 0 ? "balanced" : "unbalanced")">
					@BalanceDifference.FormatIndianCurrency()
				</span>
			</div>
		</div>

		<div class="dashboard-footer">
			<p>&copy; @DateTime.Now.Year A Product By <a href="https://aadisoft.vercel.app" target="_blank" class="footer-link">AadiSoft</a>. All rights reserved.</p>
		</div>
	</div>
}

<!-- Entry Details Dialog -->
<SfDialog ID="_sfEntryDetailsDialog"
		  @ref="_sfEntryDetailsDialog"
		  Width="500px"
		  Height="auto"
		  AllowDragging="true"
		  EnableResize="false"
		  @bind-Visible="_entryDetailsDialogVisible"
		  IsModal="true">
	<DialogPositionData X="Center" Y="Center" />
	<DialogTemplates>
		<Header>
			<div class="dialog-header">
				<span>Entry Details</span>
			</div>
		</Header>
		<Content>
			<div class="dialog-content">
				<div class="form-group">
					<label>Reference Number</label>
					<SfTextBox Value="@_accounting.ReferenceNo"
							   Placeholder="Reference No"
							   Readonly=true
							   CssClass="form-control" />
				</div>

				<div class="form-group">
					<label>Voucher Type</label>
					<SfComboBox TValue="int"
								TItem="VoucherModel"
								Placeholder="Select Voucher Type"
								DataSource="@_vouchers"
								@bind-Value="_accounting.VoucherId"
								CssClass="form-control">
						<ComboBoxFieldSettings Value="Id" Text="Name" />
						<ComboBoxEvents TValue="int" TItem="VoucherModel" ValueChange="OnVoucherSelectionChanged" />
					</SfComboBox>
				</div>

				<div class="form-group">
					<label>Accounting Date</label>
					<SfDatePicker @bind-Value="_accounting.AccountingDate"
								  Placeholder="Select Date"
								  CssClass="form-control">
						<DatePickerEvents TValue="DateOnly" ValueChange="OnAccountingDateSelectionChanged" />
					</SfDatePicker>
				</div>
			</div>
		</Content>
		<FooterTemplate>
			<div class="dialog-footer">
				<SfButton Content="Close" OnClick="() => _entryDetailsDialogVisible = false" CssClass="dialog-button" />
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<!-- Entry Summary Dialog -->
<SfDialog ID="_sfEntrySummaryDialog"
		  @ref="_sfEntrySummaryDialog"
		  Width="700px"
		  Height="auto"
		  AllowDragging="true"
		  EnableResize="false"
		  @bind-Visible="_entrySummaryDialogVisible"
		  IsModal="true">
	<DialogPositionData X="Center" Y="Center" />
	<DialogTemplates>
		<Header>
			<div class="dialog-header">
				<span>Entry Summary</span>
			</div>
		</Header>
		<Content>
			<div class="dialog-content">
				<div class="summary-section">
					<div class="summary-row">
						<span>Total Debit:</span>
						<span class="amount debit">@TotalDebit.FormatIndianCurrency()</span>
					</div>
					<div class="summary-row">
						<span>Total Credit:</span>
						<span class="amount credit">@TotalCredit.FormatIndianCurrency()</span>
					</div>
					<div class="summary-row balance-row">
						<span>Balance Status:</span>
						<span class="balance-status @(BalanceDifference == 0 ? "balanced" : "unbalanced")">
							@(BalanceDifference == 0 ? "Balanced" : $"Unbalanced ({BalanceDifference.FormatIndianCurrency()})")
						</span>
					</div>
				</div>

				<div class="form-group">
					<label>General Remarks</label>
					<SfTextBox @bind-Value="_accounting.Remarks"
							   Placeholder="Enter general remarks for this entry"
							   Multiline="true"
							   CssClass="form-control" />
				</div>

				@if (BalanceDifference != 0)
				{
					<div class="warning-section">
						<span class="warning-icon">⚠️</span>
						<span class="warning-text">Entry is not balanced. Debit and Credit amounts must be equal.</span>
					</div>
				}
			</div>
		</Content>
		<FooterTemplate>
			<div class="dialog-footer">
				<div class="footer-buttons">
					<SfButton CssClass="save-button-dialog"
							  Content="Save Entry"
							  IsPrimary="true"
							  OnClick="OnSaveEntryClick"
							  Disabled="@(BalanceDifference != 0 || _accountingCart.Count == 0 || _isSaving)" />
					<SfButton CssClass="print-button-dialog" Content="Save & Print Invoice" OnClick="OnSaveAndPrintClick">
						<div class="button-content">
							<span class="print-icon">🖨️</span>
							<span>Save & Print Invoice</span>
						</div>
					</SfButton>
					<SfButton Content="Close" OnClick="() => _entrySummaryDialogVisible = false" CssClass="dialog-button" />
				</div>
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<!-- Amount Entry Dialog -->
<SfDialog ID="_sfAmountDialog"
		  @ref="_sfAmountDialog"
		  Width="600px"
		  Height="auto"
		  AllowDragging="true"
		  EnableResize="false"
		  @bind-Visible="_amountDialogVisible"
		  IsModal="true">
	<DialogPositionData X="Center" Y="Center" />
	<DialogTemplates>
		<Header>
			<div class="dialog-header">
				<span>Entry Amount: </span>
				<span class="ledger-name">@_selectedLedger.Name</span>
			</div>
		</Header>
		<Content>
			<div class="dialog-content">
				<div class="amount-entry-grid">
					<div class="amount-group">
						<label>Debit Amount</label>
						<SfNumericTextBox TValue="decimal"
										  Value="_selectedDebitAmount"
										  Min="0"
										  Format="N2"
										  CssClass="form-control"
										  ValueChanged="OnDebitAmountChanged" />
					</div>

					<div class="amount-group">
						<label>Credit Amount</label>
						<SfNumericTextBox TValue="decimal"
										  Value="_selectedCreditAmount"
										  Min="0"
										  Format="N2"
										  CssClass="form-control"
										  ValueChanged="OnCreditAmountChanged" />
					</div>
				</div>

				<div class="form-group">
					<label>Remarks</label>
					<SfTextBox @bind-Value="_selectedRemarks"
							   Placeholder="Enter remarks for this entry"
							   Multiline="true"
							   CssClass="form-control" />
				</div>

				@if (_selectedDebitAmount > 0 && _selectedCreditAmount > 0)
				{
					<div class="validation-warning">
						<span class="warning-icon">⚠️</span>
						<span class="warning-text">Please enter either Debit OR Credit amount, not both.</span>
					</div>
				}
			</div>
		</Content>
		<FooterTemplate>
			<div class="dialog-footer">
				<div class="footer-buttons">
					<SfButton Content="Add to Entry"
							  IsPrimary="true"
							  OnClick="OnAddToEntryClick"
							  CssClass="dialog-button"
							  Disabled="@((_selectedDebitAmount == 0 && _selectedCreditAmount == 0) || (_selectedDebitAmount > 0 && _selectedCreditAmount > 0))" />
				</div>
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<!-- Entry Manage Dialog -->
<SfDialog ID="_sfEntryManageDialog"
		  @ref="_sfEntryManageDialog"
		  Width="700px"
		  Height="auto"
		  AllowDragging="true"
		  EnableResize="false"
		  @bind-Visible="_entryManageDialogVisible"
		  IsModal="true">
	<DialogPositionData X="Center" Y="Center" />
	<DialogTemplates>
		<Header>
			<div class="dialog-header">
				<span>Manage Entry: </span>
				<span class="ledger-name">@_selectedAccountingCart.Name</span>
			</div>
		</Header>
		<Content>
			<div class="dialog-content">
				<div class="amount-entry-grid">
					<div class="amount-group">
						<label>Debit Amount</label>
						<SfNumericTextBox TValue="decimal"
										  Value="@(_selectedAccountingCart.Debit ?? 0)"
										  ValueChanged="OnManageDebitAmountChanged"
										  Min="0"
										  Format="N2"
										  CssClass="form-control" />
					</div>

					<div class="amount-group">
						<label>Credit Amount</label>
						<SfNumericTextBox TValue="decimal"
										  Value="@(_selectedAccountingCart.Credit ?? 0)"
										  ValueChanged="OnManageCreditAmountChanged"
										  Min="0"
										  Format="N2"
										  CssClass="form-control" />
					</div>
				</div>

				<div class="form-group">
					<label>Remarks</label>
					<SfTextBox @bind-Value="_selectedAccountingCart.Remarks"
							   Placeholder="Enter remarks for this entry"
							   Multiline="true"
							   CssClass="form-control" />
				</div>

				@if ((_selectedAccountingCart.Debit ?? 0) > 0 && (_selectedAccountingCart.Credit ?? 0) > 0)
				{
					<div class="validation-warning">
						<span class="warning-icon">⚠️</span>
						<span class="warning-text">Please enter either Debit OR Credit amount, not both.</span>
					</div>
				}
			</div>
		</Content>
		<FooterTemplate>
			<div class="dialog-footer">
				<div class="footer-buttons">
					<SfButton Content="Save Changes"
							  IsPrimary="true"
							  OnClick="OnSaveEntryManageClick"
							  CssClass="dialog-button"
							  Disabled="@(((_selectedAccountingCart.Debit ?? 0) == 0 && (_selectedAccountingCart.Credit ?? 0) == 0) || ((_selectedAccountingCart.Debit ?? 0) > 0 && (_selectedAccountingCart.Credit ?? 0) > 0))" />
					<SfButton Content="Remove Entry" OnClick="OnRemoveEntryClick" CssClass="dialog-button remove-button" />
					<SfButton Content="Cancel" OnClick="() => _entryManageDialogVisible = false" CssClass="dialog-button" />
				</div>
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<style>
	:root {
		--dotnet-primary: #512BD4;
		--dotnet-secondary: #68217A;
		--dotnet-accent: #00A4EF;
		--dotnet-light: #F7F7F7;
		--dotnet-dark: #1E1E1E;
		--dotnet-border: rgba(0, 0, 0, 0.1);
		--ledger-grid-border: #e1e5e9;
		--ledger-grid-hover: rgba(81, 43, 212, 0.08);
		--ledger-grid-selected: var(--dotnet-primary);
		--debit-color: #007acc;
		--credit-color: #ff6b35;
		--balanced-color: #28a745;
		--unbalanced-color: #dc3545;
	}

	/* Keyboard key styling */
	kbd {
		background-color: #f8f9fa;
		border: 1px solid #ced4da;
		border-radius: 3px;
		color: #495057;
		font-family: Monaco, Consolas, monospace;
		font-size: 10px;
		padding: 2px 4px;
		box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2);
	}

	/* Ledger Search Indicator */
	.ledger-search-indicator {
		position: fixed;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		background: var(--dotnet-primary);
		color: white;
		padding: 20px;
		border-radius: 12px;
		box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
		z-index: 10000;
		min-width: 300px;
		text-align: center;
	}

	.search-header {
		font-size: 18px;
		font-weight: 600;
		margin-bottom: 10px;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 8px;
	}

	.search-icon {
		font-size: 20px;
	}

	.search-text {
		background: rgba(255, 255, 255, 0.2);
		padding: 4px 8px;
		border-radius: 4px;
		min-width: 100px;
		display: inline-block;
		margin-left: 8px;
	}

	.search-results {
		font-size: 14px;
		opacity: 0.9;
		margin: 10px 0;
	}

	.search-help {
		font-size: 12px;
		opacity: 0.8;
		border-top: 1px solid rgba(255, 255, 255, 0.3);
		padding-top: 10px;
		margin-top: 10px;
	}

	/* Modern Ledgers Grid Styling */
	.modern-ledgers-grid {
		border-radius: 12px;
		overflow: hidden;
		box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
		border: 1px solid var(--ledger-grid-border);
	}

	#_sfLedgerGrid.e-grid .e-gridheader .e-columnheader {
		display: none;
	}

	/* Custom Row Template Styling */
	.ledger-row {
		transition: all 0.2s ease;
		border-bottom: 1px solid var(--ledger-grid-border);
		cursor: pointer;
	}

		.ledger-row:hover {
			background-color: var(--ledger-grid-hover);
			transform: translateY(-1px);
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
		}

		.ledger-row:last-child {
			border-bottom: none;
		}

	/* Selected ledger row highlighting */
	.selected-ledger-row {
		background: linear-gradient(135deg, var(--dotnet-primary) 0%, var(--dotnet-secondary) 100%) !important;
		color: white !important;
		font-weight: 600 !important;
		box-shadow: 0 4px 15px rgba(81, 43, 212, 0.3);
		transform: translateY(-2px);
	}

		.selected-ledger-row .code-wrapper,
		.selected-ledger-row .code-badge {
			background-color: rgba(255, 255, 255, 0.2) !important;
			color: white !important;
			border-color: rgba(255, 255, 255, 0.3) !important;
		}

		.selected-ledger-row .name-text {
			color: white !important;
			font-weight: 700 !important;
		}

		.selected-ledger-row .add-entry-btn {
			background-color: rgba(255, 255, 255, 0.9) !important;
			color: var(--dotnet-primary) !important;
			border-color: rgba(255, 255, 255, 0.9) !important;
		}

			.selected-ledger-row .add-entry-btn:hover {
				background-color: white !important;
				transform: scale(1.1) !important;
			}

	/* Ledger Name Cell */
	.ledger-name {
		padding: 15px 12px;
		vertical-align: middle;
		width: auto;
		min-width: 300px;
	}

	.name-wrapper {
		display: flex;
		align-items: center;
		width: 100%;
		overflow: hidden;
	}

	.name-text {
		font-weight: 500;
		color: var(--dotnet-dark);
		font-size: 15px;
		line-height: 1.4;
		transition: all 0.2s ease;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
		width: 100%;
	}

	.ledger-row:hover .name-text {
		color: var(--dotnet-primary);
		font-weight: 600;
		white-space: normal;
		overflow: visible;
		text-overflow: initial;
	}

	/* Ledger Code Cell */
	.ledger-code {
		padding: 15px 12px;
		vertical-align: middle;
		text-align: center;
		width: 120px;
	}

	.code-wrapper {
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.code-badge {
		background-color: var(--dotnet-light);
		color: var(--dotnet-secondary);
		padding: 6px 12px;
		border-radius: 20px;
		font-size: 12px;
		font-weight: 600;
		border: 1px solid var(--ledger-grid-border);
		transition: all 0.2s ease;
	}

	.ledger-row:hover .code-badge {
		background-color: var(--dotnet-primary);
		color: white;
		border-color: var(--dotnet-primary);
		transform: scale(1.05);
	}

	/* Ledger Action Cell */
	.ledger-action {
		padding: 15px 12px;
		vertical-align: middle;
		text-align: center;
		width: 120px;
	}

	.add-entry-btn {
		background-color: var(--dotnet-primary);
		color: white;
		border: 2px solid var(--dotnet-primary);
		padding: 8px 12px;
		border-radius: 8px;
		font-weight: 600;
		font-size: 12px;
		cursor: pointer;
		display: inline-flex;
		align-items: center;
		gap: 6px;
		transition: all 0.2s ease;
		white-space: nowrap;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

		.add-entry-btn:hover {
			background-color: #4311a8;
			border-color: #4311a8;
			transform: scale(1.1);
			box-shadow: 0 4px 12px rgba(81, 43, 212, 0.3);
		}

		.add-entry-btn:active {
			transform: scale(0.95);
		}

	.entry-icon {
		font-size: 14px;
	}

	.entry-text {
		font-weight: 700;
	}

	/* Grid Pagination Styling */
	.modern-ledgers-grid ::deep .e-grid .e-pager {
		background-color: var(--dotnet-light);
		border-top: 1px solid var(--ledger-grid-border);
		padding: 12px;
	}

		.modern-ledgers-grid ::deep .e-grid .e-pager .e-pagercontainer {
			background-color: transparent;
		}

		.modern-ledgers-grid ::deep .e-grid .e-pager .e-numericitem {
			border-radius: 6px;
			margin: 0 2px;
			font-weight: 500;
			transition: all 0.2s ease;
		}

		.modern-ledgers-grid ::deep .e-grid .e-pager .e-currentitem {
			background-color: var(--dotnet-primary);
			color: white;
			font-weight: 600;
		}

	/* General Layout */
	.accounting-container {
		display: flex;
		flex-direction: column;
		min-height: 100vh;
		padding: 20px;
		background: linear-gradient(135deg, rgba(81, 43, 212, 0.05) 0%, rgba(104, 33, 122, 0.05) 100%);
	}

	/* Page Header */
	.page-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 20px;
	}

	.page-title {
		color: var(--dotnet-secondary);
		font-size: 28px;
		font-weight: 700;
		margin: 0;
	}

	.back-button {
		background-color: transparent;
		border: 2px solid var(--dotnet-secondary);
		color: var(--dotnet-secondary);
		padding: 8px 16px;
		border-radius: 8px;
		cursor: pointer;
		font-weight: 600;
		display: inline-flex;
		align-items: center;
		gap: 8px;
		transition: all 0.2s ease;
	}

		.back-button:hover {
			background-color: var(--dotnet-secondary);
			color: white;
		}

	.back-icon {
		font-size: 16px;
	}

	/* Action Buttons */
	.action-buttons {
		display: flex;
		gap: 15px;
		margin-bottom: 25px;
		flex-wrap: wrap;
	}

	.action-button {
		background-color: white;
		border: none;
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
		color: var(--dotnet-secondary);
		padding: 12px 20px;
		border-radius: 8px;
		cursor: pointer;
		font-weight: 600;
		display: inline-flex;
		align-items: center;
		gap: 10px;
		transition: all 0.2s ease;
		flex: 1;
		min-width: 150px;
		justify-content: center;
	}

		.action-button:hover {
			transform: translateY(-3px);
			box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
		}

	.action-icon {
		font-size: 18px;
	}

	.action-button-primary {
		background-color: var(--dotnet-primary);
		color: white;
	}

		.action-button-primary:hover {
			background-color: #4311a8;
		}

	/* Main Content - Updated grid layout */
	.main-content {
		display: grid;
		grid-template-columns: 1fr 2fr; /* Changed to make ledger smaller and cart larger */
		gap: 25px;
		margin-bottom: 30px;
	}

	/* Cards */
	.card {
		background-color: white;
		border-radius: 15px;
		box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
		overflow: hidden;
		height: 100%;
		display: flex;
		flex-direction: column;
	}

	.card-header {
		background-color: var(--dotnet-light);
		padding: 15px 20px;
		border-bottom: 1px solid var(--dotnet-border);
	}

		.card-header h2 {
			margin: 0;
			color: var(--dotnet-secondary);
			font-size: 20px;
			font-weight: 600;
		}

	.card-info {
		margin: 5px 0 0 0;
		color: #666;
		font-size: 14px;
		font-style: italic;
	}

	.card-body {
		padding: 20px;
		flex-grow: 1;
		display: flex;
		flex-direction: column;
	}

	/* Entry Grid */
	.entry-grid {
		border-radius: 8px;
		overflow: hidden;
		flex-grow: 1;
	}

		.entry-grid ::deep .e-grid .e-gridheader,
		.entry-grid ::deep .e-grid .e-gridheader {
			padding: 0;
			border-top: none;
		}

		.entry-grid ::deep .e-grid .e-rowcell {
			padding: 6px 8px;
			height: 36px;
		}

		.entry-grid ::deep .e-grid .e-headercell {
			padding: 8px 8px;
			height: 40px;
		}

		.entry-grid ::deep .e-grid .e-pager {
			padding: 4px;
		}

	/* Balance Summary */
	.balance-summary {
		display: flex;
		justify-content: center;
		gap: 30px;
		background-color: white;
		padding: 20px;
		border-radius: 15px;
		box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
		margin-bottom: 30px;
	}

	.balance-item {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 8px;
	}

	.balance-label {
		font-weight: 600;
		color: var(--dotnet-secondary);
		font-size: 14px;
	}

	.balance-value {
		font-weight: 700;
		font-size: 18px;
	}

		.balance-value.debit {
			color: var(--debit-color);
		}

		.balance-value.credit {
			color: var(--credit-color);
		}

		.balance-value.balanced {
			color: var(--balanced-color);
		}

		.balance-value.unbalanced {
			color: var(--unbalanced-color);
		}

	/* Amount Entry Grid */
	.amount-entry-grid {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 20px;
		margin-bottom: 20px;
	}

	.amount-group {
		display: flex;
		flex-direction: column;
	}

		.amount-group label {
			margin-bottom: 8px;
			font-weight: 500;
			color: var(--dotnet-dark);
		}

	/* Validation Warning */
	.validation-warning {
		background-color: #fff3cd;
		border: 1px solid #ffeaa7;
		border-radius: 8px;
		padding: 12px;
		display: flex;
		align-items: center;
		gap: 10px;
		margin-top: 15px;
	}

		.validation-warning .warning-icon {
			font-size: 18px;
		}

		.validation-warning .warning-text {
			color: #856404;
			font-weight: 500;
			font-size: 14px;
		}

	/* Forms */
	.form-group {
		margin-bottom: 15px;
	}

	.form-row {
		display: grid;
		grid-template-columns: 1fr;
		gap: 15px;
		margin-bottom: 15px;
	}

	label {
		display: block;
		margin-bottom: 8px;
		font-weight: 500;
		color: var(--dotnet-dark);
	}

	.form-control {
		width: 100%;
		border-radius: 6px;
	}

	.checkbox-container {
		margin-top: 10px;
	}

	.form-checkbox {
		margin-top: 5px;
	}

	/* Button Styling */
	.save-button-dialog {
		background-color: var(--dotnet-primary);
		color: white;
		padding: 10px 20px;
		border-radius: 8px;
		font-weight: 600;
		transition: all 0.2s ease;
	}

		.save-button-dialog:disabled {
			background-color: #a583c3;
			cursor: not-allowed;
			transform: none;
		}

		.save-button-dialog:hover:not(:disabled) {
			background-color: #4311a8;
		}

	/* Remove Button Styling */
	.remove-button {
		background-color: #f44336;
		color: white;
		border: none;
		transition: all 0.2s ease;
	}

		.remove-button:hover {
			background-color: #d32f2f;
		}

	/* Dialog Styling */
	.dialog-header {
		font-size: 20px;
		font-weight: 600;
		color: var(--dotnet-secondary);
		display: flex;
		align-items: center;
		gap: 8px;
	}

	.ledger-name {
		color: var(--dotnet-primary);
		font-weight: 700;
	}

	.dialog-content {
		padding: 20px;
	}

	.summary-section {
		margin-bottom: 20px;
		border: 1px solid var(--dotnet-border);
		border-radius: 8px;
		padding: 15px;
		background-color: var(--dotnet-light);
	}

	.summary-row {
		display: flex;
		justify-content: space-between;
		padding: 10px 0;
		border-bottom: 1px solid var(--dotnet-border);
	}

		.summary-row:last-child {
			border-bottom: none;
		}

	.balance-row {
		font-weight: 700;
		font-size: 16px;
		margin-top: 10px;
		padding-top: 15px;
		border-top: 2px solid var(--dotnet-border);
	}

	.balance-status.balanced {
		color: var(--balanced-color);
	}

	.balance-status.unbalanced {
		color: var(--unbalanced-color);
	}

	.amount {
		font-weight: 600;
	}

		.amount.debit {
			color: var(--debit-color);
		}

		.amount.credit {
			color: var(--credit-color);
		}

	/* Warning Section */
	.warning-section {
		background-color: #fff3cd;
		border: 1px solid #ffeaa7;
		border-radius: 8px;
		padding: 15px;
		display: flex;
		align-items: center;
		gap: 10px;
		margin-top: 15px;
	}

	.warning-icon {
		font-size: 20px;
	}

	.warning-text {
		color: #856404;
		font-weight: 500;
	}

	/* Dialog Footer */
	.dialog-footer {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 15px 20px;
		background-color: var(--dotnet-light);
		border-top: 1px solid var(--dotnet-border);
	}

	.footer-buttons {
		display: flex;
		gap: 10px;
		margin-left: auto;
	}

	/* Dialog buttons */
	.dialog-button {
		border-radius: 6px;
		padding: 8px 16px;
		height: 38px;
		display: flex;
		align-items: center;
		justify-content: center;
		font-weight: 500;
	}

	/* Footer */
	.dashboard-footer {
		margin-top: auto;
		text-align: center;
		padding: 20px;
		color: #666;
		font-size: 14px;
	}

	.footer-link {
		color: var(--dotnet-primary);
		text-decoration: none;
		font-weight: 600;
		transition: color 0.2s ease;
	}

		.footer-link:hover {
			color: var(--dotnet-secondary);
			text-decoration: underline;
		}

	/* Loading Animation */
	.loader-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 100vh;
	}

	.circular-dots-loader {
		position: relative;
		width: 60px;
		height: 60px;
		margin-bottom: 15px;
	}

		.circular-dots-loader .dot {
			position: absolute;
			width: 12px;
			height: 12px;
			border-radius: 50%;
			animation: rotate 1.5s infinite linear;
		}

		.circular-dots-loader .dot-1 {
			background-color: var(--dotnet-primary);
			animation-delay: 0s;
		}

		.circular-dots-loader .dot-2 {
			background-color: var(--dotnet-accent);
			animation-delay: -0.5s;
		}

		.circular-dots-loader .dot-3 {
			background-color: var(--dotnet-secondary);
			animation-delay: -1s;
		}

	.loading-text {
		color: var(--dotnet-dark);
		font-size: 16px;
		margin-top: 10px;
	}

	/* Print Button Styling */
	.print-button-dialog {
		background-color: #17a2b8;
		color: white;
		padding: 10px 20px;
		border-radius: 8px;
		font-weight: 600;
		transition: all 0.2s ease;
		display: flex;
		align-items: center;
		justify-content: center;
	}

		.print-button-dialog:hover {
			background-color: #138496;
			transform: translateY(-2px);
			box-shadow: 0 4px 12px rgba(23, 162, 184, 0.3);
		}

	.print-icon {
		margin-right: 6px;
		font-size: 18px;
	}

	/* Animations */
	@@keyframes rotate {
		0% {
			transform: rotate(0deg) translate(-24px) rotate(0deg);
		}

		100% {
			transform: rotate(360deg) translate(-24px) rotate(-360deg);
		}
	}

	/* Toast Styling */
	::deep .e-toast-container {
		z-index: 1000;
	}

		::deep .e-toast-container .e-toast {
			border: 0;
			border-radius: 8px;
			box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
		}

	/* Success Toast */
	::deep .e-toast-success {
		background-color: #ebf7ee;
		border-left: 4px solid #4CAF50;
		color: #2E7D32;
	}

		::deep .e-toast-success .e-toast-title {
			color: #2E7D32;
			font-weight: 700;
		}

		::deep .e-toast-success .e-toast-content {
			color: #2E7D32;
		}

		::deep .e-toast-success .e-toast-close-icon {
			color: #2E7D32;
		}

		::deep .e-toast-success::before {
			content: "✓";
			font-size: 18px;
			font-weight: bold;
			position: absolute;
			left: 15px;
			top: 50%;
			transform: translateY(-50%);
		}

	/* Error Toast */
	::deep .e-toast-danger {
		background-color: #fdeeee;
		border-left: 4px solid #F44336;
		color: #C62828;
	}

		::deep .e-toast-danger .e-toast-title {
			color: #C62828;
			font-weight: 700;
		}

		::deep .e-toast-danger .e-toast-content {
			color: #C62828;
		}

		::deep .e-toast-danger .e-toast-close-icon {
			color: #C62828;
		}

		::deep .e-toast-danger::before {
			content: "⚠";
			font-size: 18px;
			font-weight: bold;
			position: absolute;
			left: 15px;
			top: 50%;
			transform: translateY(-50%);
		}

	/* Toast Animation */
	::deep .e-toast-container .e-toast {
		padding: 10px 10px 10px 40px;
		position: relative;
		animation-fill-mode: both;
	}

	/* Focus styles for better keyboard navigation */
	.accounting-container:focus {
		outline: 2px solid var(--dotnet-primary);
		outline-offset: 2px;
	}

	/* Enhanced grid row hover and selection for entry grid */
	.entry-grid ::deep .e-grid .e-row:hover {
		background-color: rgba(81, 43, 212, 0.1);
	}

	.entry-grid ::deep .e-grid .e-rowselect {
		background-color: var(--dotnet-primary);
		color: white;
	}

	/* Responsive Design */
	@@media (max-width: 992px) {
		.main-content {
			grid-template-columns: 1fr;
		}

		.action-buttons {
			flex-direction: row;
		}

		.action-button {
			flex-basis: calc(50% - 10px);
		}

		.balance-summary {
			flex-direction: column;
			gap: 15px;
		}

		.amount-entry-grid {
			grid-template-columns: 1fr;
		}
	}

	@@media (max-width: 768px) {
		.page-header {
			flex-direction: column;
			gap: 15px;
			align-items: flex-start;
		}

		.action-button {
			flex-basis: 100%;
		}

		.footer-buttons {
			flex-direction: column;
			width: 100%;
		}

			.footer-buttons .dialog-button {
				width: 100%;
			}

		.amount-entry-grid {
			grid-template-columns: 1fr;
		}
	}
</style>