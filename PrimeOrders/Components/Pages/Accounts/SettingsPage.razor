@page "/Accounts/Settings"
@using PrimeOrdersLibrary.Models.Common
@using PrimeOrdersLibrary.Models.Accounts.Masters

<PageTitle>Settings Management - Prime Orders</PageTitle>

<SfToast @ref="_sfSuccessToast"
		 ID="toast_success"
		 Title="Success"
		 Content="Settings saved successfully."
		 Timeout="1000"
		 ShowCloseButton="true"
		 CssClass="e-toast-success">
	<ToastPosition X="Right" Y="Top" />
	<ToastEvents Closed="() => NavManager.NavigateTo(NavManager.Uri, forceLoad: true)" />
	<ToastAnimationSettings>
		<ToastShowAnimationSettings Effect="ToastEffect.SlideRightIn" Duration="600" Easing="ToastEasing.Linear" />
		<ToastHideAnimationSettings Effect="ToastEffect.SlideRightOut" Duration="600" Easing="ToastEasing.Linear" />
	</ToastAnimationSettings>
</SfToast>

<SfToast @ref="_sfResetToast"
		 ID="toast_reset"
		 Title="Settings Reset"
		 Content="Settings have been reset to default values."
		 Timeout="2000"
		 ShowCloseButton="true"
		 CssClass="e-toast-info">
	<ToastPosition X="Right" Y="Top" />
	<ToastEvents Closed="() => NavManager.NavigateTo(NavManager.Uri, forceLoad: true)" />
	<ToastAnimationSettings>
		<ToastShowAnimationSettings Effect="ToastEffect.SlideRightIn" Duration="600" Easing="ToastEasing.Linear" />
		<ToastHideAnimationSettings Effect="ToastEffect.SlideRightOut" Duration="600" Easing="ToastEasing.Linear" />
	</ToastAnimationSettings>
</SfToast>

@if (_isLoading)
{
	<div class="loader-container">
		<div class="circular-dots-loader">
			<span class="dot dot-1"></span>
			<span class="dot dot-2"></span>
			<span class="dot dot-3"></span>
		</div>
		<p class="loading-text">Loading settings...</p>
	</div>
}
else
{
	<div class="settings-container">
		<div class="page-header">
			<h1 class="page-title">Settings Management</h1>
			<button @onclick='() => NavManager.NavigateTo("/Accounts-Dashboard")' class="back-button">
				<span class="back-icon">←</span> Back to Accounts
			</button>
		</div>

		<div class="settings-content">
			<div class="selection-card">
				<div class="card-header">
					<h2>Accounting Configuration</h2>
					<p class="card-info">Configure default vouchers and ledgers for accounting operations</p>
				</div>
				<div class="card-body">
					<div class="form-section">
						<h3>Voucher Settings</h3>
						<div class="form-row">
							<div class="form-group">
								<div class="label-with-description">
									<label>Sales Voucher</label>
									<span class="setting-description">@_settings.Where(_ => _.Key == SettingsKeys.SalesVoucherId).Select(_ => _.Description).FirstOrDefault()</span>
								</div>
								<SfComboBox TValue="int"
											TItem="VoucherModel"
											Placeholder="Select Sales Voucher"
											DataSource="@_vouchers"
											@bind-Value="_salesVoucherId"
											PopupWidth="100%"
											CssClass="form-control">
									<ComboBoxFieldSettings Value="Id" Text="Name" />
								</SfComboBox>
							</div>

							<div class="form-group">
								<div class="label-with-description">
									<label>Purchase Voucher</label>
									<span class="setting-description">@_settings.Where(_ => _.Key == SettingsKeys.PurchaseVoucherId).Select(_ => _.Description).FirstOrDefault()</span>
								</div>
								<SfComboBox TValue="int"
											TItem="VoucherModel"
											Placeholder="Select Purchase Voucher"
											DataSource="@_vouchers"
											@bind-Value="_purchaseVoucherId"
											PopupWidth="100%"
											CssClass="form-control">
									<ComboBoxFieldSettings Value="Id" Text="Name" />
								</SfComboBox>
							</div>
						</div>

						<div class="form-row">
							<div class="form-group">
								<div class="label-with-description">
									<label>Sale Return Voucher</label>
									<span class="setting-description">@_settings.Where(_ => _.Key == SettingsKeys.SaleReturnVoucherId).Select(_ => _.Description).FirstOrDefault()</span>
								</div>
								<SfComboBox TValue="int"
											TItem="VoucherModel"
											Placeholder="Select Sale Return Voucher"
											DataSource="@_vouchers"
											@bind-Value="_saleReturnVoucherId"
											PopupWidth="100%"
											CssClass="form-control">
									<ComboBoxFieldSettings Value="Id" Text="Name" />
								</SfComboBox>
							</div>
						</div>
					</div>

					<div class="form-section">
						<h3>Ledger Settings</h3>
						<div class="form-row">
							<div class="form-group">
								<div class="label-with-description">
									<label>Sales Ledger</label>
									<span class="setting-description">@_settings.Where(_ => _.Key == SettingsKeys.SaleLedgerId).Select(_ => _.Description).FirstOrDefault()</span>
								</div>
								<SfComboBox TValue="int"
											TItem="LedgerModel"
											Placeholder="Select Sales Ledger"
											DataSource="@_ledgers"
											@bind-Value="_saleLedgerId"
											PopupWidth="100%"
											CssClass="form-control">
									<ComboBoxFieldSettings Value="Id" Text="Name" />
								</SfComboBox>
							</div>

							<div class="form-group">
								<div class="label-with-description">
									<label>Purchase Ledger</label>
									<span class="setting-description">@_settings.Where(_ => _.Key == SettingsKeys.PurchaseLedgerId).Select(_ => _.Description).FirstOrDefault()</span>
								</div>
								<SfComboBox TValue="int"
											TItem="LedgerModel"
											Placeholder="Select Purchase Ledger"
											DataSource="@_ledgers"
											@bind-Value="_purchaseLedgerId"
											PopupWidth="100%"
											CssClass="form-control">
									<ComboBoxFieldSettings Value="Id" Text="Name" />
								</SfComboBox>
							</div>
						</div>

						<div class="form-row">
							<div class="form-group">
								<div class="label-with-description">
									<label>Cash Ledger</label>
									<span class="setting-description">@_settings.Where(_ => _.Key == SettingsKeys.CashLedgerId).Select(_ => _.Description).FirstOrDefault()</span>
								</div>
								<SfComboBox TValue="int"
											TItem="LedgerModel"
											Placeholder="Select Cash Ledger"
											DataSource="@_ledgers"
											@bind-Value="_cashLedgerId"
											PopupWidth="100%"
											CssClass="form-control">
									<ComboBoxFieldSettings Value="Id" Text="Name" />
								</SfComboBox>
							</div>

							<div class="form-group">
								<div class="label-with-description">
									<label>GST Ledger</label>
									<span class="setting-description">@_settings.Where(_ => _.Key == SettingsKeys.GSTLedgerId).Select(_ => _.Description).FirstOrDefault()</span>
								</div>
								<SfComboBox TValue="int"
											TItem="LedgerModel"
											Placeholder="Select GST Ledger"
											DataSource="@_ledgers"
											@bind-Value="_gstLedgerId"
											PopupWidth="100%"
											CssClass="form-control">
									<ComboBoxFieldSettings Value="Id" Text="Name" />
								</SfComboBox>
							</div>
						</div>
					</div>

					<div class="save-container">
						<button @onclick="OnSaveClick" class="save-button" disabled="@_isSaving">
							<span class="save-icon">💾</span> Save Settings
						</button>
						<button @onclick="OnResetClick" class="reset-button" disabled="@_isSaving">
							<span class="reset-icon">🔄</span> Reset to Defaults
						</button>
					</div>
				</div>
			</div>
		</div>

		<div class="dashboard-footer">
			<p>&copy; @DateTime.Now.Year A Product By <a href="https://aadisoft.vercel.app" target="_blank" class="footer-link">AadiSoft</a>. All rights reserved.</p>
		</div>
	</div>
}

<style>
	:root {
		--dotnet-primary: #512BD4;
		--dotnet-secondary: #68217A;
		--dotnet-accent: #00A4EF;
		--dotnet-light: #F7F7F7;
		--dotnet-dark: #1E1E1E;
		--dotnet-border: rgba(0, 0, 0, 0.1);
		--reset-color: #dc3545;
		--description-color: #6c757d;
	}

	/* General Layout */
	.settings-container {
		display: flex;
		flex-direction: column;
		min-height: 100vh;
		padding: 20px;
		background: linear-gradient(135deg, rgba(81, 43, 212, 0.05) 0%, rgba(104, 33, 122, 0.05) 100%);
	}

	/* Page Header */
	.page-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 25px;
	}

	.page-title {
		color: var(--dotnet-secondary);
		font-size: 28px;
		font-weight: 700;
		margin: 0;
	}

	.back-button {
		background-color: transparent;
		border: 2px solid var(--dotnet-secondary);
		color: var(--dotnet-secondary);
		padding: 8px 16px;
		border-radius: 8px;
		cursor: pointer;
		font-weight: 600;
		display: inline-flex;
		align-items: center;
		gap: 8px;
		transition: all 0.2s ease;
	}

		.back-button:hover {
			background-color: var(--dotnet-secondary);
			color: white;
		}

	.back-icon {
		font-size: 16px;
	}

	/* Content layout */
	.settings-content {
		display: flex;
		flex-direction: column;
		gap: 25px;
		margin-bottom: 30px;
	}

	/* Cards */
	.selection-card {
		background-color: white;
		border-radius: 15px;
		box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
		overflow: hidden;
	}

	.card-header {
		background-color: var(--dotnet-light);
		padding: 15px 20px;
		border-bottom: 1px solid rgba(0, 0, 0, 0.1);
	}

		.card-header h2 {
			margin: 0;
			color: var(--dotnet-secondary);
			font-size: 20px;
			font-weight: 600;
		}

	.card-info {
		margin: 5px 0 0 0;
		color: #666;
		font-size: 14px;
		font-style: italic;
	}

	.card-body {
		padding: 20px;
	}

	/* Form Sections */
	.form-section {
		margin-bottom: 30px;
		padding: 20px;
		background-color: var(--dotnet-light);
		border-radius: 8px;
		border-left: 4px solid var(--dotnet-primary);
	}

		.form-section h3 {
			margin: 0 0 20px 0;
			color: var(--dotnet-secondary);
			font-size: 18px;
			font-weight: 600;
		}

	/* Form Layout */
	.form-row {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 20px;
		margin-bottom: 15px;
	}

	.form-group {
		margin-bottom: 10px;
	}

		.form-group.full-width {
			grid-column: 1 / -1;
		}

	/* Label with Description */
	.label-with-description {
		margin-bottom: 8px;
	}

		.label-with-description label {
			display: block;
			font-weight: 600;
			color: var(--dotnet-dark);
			font-size: 14px;
			margin-bottom: 4px;
		}

	.setting-description {
		display: block;
		font-size: 12px;
		color: var(--description-color);
		font-style: italic;
		line-height: 1.4;
		margin-bottom: 8px;
		padding: 4px 8px;
		background-color: rgba(108, 117, 125, 0.1);
		border-radius: 4px;
		border-left: 3px solid var(--dotnet-accent);
	}

	.form-control {
		width: 100%;
		border-radius: 6px;
	}

	/* Button Styles */
	.save-container {
		display: flex;
		justify-content: flex-end;
		gap: 10px;
		margin-top: 30px;
		padding-top: 20px;
		border-top: 2px solid var(--dotnet-border);
	}

	.save-button {
		background-color: var(--dotnet-primary);
		color: white;
		border: none;
		padding: 12px 24px;
		border-radius: 8px;
		cursor: pointer;
		font-weight: 600;
		display: flex;
		align-items: center;
		gap: 8px;
		transition: all 0.2s ease;
	}

		.save-button:hover:not(:disabled) {
			background-color: #4311a8;
			transform: translateY(-2px);
		}

		.save-button:disabled {
			background-color: #a583c3;
			cursor: not-allowed;
			transform: none;
		}

	.reset-button {
		background-color: var(--reset-color);
		color: white;
		border: none;
		padding: 12px 24px;
		border-radius: 8px;
		cursor: pointer;
		font-weight: 600;
		display: flex;
		align-items: center;
		gap: 8px;
		transition: all 0.2s ease;
	}

		.reset-button:hover:not(:disabled) {
			background-color: #c82333;
			transform: translateY(-2px);
		}

		.reset-button:disabled {
			background-color: #f5c6cb;
			cursor: not-allowed;
			transform: none;
		}

	.save-icon, .reset-icon {
		font-size: 18px;
	}

	/* Footer */
	.dashboard-footer {
		margin-top: auto;
		text-align: center;
		padding: 20px;
		color: #666;
		font-size: 14px;
	}

	.footer-link {
		color: var(--dotnet-primary);
		text-decoration: none;
		font-weight: 600;
		transition: color 0.2s ease;
	}

		.footer-link:hover {
			color: var(--dotnet-secondary);
			text-decoration: underline;
		}

	/* Loading Animation */
	.loader-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 100vh;
	}

	.circular-dots-loader {
		position: relative;
		width: 60px;
		height: 60px;
		margin-bottom: 15px;
	}

		.circular-dots-loader .dot {
			position: absolute;
			width: 12px;
			height: 12px;
			border-radius: 50%;
			animation: rotate 1.5s infinite linear;
		}

		.circular-dots-loader .dot-1 {
			background-color: var(--dotnet-primary);
			animation-delay: 0s;
		}

		.circular-dots-loader .dot-2 {
			background-color: var(--dotnet-accent);
			animation-delay: -0.5s;
		}

		.circular-dots-loader .dot-3 {
			background-color: var(--dotnet-secondary);
			animation-delay: -1s;
		}

	.loading-text {
		color: var(--dotnet-dark);
		font-size: 16px;
		margin-top: 10px;
	}

	/* Toast Styling */
	::deep .e-toast-container {
		z-index: 1000;
	}

		::deep .e-toast-container .e-toast {
			border: 0;
			border-radius: 8px;
			box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
		}

	/* Success Toast */
	::deep .e-toast-success {
		background-color: #ebf7ee;
		border-left: 4px solid #4CAF50;
		color: #2E7D32;
	}

		::deep .e-toast-success .e-toast-title {
			color: #2E7D32;
			font-weight: 700;
		}

		::deep .e-toast-success .e-toast-content {
			color: #2E7D32;
		}

		::deep .e-toast-success .e-toast-close-icon {
			color: #2E7D32;
		}

		::deep .e-toast-success::before {
			content: "✓";
			font-size: 18px;
			font-weight: bold;
			position: absolute;
			left: 15px;
			top: 50%;
			transform: translateY(-50%);
		}

	/* Info Toast */
	::deep .e-toast-info {
		background-color: #e3f2fd;
		border-left: 4px solid #2196F3;
		color: #0d47a1;
	}

		::deep .e-toast-info .e-toast-title {
			color: #0d47a1;
			font-weight: 700;
		}

		::deep .e-toast-info .e-toast-content {
			color: #0d47a1;
		}

		::deep .e-toast-info .e-toast-close-icon {
			color: #0d47a1;
		}

		::deep .e-toast-info::before {
			content: "ℹ";
			font-size: 18px;
			font-weight: bold;
			position: absolute;
			left: 15px;
			top: 50%;
			transform: translateY(-50%);
		}

	/* Error Toast */
	::deep .e-toast-danger {
		background-color: #fdeeee;
		border-left: 4px solid #F44336;
		color: #C62828;
	}

		::deep .e-toast-danger .e-toast-title {
			color: #C62828;
			font-weight: 700;
		}

		::deep .e-toast-danger .e-toast-content {
			color: #C62828;
		}

		::deep .e-toast-danger .e-toast-close-icon {
			color: #C62828;
		}

		::deep .e-toast-danger::before {
			content: "⚠";
			font-size: 18px;
			font-weight: bold;
			position: absolute;
			left: 15px;
			top: 50%;
			transform: translateY(-50%);
		}

	/* Toast Animation */
	::deep .e-toast-container .e-toast {
		padding: 10px 10px 10px 40px;
		position: relative;
		animation-fill-mode: both;
	}

	/* Animations */
	@@keyframes rotate {
		0% {
			transform: rotate(0deg) translate(-24px) rotate(0deg);
		}

		100% {
			transform: rotate(360deg) translate(-24px) rotate(-360deg);
		}
	}

	/* Responsive Design */
	@@media (max-width: 768px) {
		.page-header {
			flex-direction: column;
			gap: 15px;
			align-items: flex-start;
		}

		.form-row {
			grid-template-columns: 1fr;
		}

		.save-container {
			flex-direction: column;
			gap: 10px;
		}
	}
</style>