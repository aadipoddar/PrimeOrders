@page "/SaleReturn"
@page "/SaleReturn/{SaleReturnId:int}"

<PageTitle>Sale Return - Prime Orders</PageTitle>

<SfToast @ref="_sfErrorToast"
		 ID="toast_error"
		 Title="Error"
		 Content="Some Error Message"
		 Timeout="3000"
		 ShowCloseButton="true"
		 CssClass="e-toast-danger">
	<ToastPosition X="Right" Y="Top" />
	<ToastAnimationSettings>
		<ToastShowAnimationSettings Effect="ToastEffect.SlideRightIn" Duration="600" Easing="ToastEasing.Linear" />
		<ToastHideAnimationSettings Effect="ToastEffect.SlideRightOut" Duration="600" Easing="ToastEasing.Linear" />
	</ToastAnimationSettings>
</SfToast>

<SfToast @ref="_sfSuccessToast"
		 ID="toast_success"
		 Title="Success"
		 Content="Sale return saved successfully."
		 Timeout="1000"
		 ShowCloseButton="true"
		 CssClass="e-toast-success">
	<ToastPosition X="Right" Y="Top" />
	<ToastEvents Closed='() => NavManager.NavigateTo("/SaleReturn", forceLoad: true)' />
	<ToastAnimationSettings>
		<ToastShowAnimationSettings Effect="ToastEffect.SlideRightIn" Duration="600" Easing="ToastEasing.Linear" />
		<ToastHideAnimationSettings Effect="ToastEffect.SlideRightOut" Duration="600" Easing="ToastEasing.Linear" />
	</ToastAnimationSettings>
</SfToast>

@if (_isLoading)
{
	<div class="loader-container">
		<div class="circular-dots-loader">
			<span class="dot dot-1"></span>
			<span class="dot dot-2"></span>
			<span class="dot dot-3"></span>
		</div>
		<p class="loading-text">Loading sale return page...</p>
	</div>
}
else
{
	<div class="purchase-container" tabindex="0">
		<!-- Product Search Indicator -->
		<div id="productSearchIndicator" class="product-search-indicator" style="display: none;">
			<div class="search-header">
				<span class="search-icon">🔍</span>
				<span>Product Search: </span>
				<span id="searchText" class="search-text"></span>
			</div>
			<div id="searchResults" class="search-results"></div>
			<div class="search-help">
				<span>↑↓ Navigate • Enter Select • Esc Cancel</span>
			</div>
		</div>

		<div class="page-header">
			<h1 class="page-title">Sale Return Management</h1>
			<button @onclick='() => NavManager.NavigateTo("/")' class="back-button">
				<span class="back-icon">←</span> Back to Dashboard
			</button>
		</div>

		<div class="action-buttons">
			<button @onclick="OnBillSelectionClick" class="action-button">
				<span class="action-icon">🧾</span> Select Sale Bill
			</button>
			<button @onclick="() => _returnDetailsDialogVisible = true" class="action-button">
				<span class="action-icon">📄</span> Return Details
			</button>
			<button @onclick="() => _returnSummaryDialogVisible = true" class="action-button action-button-primary">
				<span class="action-icon">📊</span> Complete Return
			</button>
		</div>

		@if (_selectedSaleId > 0)
		{
			<div class="selected-sale-info">
				<div class="info-card">
					<h3>Selected Sale Information</h3>
					<div class="sale-details">
						<div class="detail-item">
							<span class="detail-label">Bill No:</span>
							<span class="detail-value">@_selectedSale.BillNo</span>
						</div>
						<div class="detail-item">
							<span class="detail-label">Sale Date:</span>
							<span class="detail-value">@_selectedSale.SaleDateTime.ToString("dd-MMM-yyyy HH:mm")</span>
						</div>
						<div class="detail-item">
							<span class="detail-label">Products Available for Return:</span>
							<span class="detail-value">@_availableSaleProducts.Count</span>
						</div>
					</div>
				</div>
			</div>
		}

		<div class="main-content">
			<div class="card products-card">
				<div class="card-header">
					<h2>Products Selection</h2>
					@if (_selectedSaleId == 0)
					{
						<p class="card-info">Please select a sale bill first to see returnable products</p>
					}
					else
					{
						<p class="card-info">Press <kbd>F2</kbd> to search products, click Return button to add to return cart</p>
					}
				</div>
				<div class="card-body">
					@if (_selectedSaleId > 0)
					{
						<SfGrid DataSource="@(_isProductSearchActive? _filteredProducts : _products)"
								ID="_sfProductGrid"
								@ref="_sfProductGrid"
								AllowSorting="true"
								AllowResizing="true"
								AllowPaging="true"
								AllowFiltering="true"
								Height="450px"
								CssClass="modern-products-grid">
							<GridPageSettings PageSize="7" />
							<GridColumns>
								<GridColumn Field=@nameof(SaleReturnProductCartModel.ProductName) Width="100%" />
								<GridColumn AllowFiltering="false" />
								<GridColumn AllowFiltering="false" />
							</GridColumns>
							<GridTemplates>
								<RowTemplate>
									@{
										var product = (context as SaleReturnProductCartModel);
										var isSelected = _isProductSearchActive && product?.ProductId == _selectedProduct.ProductId;
										var availableProduct = _availableSaleProducts.FirstOrDefault(p => p.ProductId == product.ProductId);
									}
									<tr class="product-row @(isSelected ? "selected-product-row" : "")">
										<td class="product-name">
											<div class="name-wrapper">
												<span class="name-text" title="@product?.ProductName">@product?.ProductName</span>
											</div>
										</td>
										<td class="available-quantity">
											<div class="quantity-info">
												<span class="available-qty">@(availableProduct?.MaxQuantity.ToString("N2") ?? "0.00")</span>
												<span class="qty-details">
													Sold: @(availableProduct?.SoldQuantity.ToString("N2") ?? "0.00")<br />
													Returned: @(availableProduct?.AlreadyReturnedQuantity.ToString("N2") ?? "0.00")
												</span>
											</div>
										</td>
										<td class="product-action">
											<button class="add-to-cart-btn"
													@onclick="() => OnAddToCartButtonClick(product)"
													@onclick:stopPropagation="true"
													title="Add to Return"
													disabled="@(availableProduct?.MaxQuantity <= 0)">
												<span class="cart-icon">↩️</span>
												<span class="cart-text">Return</span>
											</button>
										</td>
									</tr>
								</RowTemplate>
							</GridTemplates>
						</SfGrid>
					}
					else
					{
						<div class="no-sale-selected">
							<div class="empty-state">
								<span class="empty-icon">📋</span>
								<h3>No Sale Selected</h3>
								<p>Please select a sale bill to view returnable products</p>
								<button @onclick="OnBillSelectionClick" class="select-bill-btn">
									<span class="btn-icon">🧾</span> Select Sale Bill
								</button>
							</div>
						</div>
					}
				</div>
			</div>

			<div class="card cart-card">
				<div class="card-header">
					<h2>Return Cart</h2>
					<p class="card-info">Click on a row to edit return quantity</p>
				</div>
				<div class="card-body">
					<SfGrid DataSource="@_saleReturnProductCart"
							ID="_sfProductCartGrid"
							@ref="_sfProductCartGrid"
							AllowSorting="true"
							AllowFiltering="true"
							AllowResizing="true"
							Height="450px"
							CssClass="cart-grid">
						<GridEvents RowSelected="ProductCartRowSelectHandler" TValue="SaleReturnProductCartModel" />
						<GridColumns>
							<GridColumn Field=@nameof(SaleReturnProductCartModel.ProductName) HeaderText="Product" Width="200" />
							<GridColumn Field=@nameof(SaleReturnProductCartModel.Quantity) HeaderText="Return Qty" Width="120" Format="N2" TextAlign="TextAlign.Right" />
							<GridColumn Field=@nameof(SaleReturnProductCartModel.MaxQuantity) HeaderText="Max Available" Width="140" Format="N2" TextAlign="TextAlign.Right" />
						</GridColumns>
					</SfGrid>
				</div>
			</div>
		</div>

		<div class="dashboard-footer">
			<p>&copy; @DateTime.Now.Year A Product By <a href="https://aadisoft.vercel.app" target="_blank" class="footer-link">AadiSoft</a>. All rights reserved.</p>
		</div>
	</div>
}

<!-- Bill Selection Dialog -->
<SfDialog ID="_sfBillSelectionDialog"
		  @ref="_sfBillSelectionDialog"
		  Width="900px"
		  Height="700px"
		  AllowDragging="true"
		  EnableResize="false"
		  @bind-Visible="_billSelectionDialogVisible"
		  IsModal="true">
	<DialogPositionData X="Center" Y="Center" />
	<DialogTemplates>
		<Header>
			<div class="dialog-header">
				<span>Select Sale Bill for Return</span>
			</div>
		</Header>
		<Content>
			<div class="dialog-content">
				<div class="filter-section">
					<div class="filters-row">
						<div class="form-group">
							<label>Date Range</label>
							<SfDateRangePicker Placeholder="Select date range"
											   StartDate="_startDate"
											   EndDate="_endDate"
											   Width="250px"
											   CssClass="form-control">
								<DateRangePickerEvents TValue="DateOnly" ValueChange="DateRangeChanged" />
							</SfDateRangePicker>
						</div>

						@if (_user.LocationId == 1)
						{
							<div class="form-group">
								<label>Return Location</label>
								<SfComboBox TValue="int"
											TItem="LocationModel"
											Placeholder="Select a Location"
											DataSource="@_locations"
											CssClass="form-control"
											@bind-Value="_saleReturn.LocationId">
									<ComboBoxEvents TItem="LocationModel" TValue="int" ValueChange="@OnLocationChanged" />
									<ComboBoxFieldSettings Value="Id" Text="Name" />
								</SfComboBox>
							</div>
						}
					</div>

					@if (_user.LocationId == 1)
					{
						<div class="location-info">
							<p class="info-text">
								<strong>Note:</strong> Products will be returned from the selected location back to the main warehouse. Change the location above to filter sales from different locations.
							</p>
						</div>
					}
				</div>

				<div class="sales-grid">
					<SfGrid DataSource="@_availableSales"
							AllowSorting="true"
							AllowFiltering="true"
							AllowPaging="true"
							Height="400px">
						<GridPageSettings PageSize="10" />
						<GridEvents RowSelected="(RowSelectEventArgs<SaleOverviewModel> args) => OnSaleSelected(new ChangeEventArgs<int, SaleOverviewModel> { Value = args.Data.SaleId })" TValue="SaleOverviewModel" />
						<GridColumns>
							<GridColumn Field=@nameof(SaleOverviewModel.BillNo) HeaderText="Bill No" Width="120" />
							<GridColumn Field=@nameof(SaleOverviewModel.SaleDateTime) HeaderText="Sale Date" Width="140" Format="dd/MM/yyyy HH:mm" />
							<GridColumn Field=@nameof(SaleOverviewModel.TotalProducts) HeaderText="Products" Width="100" TextAlign="TextAlign.Right" />
							<GridColumn Field=@nameof(SaleOverviewModel.TotalQuantity) HeaderText="Quantity" Width="100" Format="N2" TextAlign="TextAlign.Right" />
							<GridColumn Field=@nameof(SaleOverviewModel.Total) HeaderText="Total Amount" Width="130" Format="C2" TextAlign="TextAlign.Right" />
						</GridColumns>
					</SfGrid>
				</div>
			</div>
		</Content>
		<FooterTemplate>
			<div class="dialog-footer">
				<SfButton Content="Close" OnClick="() => _billSelectionDialogVisible = false" CssClass="dialog-button" />
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<!-- Return Details Dialog -->
<SfDialog ID="_sfReturnDetailsDialog"
		  @ref="_sfReturnDetailsDialog"
		  Width="500px"
		  Height="auto"
		  AllowDragging="true"
		  EnableResize="false"
		  @bind-Visible="_returnDetailsDialogVisible"
		  IsModal="true">
	<DialogPositionData X="Center" Y="Center" />
	<DialogTemplates>
		<Header>
			<div class="dialog-header">
				<span>Return Details</span>
			</div>
		</Header>
		<Content>
			<div class="dialog-content">
				<div class="form-group">
					<label>Transaction Number</label>
					<SfTextBox Value="@_saleReturn.TransactionNo"
							   Placeholder="Transaction Number"
							   Readonly=true
							   CssClass="form-control" />
				</div>

				<div class="form-group">
					<label>Return Date</label>
					<SfDatePicker Placeholder="Select Return Date"
								  @bind-Value="_saleReturn.ReturnDateTime"
								  CssClass="form-control" />
				</div>

				<div class="form-group full-width">
					<label>Remarks</label>
					<SfTextBox @bind-Value="_saleReturn.Remarks"
							   Placeholder="Add remarks (optional)"
							   Multiline="true"
							   CssClass="form-control" />
				</div>

				@if (SaleReturnId.HasValue && SaleReturnId > 0)
				{
					<div class="form-group">
						<div class="status-checkbox-container">
							<SfCheckBox @bind-Checked="_saleReturn.Status" Label="Active Status" CssClass="status-checkbox" />
						</div>
					</div>
				}
			</div>
		</Content>
		<FooterTemplate>
			<div class="dialog-footer">
				<SfButton Content="Close" OnClick="() => _returnDetailsDialogVisible = false" CssClass="dialog-button" />
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<!-- Return Summary Dialog -->
<SfDialog ID="_sfReturnSummaryDialog"
		  @ref="_sfReturnSummaryDialog"
		  Width="600px"
		  Height="auto"
		  AllowDragging="true"
		  EnableResize="false"
		  @bind-Visible="_returnSummaryDialogVisible"
		  IsModal="true">
	<DialogPositionData X="Center" Y="Center" />
	<DialogTemplates>
		<Header>
			<div class="dialog-header">
				<span>Return Summary</span>
			</div>
		</Header>
		<Content>
			<div class="dialog-content">
				<div class="confirm-section">
					<h3>Return Details</h3>
					<div class="detail-item">
						<span class="detail-label">Original Sale Bill:</span>
						<span class="detail-value">@_selectedSale.BillNo</span>
					</div>
					<div class="detail-item">
						<span class="detail-label">Transaction Number:</span>
						<span class="detail-value">@_saleReturn.TransactionNo</span>
					</div>
					<div class="detail-item">
						<span class="detail-label">Return Date:</span>
						<span class="detail-value">@_saleReturn.ReturnDateTime.ToString("dd-MMM-yyyy")</span>
					</div>
					@if (_user.LocationId == 1 && _locations.Any(l => l.Id == _saleReturn.LocationId))
					{
						<div class="detail-item">
							<span class="detail-label">Return Location:</span>
							<span class="detail-value">@_locations.First(l => l.Id == _saleReturn.LocationId).Name</span>
						</div>
					}
					@if (!string.IsNullOrEmpty(_saleReturn.Remarks))
					{
						<div class="detail-item remarks">
							<span class="detail-label">Remarks:</span>
							<span class="detail-value">@_saleReturn.Remarks</span>
						</div>
					}
				</div>

				<div class="confirm-section">
					<h3>Products to Return</h3>
					<div class="products-table-container">
						<table class="products-table">
							<thead>
								<tr>
									<th>Product</th>
									<th>Return Qty</th>
									<th>Max Available</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var item in _saleReturnProductCart)
								{
									<tr>
										<td>@item.ProductName</td>
										<td class="qty-column">@item.Quantity.ToString("N2")</td>
										<td class="qty-column">@item.MaxQuantity.ToString("N2")</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>

				<div class="confirm-message">
					<p>Are you sure you want to process this return?</p>
				</div>
			</div>
		</Content>
		<FooterTemplate>
			<div class="dialog-footer">
				<div class="footer-buttons">
					<SfButton Content="Process Return" IsPrimary="true" OnClick="ConfirmReturnSubmission" CssClass="save-button-dialog" Disabled="@_isSaving" />
					<SfButton Content="Edit Return" OnClick="() => _returnSummaryDialogVisible = false" CssClass="dialog-button" />
				</div>
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<!-- Quantity Dialog -->
<SfDialog ID="_sfQuantityDialog"
		  @ref="_sfQuantityDialog"
		  Width="400px"
		  Height="auto"
		  AllowDragging="true"
		  EnableResize="false"
		  @bind-Visible="_quantityDialogVisible"
		  IsModal="true">
	<DialogPositionData X="Center" Y="Center" />
	<DialogTemplates>
		<Header>
			<div class="dialog-header">
				<span>Return Quantity: </span>
				<span class="material-name">@_selectedProduct.ProductName</span>
			</div>
		</Header>
		<Content>
			<div class="dialog-content">
				@{
					var availableProduct = _availableSaleProducts.FirstOrDefault(p => p.ProductId == _selectedProduct.ProductId);
				}

				<div class="quantity-info-section">
					<div class="info-row">
						<span class="info-label">Originally Sold:</span>
						<span class="info-value">@(availableProduct?.SoldQuantity.ToString("N2") ?? "0.00")</span>
					</div>
					<div class="info-row">
						<span class="info-label">Already Returned:</span>
						<span class="info-value">@(availableProduct?.AlreadyReturnedQuantity.ToString("N2") ?? "0.00")</span>
					</div>
					<div class="info-row highlight">
						<span class="info-label">Available for Return:</span>
						<span class="info-value">@(availableProduct?.MaxQuantity.ToString("N2") ?? "0.00")</span>
					</div>
				</div>

				<div class="form-row">
					<div class="form-group full-width">
						<label>Return Quantity</label>
						<SfNumericTextBox TValue="decimal"
										  @bind-Value="_selectedQuantity"
										  Min="0"
										  Max="@(availableProduct?.MaxQuantity ?? 0)"
										  Format="N2"
										  CssClass="form-control" />
					</div>
				</div>
			</div>
		</Content>
		<FooterTemplate>
			<div class="dialog-footer">
				<div class="footer-buttons">
					<SfButton Content="Add to Return" IsPrimary="true" OnClick="OnAddToCartClick" CssClass="dialog-button" />
					<SfButton Content="Cancel" OnClick="OnCancelQuantityDialogClick" CssClass="dialog-button" />
				</div>
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<!-- Product Manage Dialog -->
<SfDialog ID="_sfProductManageDialog"
		  @ref="_sfProductManageDialog"
		  Width="500px"
		  Height="auto"
		  AllowDragging="true"
		  EnableResize="true"
		  @bind-Visible="_dialogVisible"
		  IsModal="true">
	<DialogPositionData X="Center" Y="Center" />
	<DialogTemplates>
		<Header>
			<div class="dialog-header">
				<span>Manage Product: </span>
				<span class="material-name">@_selectedProductCart.ProductName</span>
			</div>
		</Header>

		<Content>
			<div class="dialog-content">
				<div class="quantity-info-section">
					<div class="info-row">
						<span class="info-label">Originally Sold:</span>
						<span class="info-value">@_selectedProductCart.SoldQuantity.ToString("N2")</span>
					</div>
					<div class="info-row">
						<span class="info-label">Already Returned:</span>
						<span class="info-value">@_selectedProductCart.AlreadyReturnedQuantity.ToString("N2")</span>
					</div>
					<div class="info-row highlight">
						<span class="info-label">Max Available for Return:</span>
						<span class="info-value">@_selectedProductCart.MaxQuantity.ToString("N2")</span>
					</div>
				</div>

				<div class="form-row">
					<div class="form-group full-width">
						<label>Return Quantity</label>
						<SfNumericTextBox TValue="decimal"
										  @bind-Value="_selectedProductCart.Quantity"
										  Min="0"
										  Max="@_selectedProductCart.MaxQuantity"
										  Format="N2"
										  CssClass="form-control" />
					</div>
				</div>
			</div>
		</Content>

		<FooterTemplate>
			<div class="dialog-footer">
				<div class="footer-buttons">
					<SfButton Content="Save" IsPrimary="true" OnClick="OnSaveProductManageClick" CssClass="dialog-button" />
					<SfButton Content="Remove From Return" OnClick="OnRemoveFromCartProductManageClick" CssClass="dialog-button remove-button" />
				</div>
			</div>
		</FooterTemplate>
	</DialogTemplates>
</SfDialog>

<style>
	:root {
		--dotnet-primary: #512BD4;
		--dotnet-secondary: #68217A;
		--dotnet-accent: #00A4EF;
		--dotnet-light: #F7F7F7;
		--dotnet-dark: #1E1E1E;
		--dotnet-border: rgba(0, 0, 0, 0.1);
		--product-grid-border: #e1e5e9;
		--product-grid-hover: rgba(81, 43, 212, 0.08);
		--product-grid-selected: var(--dotnet-primary);
		--return-primary: #dc3545;
		--return-secondary: #c82333;
	}

	/* Selected Sale Info */
	.selected-sale-info {
		margin-bottom: 25px;
	}

	.info-card {
		background-color: white;
		border-radius: 12px;
		padding: 20px;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		border-left: 4px solid var(--return-primary);
	}

		.info-card h3 {
			margin: 0 0 15px 0;
			color: var(--return-secondary);
			font-size: 18px;
			font-weight: 600;
		}

	.sale-details {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 15px;
	}

	.detail-item {
		display: flex;
		flex-direction: column;
		gap: 5px;
	}

	.detail-label {
		font-weight: 600;
		color: var(--dotnet-dark);
		font-size: 14px;
	}

	.detail-value {
		color: var(--return-primary);
		font-size: 16px;
		font-weight: 500;
	}

	/* Available Quantity Column */
	.available-quantity {
		padding: 10px;
		vertical-align: middle;
		text-align: center;
	}

	.quantity-info {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 5px;
	}

	.available-qty {
		font-size: 18px;
		font-weight: 700;
		color: var(--return-primary);
	}

	.qty-details {
		font-size: 11px;
		color: #666;
		line-height: 1.2;
	}

	/* No Sale Selected State */
	.no-sale-selected {
		height: 450px;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.empty-state {
		text-align: center;
		padding: 40px;
	}

	.empty-icon {
		font-size: 64px;
		display: block;
		margin-bottom: 20px;
	}

	.empty-state h3 {
		color: var(--dotnet-secondary);
		margin-bottom: 10px;
	}

	.empty-state p {
		color: #666;
		margin-bottom: 20px;
	}

	.select-bill-btn {
		background-color: var(--return-primary);
		color: white;
		border: none;
		padding: 12px 24px;
		border-radius: 8px;
		font-weight: 600;
		cursor: pointer;
		display: inline-flex;
		align-items: center;
		gap: 8px;
		transition: all 0.2s ease;
	}

		.select-bill-btn:hover {
			background-color: var(--return-secondary);
			transform: translateY(-2px);
		}

	.btn-icon {
		font-size: 16px;
	}

	/* Bill Selection Dialog */
	.filter-section {
		background-color: var(--dotnet-light);
		padding: 20px;
		border-radius: 8px;
		margin-bottom: 20px;
	}

	.sales-grid {
		margin-top: 15px;
	}

	/* Quantity Info Section */
	.quantity-info-section {
		background-color: var(--dotnet-light);
		border-radius: 8px;
		padding: 15px;
		margin-bottom: 20px;
	}

	.info-row {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 8px 0;
		border-bottom: 1px solid var(--dotnet-border);
	}

		.info-row:last-child {
			border-bottom: none;
		}

		.info-row.highlight {
			background-color: rgba(220, 53, 69, 0.1);
			border-radius: 6px;
			padding: 12px;
			margin-top: 10px;
		}

	.info-label {
		font-weight: 600;
		color: var(--dotnet-dark);
	}

	.info-value {
		font-weight: 700;
		color: var(--return-primary);
	}

	/* Keyboard key styling */
	kbd {
		background-color: #f8f9fa;
		border: 1px solid #ced4da;
		border-radius: 3px;
		color: #495057;
		font-family: Monaco, Consolas, monospace;
		font-size: 10px;
		padding: 2px 4px;
		box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2);
	}

	/* Product Search Indicator */
	.product-search-indicator {
		position: fixed;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		background: var(--return-primary);
		color: white;
		padding: 20px;
		border-radius: 12px;
		box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
		z-index: 10000;
		min-width: 300px;
		text-align: center;
	}

	.location-info {
		background-color: #e3f2fd;
		border-left: 4px solid #2196f3;
		padding: 10px 15px;
		margin: 15px 0;
		border-radius: 4px;
	}

	.info-text {
		margin: 0;
		color: #1976d2;
		font-size: 14px;
		line-height: 1.4;
	}

	.search-header {
		font-size: 18px;
		font-weight: 600;
		margin-bottom: 10px;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 8px;
	}

	.search-icon {
		font-size: 20px;
	}

	.search-text {
		background: rgba(255, 255, 255, 0.2);
		padding: 4px 8px;
		border-radius: 4px;
		min-width: 100px;
		display: inline-block;
		margin-left: 8px;
	}

	.search-results {
		font-size: 14px;
		opacity: 0.9;
		margin: 10px 0;
	}

	.search-help {
		font-size: 12px;
		opacity: 0.8;
		border-top: 1px solid rgba(255, 255, 255, 0.3);
		padding-top: 10px;
		margin-top: 10px;
	}

	/* Modern Products Grid Styling */
	.modern-products-grid {
		border-radius: 12px;
		overflow: hidden;
		box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
		border: 1px solid var(--product-grid-border);
	}

	#_sfProductGrid.e-grid .e-gridheader .e-columnheader {
		display: none;
	}

	/* Custom Row Template Styling */
	.product-row {
		transition: all 0.2s ease;
		border-bottom: 1px solid var(--product-grid-border);
		cursor: pointer;
	}

		.product-row:hover {
			background-color: var(--product-grid-hover);
			transform: translateY(-1px);
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
		}

		.product-row:last-child {
			border-bottom: none;
		}

	/* Selected product row highlighting */
	.selected-product-row {
		background: linear-gradient(135deg, var(--return-primary) 0%, var(--return-secondary) 100%) !important;
		color: white !important;
		font-weight: 600 !important;
		box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
		transform: translateY(-2px);
	}

		.selected-product-row .name-text {
			color: white !important;
			font-weight: 700 !important;
		}

		.selected-product-row .available-qty {
			color: white !important;
			font-weight: 700 !important;
		}

		.selected-product-row .qty-details {
			color: rgba(255, 255, 255, 0.8) !important;
		}

		.selected-product-row .add-to-cart-btn {
			background-color: rgba(255, 255, 255, 0.9) !important;
			color: var(--return-primary) !important;
			border-color: rgba(255, 255, 255, 0.9) !important;
		}

			.selected-product-row .add-to-cart-btn:hover {
				background-color: white !important;
				transform: scale(1.1) !important;
			}

	/* Product Name Cell - Enhanced for better text display */
	.product-name {
		padding: 15px 12px;
		vertical-align: middle;
		width: auto;
		min-width: 200px;
	}

	.name-wrapper {
		display: flex;
		align-items: center;
		width: 100%;
		overflow: hidden;
	}

	.name-text {
		font-weight: 500;
		color: var(--dotnet-dark);
		font-size: 15px;
		line-height: 1.4;
		transition: all 0.2s ease;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
		width: 100%;
	}

	.product-row:hover .name-text {
		color: var(--return-primary);
		font-weight: 600;
		white-space: normal;
		overflow: visible;
		text-overflow: initial;
	}

	/* Product Action Cell */
	.product-action {
		padding: 15px 12px;
		vertical-align: middle;
		text-align: center;
		width: 120px;
	}

	.add-to-cart-btn {
		background-color: var(--return-primary);
		color: white;
		border: 2px solid var(--return-primary);
		padding: 8px 12px;
		border-radius: 8px;
		font-weight: 600;
		font-size: 12px;
		cursor: pointer;
		display: inline-flex;
		align-items: center;
		gap: 6px;
		transition: all 0.2s ease;
		white-space: nowrap;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

		.add-to-cart-btn:hover:not(:disabled) {
			background-color: var(--return-secondary);
			border-color: var(--return-secondary);
			transform: scale(1.1);
			box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
		}

		.add-to-cart-btn:active {
			transform: scale(0.95);
		}

		.add-to-cart-btn:disabled {
			background-color: #ccc;
			border-color: #ccc;
			cursor: not-allowed;
			opacity: 0.6;
		}

	.cart-icon {
		font-size: 14px;
	}

	.cart-text {
		font-weight: 700;
	}

	/* Grid Pagination Styling */
	.modern-products-grid ::deep .e-grid .e-pager {
		background-color: var(--dotnet-light);
		border-top: 1px solid var(--product-grid-border);
		padding: 12px;
	}

		.modern-products-grid ::deep .e-grid .e-pager .e-pagercontainer {
			background-color: transparent;
		}

		.modern-products-grid ::deep .e-grid .e-pager .e-numericitem {
			border-radius: 6px;
			margin: 0 2px;
			font-weight: 500;
			transition: all 0.2s ease;
		}

		.modern-products-grid ::deep .e-grid .e-pager .e-currentitem {
			background-color: var(--return-primary);
			color: white;
			font-weight: 600;
		}

	/* General Layout */
	.purchase-container {
		display: flex;
		flex-direction: column;
		min-height: 100vh;
		padding: 20px;
		background: linear-gradient(135deg, rgba(220, 53, 69, 0.05) 0%, rgba(200, 35, 51, 0.05) 100%);
	}

	/* Page Header */
	.page-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 20px;
	}

	.page-title {
		color: var(--return-secondary);
		font-size: 28px;
		font-weight: 700;
		margin: 0;
	}

	.back-button {
		background-color: transparent;
		border: 2px solid var(--return-secondary);
		color: var(--return-secondary);
		padding: 8px 16px;
		border-radius: 8px;
		cursor: pointer;
		font-weight: 600;
		display: inline-flex;
		align-items: center;
		gap: 8px;
		transition: all 0.2s ease;
	}

		.back-button:hover {
			background-color: var(--return-secondary);
			color: white;
		}

	.back-icon {
		font-size: 16px;
	}

	/* Action Buttons */
	.action-buttons {
		display: flex;
		gap: 15px;
		margin-bottom: 25px;
		flex-wrap: wrap;
	}

	.action-button {
		background-color: white;
		border: none;
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
		color: var(--return-secondary);
		padding: 12px 20px;
		border-radius: 8px;
		cursor: pointer;
		font-weight: 600;
		display: inline-flex;
		align-items: center;
		gap: 10px;
		transition: all 0.2s ease;
		flex: 1;
		min-width: 150px;
		justify-content: center;
	}

		.action-button:hover {
			transform: translateY(-3px);
			box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
		}

	.action-icon {
		font-size: 18px;
	}

	.action-button-primary {
		background-color: var(--return-primary);
		color: white;
	}

		.action-button-primary:hover {
			background-color: var(--return-secondary);
		}

	/* Main Content */
	.main-content {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 25px;
		margin-bottom: 30px;
	}

	/* Cards */
	.card {
		background-color: white;
		border-radius: 15px;
		box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
		overflow: hidden;
		height: 100%;
		display: flex;
		flex-direction: column;
	}

	.card-header {
		background-color: var(--dotnet-light);
		padding: 15px 20px;
		border-bottom: 1px solid var(--dotnet-border);
	}

		.card-header h2 {
			margin: 0;
			color: var(--return-secondary);
			font-size: 20px;
			font-weight: 600;
		}

	.card-info {
		margin: 5px 0 0 0;
		color: #666;
		font-size: 14px;
		font-style: italic;
	}

	.card-body {
		padding: 20px;
		flex-grow: 1;
		display: flex;
		flex-direction: column;
	}

	/* Cart Grid - keep existing styling */
	.cart-grid {
		border-radius: 8px;
		overflow: hidden;
		flex-grow: 1;
	}

		.cart-grid ::deep .e-grid .e-gridheader,
		.cart-grid ::deep .e-grid .e-gridheader {
			padding: 0;
			border-top: none;
		}

		.cart-grid ::deep .e-grid .e-rowcell {
			padding: 6px 8px;
			height: 36px;
		}

		.cart-grid ::deep .e-grid .e-headercell {
			padding: 8px 8px;
			height: 40px;
		}

		.cart-grid ::deep .e-grid .e-pager {
			padding: 4px;
		}

	/* Forms */
	.form-grid {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 15px;
	}

	.form-group {
		margin-bottom: 15px;
	}

	.full-width {
		grid-column: 1 / -1;
	}

	label {
		display: block;
		margin-bottom: 8px;
		font-weight: 500;
		color: var(--dotnet-dark);
	}

	.form-control {
		width: 100%;
		border-radius: 6px;
	}

	/* Button Styling */
	.save-button-dialog {
		background-color: var(--return-primary);
		color: white;
		padding: 10px 20px;
		border-radius: 8px;
		font-weight: 600;
		transition: all 0.2s ease;
	}

		.save-button-dialog:disabled {
			background-color: #f8959a;
			cursor: not-allowed;
			transform: none;
		}

		.save-button-dialog:hover {
			background-color: var(--return-secondary);
		}

	/* Remove Button Styling */
	.remove-button {
		background-color: #f44336;
		color: white;
		border: none;
		transition: all 0.2s ease;
	}

		.remove-button:hover {
			background-color: #d32f2f;
		}

	/* Dialog Styling */
	.dialog-header {
		font-size: 20px;
		font-weight: 600;
		color: var(--return-secondary);
		display: flex;
		align-items: center;
		gap: 8px;
	}

	.material-name {
		color: var(--return-primary);
		font-weight: 700;
	}

	.dialog-content {
		padding: 20px;
	}

	.form-row {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 20px;
		margin-bottom: 15px;
	}

	/* Dialog Footer */
	.dialog-footer {
		display: flex;
		justify-content: flex-end;
		align-items: center;
		padding: 15px 20px;
		background-color: var(--dotnet-light);
		border-top: 1px solid var(--dotnet-border);
	}

	.footer-buttons {
		display: flex;
		gap: 10px;
	}

	/* Dialog buttons */
	.dialog-button {
		border-radius: 6px;
		padding: 8px 16px;
		height: 38px;
		display: flex;
		align-items: center;
		justify-content: center;
		font-weight: 500;
	}

	/* Confirmation styles */
	.confirm-section {
		border-bottom: 1px solid var(--dotnet-border);
		padding-bottom: 15px;
		margin-bottom: 20px;
	}

		.confirm-section:last-child {
			border-bottom: none;
		}

		.confirm-section h3 {
			margin: 0 0 12px 0;
			color: var(--return-secondary);
			font-size: 18px;
			font-weight: 600;
		}

		.confirm-section .detail-item {
			display: flex;
			margin-bottom: 8px;
		}

		.confirm-section .detail-label {
			font-weight: 600;
			min-width: 140px;
			color: var(--dotnet-dark);
		}

		.confirm-section .detail-value {
			color: #333;
		}

	.remarks .detail-value {
		font-style: italic;
	}

	.products-table-container {
		max-height: 200px;
		overflow-y: auto;
		margin: 10px 0;
		border-radius: 6px;
		border: 1px solid var(--dotnet-border);
	}

	.products-table {
		width: 100%;
		border-collapse: collapse;
	}

		.products-table th {
			background-color: var(--dotnet-light);
			padding: 10px;
			text-align: left;
			position: sticky;
			top: 0;
			z-index: 1;
			border-bottom: 1px solid var(--dotnet-border);
		}

		.products-table td {
			padding: 8px 10px;
			border-bottom: 1px solid var(--dotnet-border);
		}

		.products-table tr:last-child td {
			border-bottom: none;
		}

	.qty-column {
		text-align: right;
	}

	.confirm-message {
		background-color: #ffebee;
		border-left: 4px solid var(--return-primary);
		padding: 10px 15px;
		margin: 10px 0;
		border-radius: 4px;
	}

		.confirm-message p {
			margin: 0;
			color: var(--return-secondary);
			font-weight: 500;
		}

	/* Filters Row */
	.filters-row {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 20px;
		margin-bottom: 15px;
	}

	@@media (max-width: 768px) {
		.filters-row {
			grid-template-columns: 1fr;
		}
	}


	/* Footer */
	.dashboard-footer {
		margin-top: auto;
		text-align: center;
		padding: 20px;
		color: #666;
		font-size: 14px;
	}

	.footer-link {
		color: var(--return-primary);
		text-decoration: none;
		font-weight: 600;
		transition: color 0.2s ease;
	}

		.footer-link:hover {
			color: var(--return-secondary);
			text-decoration: underline;
		}

	/* Loading Animation */
	.loader-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 100vh;
	}

	.circular-dots-loader {
		position: relative;
		width: 60px;
		height: 60px;
		margin-bottom: 15px;
	}

		.circular-dots-loader .dot {
			position: absolute;
			width: 12px;
			height: 12px;
			border-radius: 50%;
			animation: rotate 1.5s infinite linear;
		}

		.circular-dots-loader .dot-1 {
			background-color: var(--return-primary);
			animation-delay: 0s;
		}

		.circular-dots-loader .dot-2 {
			background-color: var(--dotnet-accent);
			animation-delay: -0.5s;
		}

		.circular-dots-loader .dot-3 {
			background-color: var(--return-secondary);
			animation-delay: -1s;
		}

	.loading-text {
		color: var(--dotnet-dark);
		font-size: 16px;
		margin-top: 10px;
	}

	/* Animations */
	@@keyframes rotate {
		0% {
			transform: rotate(0deg) translate(-24px) rotate(0deg);
		}

		100% {
			transform: rotate(360deg) translate(-24px) rotate(-360deg);
		}
	}

	/* Responsive Design */
	@@media (max-width: 992px) {
		.main-content {
			grid-template-columns: 1fr;
		}

		.action-buttons {
			flex-direction: row;
		}

		.action-button {
			flex-basis: calc(50% - 10px);
		}
	}

	@@media (max-width: 768px) {
		.page-header {
			flex-direction: column;
			gap: 15px;
			align-items: flex-start;
		}

		.form-row {
			grid-template-columns: 1fr;
		}

		.action-button {
			flex-basis: 100%;
		}

		.sale-details {
			grid-template-columns: 1fr;
		}
	}

	/* Status Checkbox Styling */
	.status-checkbox-container {
		display: flex;
		align-items: center;
		margin: 5px 0;
	}

	::deep .status-checkbox .e-frame {
		border-color: var(--return-primary);
	}

	::deep .status-checkbox .e-check {
		color: white;
	}

	::deep .status-checkbox .e-label {
		font-weight: 500;
		color: var(--dotnet-dark);
		margin-left: 8px;
	}

	/* Toast Styling */
	::deep .e-toast-container {
		z-index: 1000;
	}

		::deep .e-toast-container .e-toast {
			border: 0;
			border-radius: 8px;
			box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
		}

	/* Success Toast */
	::deep .e-toast-success {
		background-color: #ebf7ee;
		border-left: 4px solid #4CAF50;
		color: #2E7D32;
	}

		::deep .e-toast-success .e-toast-title {
			color: #2E7D32;
			font-weight: 700;
		}

		::deep .e-toast-success .e-toast-content {
			color: #2E7D32;
		}

		::deep .e-toast-success .e-toast-close-icon {
			color: #2E7D32;
		}

		::deep .e-toast-success::before {
			content: "✓";
			font-size: 18px;
			font-weight: bold;
			position: absolute;
			left: 15px;
			top: 50%;
			transform: translateY(-50%);
		}

	/* Error Toast */
	::deep .e-toast-danger {
		background-color: #fdeeee;
		border-left: 4px solid #F44336;
		color: #C62828;
	}

		::deep .e-toast-danger .e-toast-title {
			color: #C62828;
			font-weight: 700;
		}

		::deep .e-toast-danger .e-toast-content {
			color: #C62828;
		}

		::deep .e-toast-danger .e-toast-close-icon {
			color: #C62828;
		}

		::deep .e-toast-danger::before {
			content: "⚠";
			font-size: 18px;
			font-weight: bold;
			position: absolute;
			left: 15px;
			top: 50%;
			transform: translateY(-50%);
		}

	/* Toast Animation */
	::deep .e-toast-container .e-toast {
		padding: 10px 10px 10px 40px;
		position: relative;
		animation-fill-mode: both;
	}

	/* Focus styles for better keyboard navigation */
	.purchase-container:focus {
		outline: 2px solid var(--return-primary);
		outline-offset: 2px;
	}

	/* Enhanced grid row hover and selection for cart grid */
	.cart-grid ::deep .e-grid .e-row:hover {
		background-color: rgba(220, 53, 69, 0.1);
	}

	.cart-grid ::deep .e-grid .e-rowselect {
		background-color: var(--return-primary);
		color: white;
	}
</style>