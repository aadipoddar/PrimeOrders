using NumericWordsConversion;

using Syncfusion.Drawing;
using Syncfusion.Pdf;
using Syncfusion.Pdf.Graphics;
using Syncfusion.Pdf.Grid;

namespace PrimeOrdersLibrary.Data.Common;

public static class PDFExportUtil
{
	// Shared color constants
	public static readonly Color PrimaryColor = Color.FromArgb(81, 43, 212);
	public static readonly Color SecondaryColor = Color.FromArgb(104, 33, 122);
	public static readonly Color AccentColor = Color.FromArgb(0, 164, 239);
	public static readonly Color LightGray = Color.FromArgb(245, 245, 245);
	public static readonly Color DarkGray = Color.FromArgb(64, 64, 64);

	// Shared font constants
	public static readonly PdfStandardFont TitleFont = new(PdfFontFamily.Helvetica, 24, PdfFontStyle.Bold);
	public static readonly PdfStandardFont HeaderFont = new(PdfFontFamily.Helvetica, 16, PdfFontStyle.Bold);
	public static readonly PdfStandardFont SubHeaderFont = new(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold);
	public static readonly PdfStandardFont NormalFont = new(PdfFontFamily.Helvetica, 10);
	public static readonly PdfStandardFont BoldFont = new(PdfFontFamily.Helvetica, 10, PdfFontStyle.Bold);
	public static readonly PdfStandardFont SmallFont = new(PdfFontFamily.Helvetica, 8);

	public const float PageMargin = 20f;

	/// <summary>
	/// Creates a common PDF document header with customizable title
	/// </summary>
	public static PdfPageTemplateElement CreateHeader(PdfDocument doc, string headerTitle)
	{
		var headerRect = new RectangleF(0, 0, doc.Pages[0].GetClientSize().Width, 50);

		PdfPageTemplateElement header = new(headerRect);
		header.Graphics.DrawRectangle(new PdfSolidBrush(PrimaryColor), headerRect);

		PdfStringFormat format = new()
		{
			Alignment = PdfTextAlignment.Center,
			LineAlignment = PdfVerticalAlignment.Middle
		};

		header.Graphics.DrawString(headerTitle, TitleFont, PdfBrushes.White,
			new PointF(headerRect.Width / 2, headerRect.Height / 2), format);

		return header;
	}

	/// <summary>
	/// Creates a common PDF document footer with timestamp and pagination
	/// </summary>
	public static PdfPageTemplateElement CreateFooter(PdfDocument doc)
	{
		RectangleF rect = new(0, 0, doc.Pages[0].GetClientSize().Width, 10);

		PdfPageTemplateElement footer = new(rect);
		PdfPageNumberField pageNumber = new(SmallFont, new PdfSolidBrush(DarkGray));
		PdfPageCountField count = new(SmallFont, new PdfSolidBrush(DarkGray));

		string prefix = "Generated By ";
		string suffix = $" | Page {{0}} of {{1}} | Printed on: {DateTime.Now:dddd, MMMM dd, yyyy hh:mm tt}";

		PdfCompositeField compositeField = new()
		{
			Text = prefix + "https://aadisoft.vercel.app" + suffix,
			AutomaticFields = [pageNumber, count],
			Font = SmallFont,
			Brush = new PdfSolidBrush(DarkGray),
			Bounds = footer.Bounds,
			StringFormat = new()
			{
				Alignment = PdfTextAlignment.Center,
				LineAlignment = PdfVerticalAlignment.Middle
			}
		};

		compositeField.Draw(footer.Graphics);
		return footer;
	}

	/// <summary>
	/// Draws common company information section
	/// </summary>
	public static float DrawCompanyInformation(PdfPage pdfPage, string invoiceType)
	{
		RectangleF detailsRect = new(20, 10, pdfPage.GetClientSize().Width - 40, 80);
		pdfPage.Graphics.DrawRectangle(new PdfPen(LightGray, 1), new PdfSolidBrush(LightGray), detailsRect);

		pdfPage.Graphics.DrawString("Salasar Foods Guwahati", NormalFont, new PdfSolidBrush(DarkGray), new PointF(30, detailsRect.Y + 10));
		pdfPage.Graphics.DrawString("GST NO: XXXXXXX", NormalFont, new PdfSolidBrush(DarkGray), new PointF(30, detailsRect.Y + 25));
		pdfPage.Graphics.DrawString("Mobile No: XXXXXX", NormalFont, new PdfSolidBrush(DarkGray), new PointF(30, detailsRect.Y + 40));
		pdfPage.Graphics.DrawString("Email: info@primeorders.com", NormalFont, new PdfSolidBrush(DarkGray), new PointF(30, detailsRect.Y + 55));

		var invoiceTitleSize = HeaderFont.MeasureString(invoiceType);
		pdfPage.Graphics.DrawString(invoiceType, HeaderFont, new PdfSolidBrush(SecondaryColor), new PointF(pdfPage.GetClientSize().Width - invoiceTitleSize.Width - 30, detailsRect.Y + 30));

		return detailsRect.Height + detailsRect.Y + 20;
	}

	/// <summary>
	/// Creates and configures a PDF grid with common styling
	/// </summary>
	public static PdfGrid CreateStyledGrid<T>(IEnumerable<T> dataSource, float[] columnWidths, PdfTextAlignment[] columnAlignments)
	{
		PdfGrid pdfGrid = new()
		{
			DataSource = dataSource.ToList()
		};

		// Set column widths
		for (int i = 0; i < columnWidths.Length && i < pdfGrid.Columns.Count; i++)
			pdfGrid.Columns[i].Width = columnWidths[i];

		// Apply header styling
		pdfGrid.Headers.ApplyStyle(new PdfGridCellStyle
		{
			Font = BoldFont,
			TextBrush = PdfBrushes.White,
			CellPadding = new PdfPaddings(5, 5, 5, 5),
			BackgroundBrush = new PdfSolidBrush(PrimaryColor),
			Borders = new PdfBorders { All = new PdfPen(Color.Black, 0.5f) }
		});

		// Apply alternating row colors
		int index = 0;
		foreach (var row in pdfGrid.Rows)
		{
			index++;
			if (index % 2 == 0)
				row.Style.BackgroundBrush = new PdfSolidBrush(LightGray);
			else
				row.Style.BackgroundBrush = new PdfSolidBrush(Color.White);
		}

		// Apply grid styling
		pdfGrid.Style = new()
		{
			Font = NormalFont,
			TextBrush = PdfBrushes.Black,
			CellPadding = new PdfPaddings(5, 5, 5, 5),
		};

		// Set column alignments
		for (int i = 0; i < columnAlignments.Length && i < pdfGrid.Columns.Count; i++)
			pdfGrid.Columns[i].Format = new(columnAlignments[i], PdfVerticalAlignment.Middle);

		return pdfGrid;
	}

	/// <summary>
	/// Draws a summary section with financial totals
	/// </summary>
	public static float DrawSummarySection(PdfDocument pdfDocument, PdfPage pdfPage, float currentY,
		Dictionary<string, string> summaryItems, decimal grandTotal, string additionalInfo = null)
	{
		// Check if page has space for summary
		if (currentY + 250 > pdfPage.GetClientSize().Height - PageMargin)
		{
			pdfDocument.Pages.Add();
			pdfPage = pdfDocument.Pages[pdfDocument.Pages.Count - 1];
			currentY = PageMargin;
		}

		var summaryWidth = 250f;
		var summaryX = pdfPage.GetClientSize().Width - summaryWidth - 20;
		var summaryHeight = 250f;

		var summaryRect = new RectangleF(summaryX, currentY, summaryWidth, summaryHeight);
		pdfPage.Graphics.DrawRectangle(new PdfPen(Color.Black, 1), new PdfSolidBrush(LightGray), summaryRect);

		var summaryY = currentY + 10;
		pdfPage.Graphics.DrawString("Summary", SubHeaderFont, new PdfSolidBrush(PrimaryColor), new PointF(summaryX + 10, summaryY));

		summaryY += 25;

		// Draw summary items
		foreach (var item in summaryItems)
			if (!string.IsNullOrEmpty(item.Value))
			{
				summaryY += 15;
				DrawSummaryLine(pdfPage, item.Key, item.Value, summaryWidth, summaryX, summaryY);
			}

		// Draw grand total
		summaryY += 25;
		var grandTotalRect = new RectangleF(summaryX + 5, summaryY - 5, summaryWidth - 10, 25);
		pdfPage.Graphics.DrawRectangle(new PdfPen(PrimaryColor, 2), new PdfSolidBrush(PrimaryColor), grandTotalRect);
		pdfPage.Graphics.DrawString("Grand Total: ", new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold),
			PdfBrushes.White, new PointF(summaryX + 10, summaryY));

		var grandTotalText = grandTotal.FormatIndianCurrency();
		var grandTotalFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold);
		var grandTotalSize = grandTotalFont.MeasureString(grandTotalText);

		pdfPage.Graphics.DrawString(grandTotalText, grandTotalFont,
			PdfBrushes.White, new PointF(summaryX + summaryWidth - grandTotalSize.Width - 15, summaryY));

		// Draw amount in words
		summaryY += 30;
		var amountInWords = grandTotal.ToNumericWords();
		if (string.IsNullOrEmpty(amountInWords))
			amountInWords = "Zero";
		amountInWords += " Rupees Only";

		var availableWidth = summaryWidth - 20;
		DrawWrappedText(pdfPage, amountInWords, BoldFont, new PdfSolidBrush(PrimaryColor),
						new RectangleF(summaryX + 10, summaryY, availableWidth, 50),
						PdfTextAlignment.Left, ref summaryY);

		// Draw additional info if provided
		if (!string.IsNullOrEmpty(additionalInfo))
		{
			summaryY += 20;
			DrawSummaryLine(pdfPage, "Payment Mode: ", additionalInfo, summaryWidth, summaryX, summaryY);
		}

		return summaryRect.Height + summaryRect.Y + 20;
	}

	/// <summary>
	/// Draws wrapped text within specified bounds
	/// </summary>
	public static void DrawWrappedText(PdfPage pdfPage, string text, PdfFont font, PdfBrush brush,
		RectangleF bounds, PdfTextAlignment alignment, ref float currentY)
	{
		const float lineSpacing = 15f;
		string[] words = text.Split(' ');
		string line = string.Empty;

		foreach (string word in words)
		{
			string testLine = string.IsNullOrEmpty(line) ? word : line + " " + word;
			SizeF testSize = font.MeasureString(testLine);

			if (testSize.Width <= bounds.Width)
				line = testLine;
			else
			{
				PdfStringFormat format = new() { Alignment = alignment };
				pdfPage.Graphics.DrawString(line, font, brush, new RectangleF(bounds.X, currentY, bounds.Width, bounds.Height), format);
				currentY += lineSpacing;
				line = word;
			}
		}

		if (!string.IsNullOrEmpty(line))
		{
			PdfStringFormat format = new() { Alignment = alignment };
			pdfPage.Graphics.DrawString(line, font, brush, new RectangleF(bounds.X, currentY, bounds.Width, bounds.Height), format);
			currentY += lineSpacing;
		}
	}

	/// <summary>
	/// Draws a summary line with label and value
	/// </summary>
	public static void DrawSummaryLine(PdfPage pdfPage, string label, string value, float summaryWidth, float summaryX, float summaryY)
	{
		pdfPage.Graphics.DrawString(label, NormalFont, PdfBrushes.Black, new PointF(summaryX + 10, summaryY));
		pdfPage.Graphics.DrawString(value, BoldFont, new PdfSolidBrush(SecondaryColor),
			new PointF(summaryX + summaryWidth - BoldFont.MeasureString(value).Width - 15, summaryY));
	}

	/// <summary>
	/// Draws invoice details section with left and right column layout
	/// </summary>
	public static float DrawInvoiceDetailsSection(PdfPage pdfPage, float currentY, string sectionTitle,
		Dictionary<string, string> leftColumnDetails, Dictionary<string, string> rightColumnDetails)
	{
		var detailsRect = new RectangleF(20, currentY, pdfPage.GetClientSize().Width - 40, 90);
		pdfPage.Graphics.DrawRectangle(new PdfPen(Color.Black, 1), detailsRect);

		var leftX = 30;
		var rightX = pdfPage.GetClientSize().Width / 2 + 20;
		var detailY = currentY + 10;

		// Section title
		pdfPage.Graphics.DrawString(sectionTitle, SubHeaderFont, new PdfSolidBrush(PrimaryColor), new PointF(leftX, detailY));

		// Left column details
		detailY += 25;
		foreach (var detail in leftColumnDetails)
		{
			if (!string.IsNullOrEmpty(detail.Value))
			{
				pdfPage.Graphics.DrawString($"{detail.Key}: ", NormalFont, PdfBrushes.Black, new PointF(leftX, detailY));
				pdfPage.Graphics.DrawString(detail.Value, BoldFont, new PdfSolidBrush(SecondaryColor), new PointF(leftX + 60, detailY));
				detailY += 15;
			}
		}

		// Right column details
		detailY = currentY + 35;
		foreach (var detail in rightColumnDetails)
			if (!string.IsNullOrEmpty(detail.Value))
			{
				pdfPage.Graphics.DrawString($"{detail.Key}: ", NormalFont, PdfBrushes.Black, new PointF(rightX, detailY));

				// Handle longer text for cash discount
				var valueWidth = detail.Key.Contains("Cash Discount") ? 100 : 60;
				pdfPage.Graphics.DrawString(detail.Value, BoldFont, new PdfSolidBrush(SecondaryColor), new PointF(rightX + valueWidth, detailY));
				detailY += 15;
			}

		return detailsRect.Height + detailsRect.Y + 20;
	}

	/// <summary>
	/// Creates a new PDF document with A4 size and templates
	/// </summary>
	public static (PdfDocument document, PdfPage page) CreateA4Document(string headerTitle)
	{
		var pdfDocument = new PdfDocument();
		var pdfPage = pdfDocument.Pages.Add();
		pdfDocument.PageSettings.Size = PdfPageSize.A4;

		pdfDocument.Template.Top = CreateHeader(pdfDocument, headerTitle);
		pdfDocument.Template.Bottom = CreateFooter(pdfDocument);

		return (pdfDocument, pdfPage);
	}

	/// <summary>
	/// Finalizes PDF document and returns as MemoryStream
	/// </summary>
	public static MemoryStream FinalizePdfDocument(PdfDocument pdfDocument)
	{
		var stream = new MemoryStream();
		pdfDocument.Save(stream);
		pdfDocument.Close();
		return stream;
	}
}