using NumericWordsConversion;

using PrimeOrdersLibrary.Data.Common;
using PrimeOrdersLibrary.Models.Inventory;

using Syncfusion.Drawing;
using Syncfusion.Pdf;
using Syncfusion.Pdf.Graphics;
using Syncfusion.Pdf.Grid;

namespace PrimeOrdersLibrary.Data.Inventory.Purchase;

public static class PurchaseA4Print
{
	private static readonly Color _primaryColor = Color.FromArgb(81, 43, 212);
	private static readonly Color _secondaryColor = Color.FromArgb(104, 33, 122);
	private static readonly Color _accentColor = Color.FromArgb(0, 164, 239);
	private static readonly Color _lightGray = Color.FromArgb(245, 245, 245);
	private static readonly Color _darkGray = Color.FromArgb(64, 64, 64);

	private static readonly PdfStandardFont _titleFont = new(PdfFontFamily.Helvetica, 24, PdfFontStyle.Bold);
	private static readonly PdfStandardFont _headerFont = new(PdfFontFamily.Helvetica, 16, PdfFontStyle.Bold);
	private static readonly PdfStandardFont _subHeaderFont = new(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold);
	private static readonly PdfStandardFont _normalFont = new(PdfFontFamily.Helvetica, 10);
	private static readonly PdfStandardFont _boldFont = new(PdfFontFamily.Helvetica, 10, PdfFontStyle.Bold);
	private static readonly PdfStandardFont _smallFont = new(PdfFontFamily.Helvetica, 8);

	private const float _pageMargin = 20f;

	public static async Task<MemoryStream> GenerateA4PurchaseBill(int purchaseId)
	{
		var purchase = await PurchaseData.LoadPurchaseOverviewByPurchaseId(purchaseId);

		using var pdfDocument = new PdfDocument();
		var pdfPage = pdfDocument.Pages.Add();

		pdfDocument.PageSettings.Size = PdfPageSize.A4;

		var purchaseDetails = await PurchaseData.LoadPurchaseDetailByPurchase(purchaseId);
		List<PurchaseRawMaterialCartModel> purchaseDetailCartModel = [];
		foreach (var item in purchaseDetails)
			purchaseDetailCartModel.Add(new()
			{
				RawMaterialId = item.RawMaterialId,
				RawMaterialName = (await CommonData.LoadTableDataById<RawMaterialModel>(TableNames.RawMaterial, item.RawMaterialId)).Name,
				Quantity = item.Quantity,
				MeasurementUnit = item.MeasurementUnit,
				Rate = item.Rate,
				BaseTotal = item.BaseTotal,
				DiscPercent = item.DiscPercent,
				DiscAmount = item.DiscAmount,
				AfterDiscount = item.AfterDiscount,
				CGSTPercent = item.CGSTPercent,
				CGSTAmount = item.CGSTAmount,
				SGSTPercent = item.SGSTPercent,
				SGSTAmount = item.SGSTAmount,
				IGSTPercent = item.IGSTPercent,
				IGSTAmount = item.IGSTAmount,
				Total = item.Total,
				NetRate = item.NetRate
			});

		pdfDocument.Template.Top = DrawHeader(pdfDocument, purchase.SupplierName);
		pdfDocument.Template.Bottom = DrawFooter(pdfDocument);

		float currentY = DrawCompanyInformation(pdfPage, "PURCHASE INVOICE");
		currentY = DrawInvoiceDetails(pdfPage, currentY, purchase);
		var result = DrawItemDetails(pdfPage, currentY, purchaseDetailCartModel);
		currentY = DrawSummary(pdfDocument, result.Page, result.Bounds.Bottom + 20, purchase);

		using var stream = new MemoryStream();
		pdfDocument.Save(stream);
		pdfDocument.Close();
		return stream;
	}

	private static PdfPageTemplateElement DrawHeader(PdfDocument doc, string supplierName)
	{
		var headerRect = new RectangleF(0, 0, doc.Pages[0].GetClientSize().Width, 50);

		PdfPageTemplateElement header = new(headerRect);
		header.Graphics.DrawRectangle(new PdfSolidBrush(_primaryColor), headerRect);

		PdfStringFormat format = new()
		{
			Alignment = PdfTextAlignment.Center,
			LineAlignment = PdfVerticalAlignment.Middle
		};

		header.Graphics.DrawString($"Purchase from {supplierName}", _titleFont, PdfBrushes.White,
			new PointF(headerRect.Width / 2, headerRect.Height / 2), format);

		return header;
	}

	private static PdfPageTemplateElement DrawFooter(PdfDocument doc)
	{
		RectangleF rect = new(0, 0, doc.Pages[0].GetClientSize().Width, 10);

		PdfPageTemplateElement footer = new(rect);
		PdfPageNumberField pageNumber = new(_smallFont, new PdfSolidBrush(_darkGray));
		PdfPageCountField count = new(_smallFont, new PdfSolidBrush(_darkGray));

		string prefix = "Generated By ";
		string suffix = $" | Page {{0}} of {{1}} | Printed on: {DateTime.Now:dddd, MMMM dd, yyyy hh:mm tt}";

		PdfCompositeField compositeField = new()
		{
			Text = prefix + "https://aadisoft.vercel.app" + suffix,
			AutomaticFields = [pageNumber, count],
			Font = _smallFont,
			Brush = new PdfSolidBrush(_darkGray),
			Bounds = footer.Bounds,
			StringFormat = new()
			{
				Alignment = PdfTextAlignment.Center,
				LineAlignment = PdfVerticalAlignment.Middle
			}
		};

		compositeField.Draw(footer.Graphics);
		return footer;
	}

	private static float DrawCompanyInformation(PdfPage pdfPage, string invoiceType)
	{
		RectangleF detailsRect = new(20, 60, pdfPage.GetClientSize().Width - 40, 80);
		pdfPage.Graphics.DrawRectangle(new PdfPen(_lightGray, 1), new PdfSolidBrush(_lightGray), detailsRect);

		pdfPage.Graphics.DrawString("Salasar Foods Guwahati", _normalFont, new PdfSolidBrush(_darkGray), new PointF(30, detailsRect.Y + 10));
		pdfPage.Graphics.DrawString("GST NO: XXXXXXX", _normalFont, new PdfSolidBrush(_darkGray), new PointF(30, detailsRect.Y + 25));
		pdfPage.Graphics.DrawString("Mobile No: XXXXXX", _normalFont, new PdfSolidBrush(_darkGray), new PointF(30, detailsRect.Y + 40));
		pdfPage.Graphics.DrawString("Email: info@primeorders.com", _normalFont, new PdfSolidBrush(_darkGray), new PointF(30, detailsRect.Y + 55));

		var invoiceTitleSize = _headerFont.MeasureString(invoiceType);
		pdfPage.Graphics.DrawString(invoiceType, _headerFont, new PdfSolidBrush(_secondaryColor), new PointF(pdfPage.GetClientSize().Width - invoiceTitleSize.Width - 30, detailsRect.Y + 30));

		return detailsRect.Height + detailsRect.Y + 20;
	}

	private static float DrawInvoiceDetails(PdfPage pdfPage, float currentY, PurchaseOverviewModel purchase)
	{
		var detailsRect = new RectangleF(20, currentY, pdfPage.GetClientSize().Width - 40, 90);
		pdfPage.Graphics.DrawRectangle(new PdfPen(Color.Black, 1), detailsRect);

		// Left side details
		var leftX = 30;
		var rightX = pdfPage.GetClientSize().Width / 2 + 20;
		var detailY = currentY + 10;

		pdfPage.Graphics.DrawString("Purchase Details", _subHeaderFont, new PdfSolidBrush(_primaryColor), new PointF(leftX, detailY));

		detailY += 25;
		pdfPage.Graphics.DrawString("Invoice No: ", _normalFont, PdfBrushes.Black, new PointF(leftX, detailY));
		pdfPage.Graphics.DrawString($"{purchase.BillNo ?? "N/A"}", _boldFont, new PdfSolidBrush(_secondaryColor), new PointF(leftX + 60, detailY));

		detailY += 15;
		pdfPage.Graphics.DrawString("Date: ", _normalFont, PdfBrushes.Black, new PointF(leftX, detailY));
		pdfPage.Graphics.DrawString($"{purchase.BillDate:dddd, MMMM dd, yyyy}", _boldFont, new PdfSolidBrush(_secondaryColor), new PointF(leftX + 60, detailY));

		detailY += 15;
		pdfPage.Graphics.DrawString("User: ", _normalFont, PdfBrushes.Black, new PointF(leftX, detailY));
		pdfPage.Graphics.DrawString($"{purchase.UserName ?? "N/A"}", _boldFont, new PdfSolidBrush(_secondaryColor), new PointF(leftX + 60, detailY));

		// Right side details
		detailY = currentY + 35;
		pdfPage.Graphics.DrawString("Supplier: ", _normalFont, PdfBrushes.Black, new PointF(rightX, detailY));
		pdfPage.Graphics.DrawString($"{purchase.SupplierName ?? "N/A"}", _boldFont, new PdfSolidBrush(_secondaryColor), new PointF(rightX + 60, detailY));

		detailY += 15;
		if (purchase.CashDiscountPercent > 0)
		{
			pdfPage.Graphics.DrawString($"Cash Discount ({purchase.CashDiscountPercent:N1}%): ", _normalFont, PdfBrushes.Black, new PointF(rightX, detailY));
			pdfPage.Graphics.DrawString($"{purchase.CashDiscountAmount.FormatIndianCurrency()}", _boldFont, new PdfSolidBrush(_secondaryColor), new PointF(rightX + 100, detailY));
		}

		detailY += 15;
		if (!string.IsNullOrEmpty(purchase.Remarks))
		{
			pdfPage.Graphics.DrawString("Remarks: ", _normalFont, PdfBrushes.Black, new PointF(rightX, detailY));
			pdfPage.Graphics.DrawString($"{purchase.Remarks ?? "N/A"}", _boldFont, new PdfSolidBrush(_secondaryColor), new PointF(rightX + 60, detailY));
		}

		return detailsRect.Height + detailsRect.Y + 20;
	}

	private static PdfGridLayoutResult DrawItemDetails(PdfPage pdfPage, float currentY, List<PurchaseRawMaterialCartModel> purchaseDetails)
	{
		PdfGrid pdfGrid = new()
		{
			DataSource = purchaseDetails.Select((item, index) => new
			{
				SNo = index + 1,
				Name = item.RawMaterialName.ToString(),
				Qty = item.Quantity.ToString("N2"),
				Unit = item.MeasurementUnit,
				Rate = (int)item.Rate,
				Amount = (int)item.BaseTotal,
				Total = (int)item.Total
			}).ToList()
		};

		var tableWidth = pdfPage.GetClientSize().Width - _pageMargin * 2;
		pdfGrid.Columns[0].Width = tableWidth * 0.08f; // S.No
		pdfGrid.Columns[1].Width = tableWidth * 0.35f; // Name
		pdfGrid.Columns[2].Width = tableWidth * 0.12f; // Qty
		pdfGrid.Columns[3].Width = tableWidth * 0.08f; // Unit
		pdfGrid.Columns[4].Width = tableWidth * 0.15f; // Rate
		pdfGrid.Columns[5].Width = tableWidth * 0.11f; // Amount
		pdfGrid.Columns[6].Width = tableWidth * 0.11f; // Total

		pdfGrid.Headers.ApplyStyle(new PdfGridCellStyle
		{
			Font = _boldFont,
			TextBrush = PdfBrushes.White,
			CellPadding = new PdfPaddings(5, 5, 5, 5),
			BackgroundBrush = new PdfSolidBrush(_primaryColor),
			Borders = new PdfBorders { All = new PdfPen(Color.Black, 0.5f) }
		});

		int index = 0;
		foreach (var row in pdfGrid.Rows)
		{
			index++;
			if (index % 2 == 0)
				row.Style.BackgroundBrush = new PdfSolidBrush(_lightGray);
			else
				row.Style.BackgroundBrush = new PdfSolidBrush(Color.White);
		}

		pdfGrid.Style = new()
		{
			Font = _normalFont,
			TextBrush = PdfBrushes.Black,
			CellPadding = new PdfPaddings(5, 5, 5, 5),
		};

		pdfGrid.Columns[0].Format = new(PdfTextAlignment.Center, PdfVerticalAlignment.Middle);
		pdfGrid.Columns[1].Format = new(PdfTextAlignment.Left, PdfVerticalAlignment.Middle);
		pdfGrid.Columns[2].Format = new(PdfTextAlignment.Center, PdfVerticalAlignment.Middle);
		pdfGrid.Columns[3].Format = new(PdfTextAlignment.Center, PdfVerticalAlignment.Middle);
		pdfGrid.Columns[4].Format = new(PdfTextAlignment.Right, PdfVerticalAlignment.Middle);
		pdfGrid.Columns[5].Format = new(PdfTextAlignment.Right, PdfVerticalAlignment.Middle);
		pdfGrid.Columns[6].Format = new(PdfTextAlignment.Right, PdfVerticalAlignment.Middle);

		var result = pdfGrid.Draw(pdfPage, new RectangleF(_pageMargin, currentY, tableWidth, pdfPage.GetClientSize().Height - currentY - _pageMargin));

		return result;
	}

	private static float DrawSummary(PdfDocument pdfDocument, PdfPage pdfPage, float currentY, PurchaseOverviewModel purchase)
	{
		// If the page has space for the summary, draw it
		if (currentY + 250 > pdfPage.GetClientSize().Height - _pageMargin)
		{
			pdfDocument.Pages.Add();
			pdfPage = pdfDocument.Pages[pdfDocument.Pages.Count - 1];
			currentY = _pageMargin;
		}

		var summaryWidth = 250f;
		var summaryX = pdfPage.GetClientSize().Width - summaryWidth - 20;
		var summaryHeight = 250f;

		var summaryRect = new RectangleF(summaryX, currentY, summaryWidth, summaryHeight);
		pdfPage.Graphics.DrawRectangle(new PdfPen(Color.Black, 1), new PdfSolidBrush(_lightGray), summaryRect);

		var summaryY = currentY + 10;
		pdfPage.Graphics.DrawString("Summary", _subHeaderFont, new PdfSolidBrush(_primaryColor), new PointF(summaryX + 10, summaryY));

		summaryY += 25;
		DrawSummaryLine(pdfPage, "Total Items: ", purchase.TotalItems.ToString(), summaryWidth, summaryX, summaryY);

		summaryY += 15;
		DrawSummaryLine(pdfPage, "Total Quantity: ", purchase.TotalQuantity.ToString("N2"), summaryWidth, summaryX, summaryY);

		summaryY += 25;
		DrawSummaryLine(pdfPage, "Base Total: ", purchase.BaseTotal.FormatIndianCurrency(), summaryWidth, summaryX, summaryY);

		summaryY += 10;

		if (purchase.DiscountAmount > 0)
		{
			summaryY += 15;
			DrawSummaryLine(pdfPage, "Discount:", $"-{purchase.DiscountAmount.FormatIndianCurrency()}", summaryWidth, summaryX, summaryY);
		}

		summaryY += 15;
		DrawSummaryLine(pdfPage, "Sub Total: ", purchase.SubTotal.FormatIndianCurrency(), summaryWidth, summaryX, summaryY);

		summaryY += 10;
		if (purchase.CGSTPercent > 0)
		{
			summaryY += 15;
			DrawSummaryLine(pdfPage, $"CGST ({purchase.CGSTPercent:N1}%):", purchase.CGSTAmount.FormatIndianCurrency(), summaryWidth, summaryX, summaryY);
		}

		if (purchase.SGSTPercent > 0)
		{
			summaryY += 15;
			DrawSummaryLine(pdfPage, $"SGST ({purchase.SGSTPercent:N1}%):", purchase.SGSTAmount.FormatIndianCurrency(), summaryWidth, summaryX, summaryY);
		}

		if (purchase.IGSTPercent > 0)
		{
			summaryY += 15;
			DrawSummaryLine(pdfPage, $"IGST ({purchase.IGSTPercent:N1}%):", purchase.IGSTAmount.FormatIndianCurrency(), summaryWidth, summaryX, summaryY);
		}

		if (purchase.CashDiscountAmount > 0)
		{
			summaryY += 15;
			DrawSummaryLine(pdfPage, $"Cash Discount ({purchase.CashDiscountPercent:N1}%):", $"-{purchase.CashDiscountAmount.FormatIndianCurrency()}", summaryWidth, summaryX, summaryY);
		}

		summaryY += 25;
		var grandTotalRect = new RectangleF(summaryX + 5, summaryY - 5, summaryWidth - 10, 25);
		pdfPage.Graphics.DrawRectangle(new PdfPen(_primaryColor, 2), new PdfSolidBrush(_primaryColor), grandTotalRect);
		pdfPage.Graphics.DrawString($"Grand Total: ", new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold),
			PdfBrushes.White, new PointF(summaryX + 10, summaryY));

		var grandTotalText = purchase.Total.FormatIndianCurrency();
		var grandTotalFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12, PdfFontStyle.Bold);
		var grandTotalSize = grandTotalFont.MeasureString(grandTotalText);

		pdfPage.Graphics.DrawString(grandTotalText, grandTotalFont,
			PdfBrushes.White, new PointF(summaryX + summaryWidth - grandTotalSize.Width - 15, summaryY));

		summaryY += 30;
		var amountInWords = purchase.Total.ToNumericWords();
		if (string.IsNullOrEmpty(amountInWords))
			amountInWords = "Zero";
		amountInWords += " Rupees Only";
		// Draw wrapped amount in words
		var availableWidth = summaryWidth - 20; // 10px padding on each side
		DrawWrappedText(pdfPage, amountInWords, _boldFont, new PdfSolidBrush(_primaryColor),
						new RectangleF(summaryX + 10, summaryY, availableWidth, 50),
						PdfTextAlignment.Left, ref summaryY);

		return summaryRect.Height + summaryRect.Y + 20;
	}

	private static void DrawWrappedText(PdfPage pdfPage, string text, PdfFont font, PdfBrush brush, RectangleF bounds, PdfTextAlignment alignment, ref float currentY)
	{
		const float lineSpacing = 15f;
		string[] words = text.Split(' ');
		string line = string.Empty;

		foreach (string word in words)
		{
			string testLine = string.IsNullOrEmpty(line) ? word : line + " " + word;
			SizeF testSize = font.MeasureString(testLine);

			if (testSize.Width <= bounds.Width)
				line = testLine;
			else
			{
				PdfStringFormat format = new() { Alignment = alignment };
				pdfPage.Graphics.DrawString(line, font, brush, new RectangleF(bounds.X, currentY, bounds.Width, bounds.Height), format);
				currentY += lineSpacing;
				line = word;
			}
		}

		if (!string.IsNullOrEmpty(line))
		{
			PdfStringFormat format = new() { Alignment = alignment };
			pdfPage.Graphics.DrawString(line, font, brush, new RectangleF(bounds.X, currentY, bounds.Width, bounds.Height), format);
			currentY += lineSpacing;
		}
	}

	private static void DrawSummaryLine(PdfPage pdfPage, string label, string value, float summaryWidth, float summaryX, float summaryY)
	{
		pdfPage.Graphics.DrawString(label, _normalFont, PdfBrushes.Black, new PointF(summaryX + 10, summaryY));
		pdfPage.Graphics.DrawString(value, _boldFont, new PdfSolidBrush(_secondaryColor),
			new PointF(summaryX + summaryWidth - _boldFont.MeasureString(value).Width - 15, summaryY));
	}
}